Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    BLOCK_COMMENT
    LINE_COMMENT

Grammar

Rule 0     S' -> goal
Rule 1     expression -> assignment_expression
Rule 2     expression_not_name -> assignment_expression_not_name
Rule 3     assignment_expression -> assignment
Rule 4     assignment_expression -> conditional_expression
Rule 5     assignment_expression_not_name -> assignment
Rule 6     assignment_expression_not_name -> conditional_expression_not_name
Rule 7     assignment -> postfix_expression assignment_operator assignment_expression
Rule 8     assignment_operator -> =
Rule 9     assignment_operator -> TIMES_ASSIGN
Rule 10    assignment_operator -> DIVIDE_ASSIGN
Rule 11    assignment_operator -> REMAINDER_ASSIGN
Rule 12    assignment_operator -> PLUS_ASSIGN
Rule 13    assignment_operator -> MINUS_ASSIGN
Rule 14    assignment_operator -> LSHIFT_ASSIGN
Rule 15    assignment_operator -> RSHIFT_ASSIGN
Rule 16    assignment_operator -> RRSHIFT_ASSIGN
Rule 17    assignment_operator -> AND_ASSIGN
Rule 18    assignment_operator -> OR_ASSIGN
Rule 19    assignment_operator -> XOR_ASSIGN
Rule 20    conditional_expression -> conditional_or_expression
Rule 21    conditional_expression -> conditional_or_expression ? expression : conditional_expression
Rule 22    conditional_expression_not_name -> conditional_or_expression_not_name
Rule 23    conditional_expression_not_name -> conditional_or_expression_not_name ? expression : conditional_expression
Rule 24    conditional_expression_not_name -> name ? expression : conditional_expression
Rule 25    conditional_or_expression -> conditional_and_expression
Rule 26    conditional_or_expression -> conditional_or_expression OR conditional_and_expression
Rule 27    conditional_or_expression_not_name -> conditional_and_expression_not_name
Rule 28    conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression
Rule 29    conditional_or_expression_not_name -> name OR conditional_and_expression
Rule 30    conditional_and_expression -> inclusive_or_expression
Rule 31    conditional_and_expression -> conditional_and_expression AND inclusive_or_expression
Rule 32    conditional_and_expression_not_name -> inclusive_or_expression_not_name
Rule 33    conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression
Rule 34    conditional_and_expression_not_name -> name AND inclusive_or_expression
Rule 35    inclusive_or_expression -> exclusive_or_expression
Rule 36    inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression
Rule 37    inclusive_or_expression_not_name -> exclusive_or_expression_not_name
Rule 38    inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression
Rule 39    inclusive_or_expression_not_name -> name | exclusive_or_expression
Rule 40    exclusive_or_expression -> and_expression
Rule 41    exclusive_or_expression -> exclusive_or_expression ^ and_expression
Rule 42    exclusive_or_expression_not_name -> and_expression_not_name
Rule 43    exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression
Rule 44    exclusive_or_expression_not_name -> name ^ and_expression
Rule 45    and_expression -> equality_expression
Rule 46    and_expression -> and_expression & equality_expression
Rule 47    and_expression_not_name -> equality_expression_not_name
Rule 48    and_expression_not_name -> and_expression_not_name & equality_expression
Rule 49    and_expression_not_name -> name & equality_expression
Rule 50    equality_expression -> instanceof_expression
Rule 51    equality_expression -> equality_expression EQ instanceof_expression
Rule 52    equality_expression -> equality_expression NEQ instanceof_expression
Rule 53    equality_expression_not_name -> instanceof_expression_not_name
Rule 54    equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression
Rule 55    equality_expression_not_name -> name EQ instanceof_expression
Rule 56    equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression
Rule 57    equality_expression_not_name -> name NEQ instanceof_expression
Rule 58    instanceof_expression -> relational_expression
Rule 59    instanceof_expression -> instanceof_expression INSTANCEOF reference_type
Rule 60    instanceof_expression_not_name -> relational_expression_not_name
Rule 61    instanceof_expression_not_name -> name INSTANCEOF reference_type
Rule 62    instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type
Rule 63    relational_expression -> shift_expression
Rule 64    relational_expression -> relational_expression > shift_expression
Rule 65    relational_expression -> relational_expression < shift_expression
Rule 66    relational_expression -> relational_expression GTEQ shift_expression
Rule 67    relational_expression -> relational_expression LTEQ shift_expression
Rule 68    relational_expression_not_name -> shift_expression_not_name
Rule 69    relational_expression_not_name -> shift_expression_not_name < shift_expression
Rule 70    relational_expression_not_name -> name < shift_expression
Rule 71    relational_expression_not_name -> shift_expression_not_name > shift_expression
Rule 72    relational_expression_not_name -> name > shift_expression
Rule 73    relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression
Rule 74    relational_expression_not_name -> name GTEQ shift_expression
Rule 75    relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression
Rule 76    relational_expression_not_name -> name LTEQ shift_expression
Rule 77    shift_expression -> additive_expression
Rule 78    shift_expression -> shift_expression LSHIFT additive_expression
Rule 79    shift_expression -> shift_expression RSHIFT additive_expression
Rule 80    shift_expression -> shift_expression RRSHIFT additive_expression
Rule 81    shift_expression_not_name -> additive_expression_not_name
Rule 82    shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression
Rule 83    shift_expression_not_name -> name LSHIFT additive_expression
Rule 84    shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression
Rule 85    shift_expression_not_name -> name RSHIFT additive_expression
Rule 86    shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression
Rule 87    shift_expression_not_name -> name RRSHIFT additive_expression
Rule 88    additive_expression -> multiplicative_expression
Rule 89    additive_expression -> additive_expression + multiplicative_expression
Rule 90    additive_expression -> additive_expression - multiplicative_expression
Rule 91    additive_expression_not_name -> multiplicative_expression_not_name
Rule 92    additive_expression_not_name -> additive_expression_not_name + multiplicative_expression
Rule 93    additive_expression_not_name -> name + multiplicative_expression
Rule 94    additive_expression_not_name -> additive_expression_not_name - multiplicative_expression
Rule 95    additive_expression_not_name -> name - multiplicative_expression
Rule 96    multiplicative_expression -> unary_expression
Rule 97    multiplicative_expression -> multiplicative_expression * unary_expression
Rule 98    multiplicative_expression -> multiplicative_expression / unary_expression
Rule 99    multiplicative_expression -> multiplicative_expression % unary_expression
Rule 100   multiplicative_expression_not_name -> unary_expression_not_name
Rule 101   multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression
Rule 102   multiplicative_expression_not_name -> name * unary_expression
Rule 103   multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression
Rule 104   multiplicative_expression_not_name -> name / unary_expression
Rule 105   multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression
Rule 106   multiplicative_expression_not_name -> name % unary_expression
Rule 107   unary_expression -> pre_increment_expression
Rule 108   unary_expression -> pre_decrement_expression
Rule 109   unary_expression -> + unary_expression
Rule 110   unary_expression -> - unary_expression
Rule 111   unary_expression -> unary_expression_not_plus_minus
Rule 112   unary_expression_not_name -> pre_increment_expression
Rule 113   unary_expression_not_name -> pre_decrement_expression
Rule 114   unary_expression_not_name -> + unary_expression
Rule 115   unary_expression_not_name -> - unary_expression
Rule 116   unary_expression_not_name -> unary_expression_not_plus_minus_not_name
Rule 117   pre_increment_expression -> PLUSPLUS unary_expression
Rule 118   pre_decrement_expression -> MINUSMINUS unary_expression
Rule 119   unary_expression_not_plus_minus -> postfix_expression
Rule 120   unary_expression_not_plus_minus -> ~ unary_expression
Rule 121   unary_expression_not_plus_minus -> ! unary_expression
Rule 122   unary_expression_not_plus_minus -> cast_expression
Rule 123   unary_expression_not_plus_minus_not_name -> postfix_expression_not_name
Rule 124   unary_expression_not_plus_minus_not_name -> ~ unary_expression
Rule 125   unary_expression_not_plus_minus_not_name -> ! unary_expression
Rule 126   unary_expression_not_plus_minus_not_name -> cast_expression
Rule 127   postfix_expression -> primary
Rule 128   postfix_expression -> name
Rule 129   postfix_expression -> post_increment_expression
Rule 130   postfix_expression -> post_decrement_expression
Rule 131   postfix_expression_not_name -> primary
Rule 132   postfix_expression_not_name -> post_increment_expression
Rule 133   postfix_expression_not_name -> post_decrement_expression
Rule 134   post_increment_expression -> postfix_expression PLUSPLUS
Rule 135   post_decrement_expression -> postfix_expression MINUSMINUS
Rule 136   primary -> primary_no_new_array
Rule 137   primary -> array_creation_with_array_initializer
Rule 138   primary -> array_creation_without_array_initializer
Rule 139   primary_no_new_array -> literal
Rule 140   primary_no_new_array -> THIS
Rule 141   primary_no_new_array -> class_instance_creation_expression
Rule 142   primary_no_new_array -> field_access
Rule 143   primary_no_new_array -> method_invocation
Rule 144   primary_no_new_array -> array_access
Rule 145   primary_no_new_array -> ( name )
Rule 146   primary_no_new_array -> ( expression_not_name )
Rule 147   primary_no_new_array -> name . THIS
Rule 148   primary_no_new_array -> name . SUPER
Rule 149   primary_no_new_array -> name . CLASS
Rule 150   primary_no_new_array -> name dims . CLASS
Rule 151   primary_no_new_array -> primitive_type dims . CLASS
Rule 152   primary_no_new_array -> primitive_type . CLASS
Rule 153   dims_opt -> dims
Rule 154   dims_opt -> empty
Rule 155   dims -> dims_loop
Rule 156   dims_loop -> one_dim_loop
Rule 157   dims_loop -> dims_loop one_dim_loop
Rule 158   one_dim_loop -> [ ]
Rule 159   cast_expression -> ( primitive_type dims_opt ) unary_expression
Rule 160   cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus
Rule 161   cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
Rule 162   cast_expression -> ( name ) unary_expression_not_plus_minus
Rule 163   cast_expression -> ( name dims ) unary_expression_not_plus_minus
Rule 164   block -> { block_statements_opt }
Rule 165   block_statements_opt -> block_statements
Rule 166   block_statements_opt -> empty
Rule 167   block_statements -> block_statement
Rule 168   block_statements -> block_statements block_statement
Rule 169   block_statement -> local_variable_declaration_statement
Rule 170   block_statement -> statement
Rule 171   block_statement -> class_declaration
Rule 172   block_statement -> interface_declaration
Rule 173   block_statement -> annotation_type_declaration
Rule 174   block_statement -> enum_declaration
Rule 175   local_variable_declaration_statement -> local_variable_declaration ;
Rule 176   local_variable_declaration -> type variable_declarators
Rule 177   local_variable_declaration -> modifiers type variable_declarators
Rule 178   variable_declarators -> variable_declarator
Rule 179   variable_declarators -> variable_declarators , variable_declarator
Rule 180   variable_declarator -> variable_declarator_id
Rule 181   variable_declarator -> variable_declarator_id = variable_initializer
Rule 182   variable_declarator_id -> NAME dims_opt
Rule 183   variable_initializer -> expression
Rule 184   variable_initializer -> array_initializer
Rule 185   statement -> statement_without_trailing_substatement
Rule 186   statement -> labeled_statement
Rule 187   statement -> if_then_statement
Rule 188   statement -> if_then_else_statement
Rule 189   statement -> while_statement
Rule 190   statement -> for_statement
Rule 191   statement -> enhanced_for_statement
Rule 192   statement_without_trailing_substatement -> block
Rule 193   statement_without_trailing_substatement -> expression_statement
Rule 194   statement_without_trailing_substatement -> assert_statement
Rule 195   statement_without_trailing_substatement -> empty_statement
Rule 196   statement_without_trailing_substatement -> switch_statement
Rule 197   statement_without_trailing_substatement -> do_statement
Rule 198   statement_without_trailing_substatement -> break_statement
Rule 199   statement_without_trailing_substatement -> continue_statement
Rule 200   statement_without_trailing_substatement -> return_statement
Rule 201   statement_without_trailing_substatement -> synchronized_statement
Rule 202   statement_without_trailing_substatement -> throw_statement
Rule 203   statement_without_trailing_substatement -> try_statement
Rule 204   statement_without_trailing_substatement -> try_statement_with_resources
Rule 205   expression_statement -> statement_expression ;
Rule 206   expression_statement -> explicit_constructor_invocation
Rule 207   statement_expression -> assignment
Rule 208   statement_expression -> pre_increment_expression
Rule 209   statement_expression -> pre_decrement_expression
Rule 210   statement_expression -> post_increment_expression
Rule 211   statement_expression -> post_decrement_expression
Rule 212   statement_expression -> method_invocation
Rule 213   statement_expression -> class_instance_creation_expression
Rule 214   comma_opt -> ,
Rule 215   comma_opt -> empty
Rule 216   array_initializer -> { comma_opt }
Rule 217   array_initializer -> { variable_initializers }
Rule 218   array_initializer -> { variable_initializers , }
Rule 219   variable_initializers -> variable_initializer
Rule 220   variable_initializers -> variable_initializers , variable_initializer
Rule 221   method_invocation -> NAME ( argument_list_opt )
Rule 222   method_invocation -> name . type_arguments NAME ( argument_list_opt )
Rule 223   method_invocation -> primary . type_arguments NAME ( argument_list_opt )
Rule 224   method_invocation -> SUPER . type_arguments NAME ( argument_list_opt )
Rule 225   method_invocation -> name . NAME ( argument_list_opt )
Rule 226   method_invocation -> primary . NAME ( argument_list_opt )
Rule 227   method_invocation -> SUPER . NAME ( argument_list_opt )
Rule 228   labeled_statement -> label : statement
Rule 229   labeled_statement_no_short_if -> label : statement_no_short_if
Rule 230   label -> NAME
Rule 231   if_then_statement -> IF ( expression ) statement
Rule 232   if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement
Rule 233   if_then_else_statement_no_short_if -> IF ( expression ) statement_no_short_if ELSE statement_no_short_if
Rule 234   while_statement -> WHILE ( expression ) statement
Rule 235   while_statement_no_short_if -> WHILE ( expression ) statement_no_short_if
Rule 236   for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
Rule 237   for_statement_no_short_if -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
Rule 238   for_init_opt -> for_init
Rule 239   for_init_opt -> empty
Rule 240   for_init -> statement_expression_list
Rule 241   for_init -> local_variable_declaration
Rule 242   statement_expression_list -> statement_expression
Rule 243   statement_expression_list -> statement_expression_list , statement_expression
Rule 244   expression_opt -> expression
Rule 245   expression_opt -> empty
Rule 246   for_update_opt -> for_update
Rule 247   for_update_opt -> empty
Rule 248   for_update -> statement_expression_list
Rule 249   enhanced_for_statement -> enhanced_for_statement_header statement
Rule 250   enhanced_for_statement_no_short_if -> enhanced_for_statement_header statement_no_short_if
Rule 251   enhanced_for_statement_header -> enhanced_for_statement_header_init : expression )
Rule 252   enhanced_for_statement_header_init -> FOR ( type NAME dims_opt
Rule 253   enhanced_for_statement_header_init -> FOR ( modifiers type NAME dims_opt
Rule 254   statement_no_short_if -> statement_without_trailing_substatement
Rule 255   statement_no_short_if -> labeled_statement_no_short_if
Rule 256   statement_no_short_if -> if_then_else_statement_no_short_if
Rule 257   statement_no_short_if -> while_statement_no_short_if
Rule 258   statement_no_short_if -> for_statement_no_short_if
Rule 259   statement_no_short_if -> enhanced_for_statement_no_short_if
Rule 260   assert_statement -> ASSERT expression ;
Rule 261   assert_statement -> ASSERT expression : expression ;
Rule 262   empty_statement -> ;
Rule 263   switch_statement -> SWITCH ( expression ) switch_block
Rule 264   switch_block -> { }
Rule 265   switch_block -> { switch_block_statements }
Rule 266   switch_block -> { switch_labels }
Rule 267   switch_block -> { switch_block_statements switch_labels }
Rule 268   switch_block_statements -> switch_block_statement
Rule 269   switch_block_statements -> switch_block_statements switch_block_statement
Rule 270   switch_block_statement -> switch_labels block_statements
Rule 271   switch_labels -> switch_label
Rule 272   switch_labels -> switch_labels switch_label
Rule 273   switch_label -> CASE constant_expression :
Rule 274   switch_label -> DEFAULT :
Rule 275   constant_expression -> expression
Rule 276   do_statement -> DO statement WHILE ( expression ) ;
Rule 277   break_statement -> BREAK ;
Rule 278   break_statement -> BREAK NAME ;
Rule 279   continue_statement -> CONTINUE ;
Rule 280   continue_statement -> CONTINUE NAME ;
Rule 281   return_statement -> RETURN expression_opt ;
Rule 282   synchronized_statement -> SYNCHRONIZED ( expression ) block
Rule 283   throw_statement -> THROW expression ;
Rule 284   try_statement -> TRY try_block catches
Rule 285   try_statement -> TRY try_block catches_opt finally
Rule 286   try_block -> block
Rule 287   catches -> catch_clause
Rule 288   catches -> catches catch_clause
Rule 289   catches_opt -> catches
Rule 290   catches_opt -> empty
Rule 291   catch_clause -> CATCH ( catch_formal_parameter ) block
Rule 292   catch_formal_parameter -> modifiers_opt catch_type variable_declarator_id
Rule 293   catch_type -> union_type
Rule 294   union_type -> type
Rule 295   union_type -> union_type | type
Rule 296   try_statement_with_resources -> TRY resource_specification try_block catches_opt
Rule 297   try_statement_with_resources -> TRY resource_specification try_block catches_opt finally
Rule 298   resource_specification -> ( resources semi_opt )
Rule 299   semi_opt -> ;
Rule 300   semi_opt -> empty
Rule 301   resources -> resource
Rule 302   resources -> resources trailing_semicolon resource
Rule 303   trailing_semicolon -> ;
Rule 304   resource -> type variable_declarator_id = variable_initializer
Rule 305   resource -> modifiers type variable_declarator_id = variable_initializer
Rule 306   finally -> FINALLY block
Rule 307   explicit_constructor_invocation -> THIS ( argument_list_opt ) ;
Rule 308   explicit_constructor_invocation -> SUPER ( argument_list_opt ) ;
Rule 309   explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ;
Rule 310   explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ;
Rule 311   explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ;
Rule 312   explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ;
Rule 313   explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ;
Rule 314   explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ;
Rule 315   explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ;
Rule 316   explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ;
Rule 317   explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ;
Rule 318   explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ;
Rule 319   class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt
Rule 320   class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt
Rule 321   class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
Rule 322   class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt
Rule 323   class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
Rule 324   class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
Rule 325   class_instance_creation_expression_name -> name .
Rule 326   class_body_opt -> class_body
Rule 327   class_body_opt -> empty
Rule 328   field_access -> primary . NAME
Rule 329   field_access -> SUPER . NAME
Rule 330   array_access -> name [ expression ]
Rule 331   array_access -> primary_no_new_array [ expression ]
Rule 332   array_access -> array_creation_with_array_initializer [ expression ]
Rule 333   array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer
Rule 334   array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer
Rule 335   dim_with_or_without_exprs -> dim_with_or_without_expr
Rule 336   dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr
Rule 337   dim_with_or_without_expr -> [ expression ]
Rule 338   dim_with_or_without_expr -> [ ]
Rule 339   array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs
Rule 340   array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs
Rule 341   name -> simple_name
Rule 342   name -> qualified_name
Rule 343   simple_name -> NAME
Rule 344   qualified_name -> name . simple_name
Rule 345   literal -> NUM
Rule 346   literal -> CHAR_LITERAL
Rule 347   literal -> STRING_LITERAL
Rule 348   literal -> TRUE
Rule 349   literal -> FALSE
Rule 350   literal -> NULL
Rule 351   modifiers_opt -> modifiers
Rule 352   modifiers_opt -> empty
Rule 353   modifiers -> modifier
Rule 354   modifiers -> modifiers modifier
Rule 355   modifier -> PUBLIC
Rule 356   modifier -> PROTECTED
Rule 357   modifier -> PRIVATE
Rule 358   modifier -> STATIC
Rule 359   modifier -> ABSTRACT
Rule 360   modifier -> FINAL
Rule 361   modifier -> NATIVE
Rule 362   modifier -> SYNCHRONIZED
Rule 363   modifier -> TRANSIENT
Rule 364   modifier -> VOLATILE
Rule 365   modifier -> STRICTFP
Rule 366   modifier -> annotation
Rule 367   type -> primitive_type
Rule 368   type -> reference_type
Rule 369   primitive_type -> BOOLEAN
Rule 370   primitive_type -> VOID
Rule 371   primitive_type -> BYTE
Rule 372   primitive_type -> SHORT
Rule 373   primitive_type -> INT
Rule 374   primitive_type -> LONG
Rule 375   primitive_type -> CHAR
Rule 376   primitive_type -> FLOAT
Rule 377   primitive_type -> DOUBLE
Rule 378   reference_type -> class_or_interface_type
Rule 379   reference_type -> array_type
Rule 380   class_or_interface_type -> class_or_interface
Rule 381   class_or_interface_type -> generic_type
Rule 382   class_type -> class_or_interface_type
Rule 383   class_or_interface -> name
Rule 384   class_or_interface -> generic_type . name
Rule 385   generic_type -> class_or_interface type_arguments
Rule 386   generic_type -> class_or_interface < >
Rule 387   array_type -> primitive_type dims
Rule 388   array_type -> name dims
Rule 389   array_type -> generic_type dims
Rule 390   array_type -> generic_type . name dims
Rule 391   type_arguments -> < type_argument_list1
Rule 392   type_argument_list1 -> type_argument1
Rule 393   type_argument_list1 -> type_argument_list , type_argument1
Rule 394   type_argument_list -> type_argument
Rule 395   type_argument_list -> type_argument_list , type_argument
Rule 396   type_argument -> reference_type
Rule 397   type_argument -> wildcard
Rule 398   type_argument1 -> reference_type1
Rule 399   type_argument1 -> wildcard1
Rule 400   reference_type1 -> reference_type >
Rule 401   reference_type1 -> class_or_interface < type_argument_list2
Rule 402   type_argument_list2 -> type_argument2
Rule 403   type_argument_list2 -> type_argument_list , type_argument2
Rule 404   type_argument2 -> reference_type2
Rule 405   type_argument2 -> wildcard2
Rule 406   reference_type2 -> reference_type RSHIFT
Rule 407   reference_type2 -> class_or_interface < type_argument_list3
Rule 408   type_argument_list3 -> type_argument3
Rule 409   type_argument_list3 -> type_argument_list , type_argument3
Rule 410   type_argument3 -> reference_type3
Rule 411   type_argument3 -> wildcard3
Rule 412   reference_type3 -> reference_type RRSHIFT
Rule 413   wildcard -> ?
Rule 414   wildcard -> ? wildcard_bounds
Rule 415   wildcard_bounds -> EXTENDS reference_type
Rule 416   wildcard_bounds -> SUPER reference_type
Rule 417   wildcard1 -> ? >
Rule 418   wildcard1 -> ? wildcard_bounds1
Rule 419   wildcard_bounds1 -> EXTENDS reference_type1
Rule 420   wildcard_bounds1 -> SUPER reference_type1
Rule 421   wildcard2 -> ? RSHIFT
Rule 422   wildcard2 -> ? wildcard_bounds2
Rule 423   wildcard_bounds2 -> EXTENDS reference_type2
Rule 424   wildcard_bounds2 -> SUPER reference_type2
Rule 425   wildcard3 -> ? RRSHIFT
Rule 426   wildcard3 -> ? wildcard_bounds3
Rule 427   wildcard_bounds3 -> EXTENDS reference_type3
Rule 428   wildcard_bounds3 -> SUPER reference_type3
Rule 429   type_parameter_header -> NAME
Rule 430   type_parameters -> < type_parameter_list1
Rule 431   type_parameter_list -> type_parameter
Rule 432   type_parameter_list -> type_parameter_list , type_parameter
Rule 433   type_parameter -> type_parameter_header
Rule 434   type_parameter -> type_parameter_header EXTENDS reference_type
Rule 435   type_parameter -> type_parameter_header EXTENDS reference_type additional_bound_list
Rule 436   additional_bound_list -> additional_bound
Rule 437   additional_bound_list -> additional_bound_list additional_bound
Rule 438   additional_bound -> & reference_type
Rule 439   type_parameter_list1 -> type_parameter1
Rule 440   type_parameter_list1 -> type_parameter_list , type_parameter1
Rule 441   type_parameter1 -> type_parameter_header >
Rule 442   type_parameter1 -> type_parameter_header EXTENDS reference_type1
Rule 443   type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1
Rule 444   additional_bound_list1 -> additional_bound1
Rule 445   additional_bound_list1 -> additional_bound_list additional_bound1
Rule 446   additional_bound1 -> & reference_type1
Rule 447   type_declaration -> class_declaration
Rule 448   type_declaration -> interface_declaration
Rule 449   type_declaration -> enum_declaration
Rule 450   type_declaration -> annotation_type_declaration
Rule 451   type_declaration -> ;
Rule 452   class_declaration -> class_header class_body
Rule 453   class_header -> class_header_name class_header_extends_opt class_header_implements_opt
Rule 454   class_header_name -> class_header_name1 type_parameters
Rule 455   class_header_name -> class_header_name1
Rule 456   class_header_name1 -> modifiers_opt CLASS NAME
Rule 457   class_header_extends_opt -> class_header_extends
Rule 458   class_header_extends_opt -> empty
Rule 459   class_header_extends -> EXTENDS class_type
Rule 460   class_header_implements_opt -> class_header_implements
Rule 461   class_header_implements_opt -> empty
Rule 462   class_header_implements -> IMPLEMENTS interface_type_list
Rule 463   interface_type_list -> interface_type
Rule 464   interface_type_list -> interface_type_list , interface_type
Rule 465   interface_type -> class_or_interface_type
Rule 466   class_body -> { class_body_declarations_opt }
Rule 467   class_body_declarations_opt -> class_body_declarations
Rule 468   class_body_declarations_opt -> empty
Rule 469   class_body_declarations -> class_body_declaration
Rule 470   class_body_declarations -> class_body_declarations class_body_declaration
Rule 471   class_body_declaration -> class_member_declaration
Rule 472   class_body_declaration -> static_initializer
Rule 473   class_body_declaration -> constructor_declaration
Rule 474   class_body_declaration -> block
Rule 475   class_member_declaration -> field_declaration
Rule 476   class_member_declaration -> class_declaration
Rule 477   class_member_declaration -> method_declaration
Rule 478   class_member_declaration -> interface_declaration
Rule 479   class_member_declaration -> enum_declaration
Rule 480   class_member_declaration -> annotation_type_declaration
Rule 481   class_member_declaration -> ;
Rule 482   field_declaration -> modifiers_opt type variable_declarators ;
Rule 483   static_initializer -> STATIC block
Rule 484   constructor_declaration -> constructor_header method_body
Rule 485   constructor_header -> constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt
Rule 486   constructor_header_name -> modifiers_opt type_parameters NAME (
Rule 487   constructor_header_name -> modifiers_opt NAME (
Rule 488   formal_parameter_list_opt -> formal_parameter_list
Rule 489   formal_parameter_list_opt -> empty
Rule 490   formal_parameter_list -> formal_parameter
Rule 491   formal_parameter_list -> formal_parameter_list , formal_parameter
Rule 492   formal_parameter -> modifiers_opt type variable_declarator_id
Rule 493   formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id
Rule 494   method_header_throws_clause_opt -> method_header_throws_clause
Rule 495   method_header_throws_clause_opt -> empty
Rule 496   method_header_throws_clause -> THROWS class_type_list
Rule 497   class_type_list -> class_type_elt
Rule 498   class_type_list -> class_type_list , class_type_elt
Rule 499   class_type_elt -> class_type
Rule 500   method_body -> { block_statements_opt }
Rule 501   method_declaration -> abstract_method_declaration
Rule 502   method_declaration -> method_header method_body
Rule 503   abstract_method_declaration -> method_header ;
Rule 504   method_header -> method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt
Rule 505   method_header_name -> modifiers_opt type_parameters type NAME (
Rule 506   method_header_name -> modifiers_opt type NAME (
Rule 507   method_header_extended_dims -> dims_opt
Rule 508   interface_declaration -> interface_header interface_body
Rule 509   interface_header -> interface_header_name interface_header_extends_opt
Rule 510   interface_header_name -> interface_header_name1 type_parameters
Rule 511   interface_header_name -> interface_header_name1
Rule 512   interface_header_name1 -> modifiers_opt INTERFACE NAME
Rule 513   interface_header_extends_opt -> interface_header_extends
Rule 514   interface_header_extends_opt -> empty
Rule 515   interface_header_extends -> EXTENDS interface_type_list
Rule 516   interface_body -> { interface_member_declarations_opt }
Rule 517   interface_member_declarations_opt -> interface_member_declarations
Rule 518   interface_member_declarations_opt -> empty
Rule 519   interface_member_declarations -> interface_member_declaration
Rule 520   interface_member_declarations -> interface_member_declarations interface_member_declaration
Rule 521   interface_member_declaration -> constant_declaration
Rule 522   interface_member_declaration -> abstract_method_declaration
Rule 523   interface_member_declaration -> class_declaration
Rule 524   interface_member_declaration -> interface_declaration
Rule 525   interface_member_declaration -> enum_declaration
Rule 526   interface_member_declaration -> annotation_type_declaration
Rule 527   interface_member_declaration -> ;
Rule 528   constant_declaration -> field_declaration
Rule 529   enum_declaration -> enum_header enum_body
Rule 530   enum_header -> enum_header_name class_header_implements_opt
Rule 531   enum_header_name -> modifiers_opt ENUM NAME
Rule 532   enum_header_name -> modifiers_opt ENUM NAME type_parameters
Rule 533   enum_body -> { enum_body_declarations_opt }
Rule 534   enum_body -> { , enum_body_declarations_opt }
Rule 535   enum_body -> { enum_constants , enum_body_declarations_opt }
Rule 536   enum_body -> { enum_constants enum_body_declarations_opt }
Rule 537   enum_constants -> enum_constant
Rule 538   enum_constants -> enum_constants , enum_constant
Rule 539   enum_constant -> enum_constant_header class_body
Rule 540   enum_constant -> enum_constant_header
Rule 541   enum_constant_header -> enum_constant_header_name arguments_opt
Rule 542   enum_constant_header_name -> modifiers_opt NAME
Rule 543   arguments_opt -> arguments
Rule 544   arguments_opt -> empty
Rule 545   arguments -> ( argument_list_opt )
Rule 546   argument_list_opt -> argument_list
Rule 547   argument_list_opt -> empty
Rule 548   argument_list -> expression
Rule 549   argument_list -> argument_list , expression
Rule 550   enum_body_declarations_opt -> enum_declarations
Rule 551   enum_body_declarations_opt -> empty
Rule 552   enum_declarations -> ; class_body_declarations_opt
Rule 553   annotation_type_declaration -> annotation_type_declaration_header annotation_type_body
Rule 554   annotation_type_declaration_header -> annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
Rule 555   annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME
Rule 556   annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME type_parameters
Rule 557   annotation_type_declaration_header_name -> @ INTERFACE NAME type_parameters
Rule 558   annotation_type_declaration_header_name -> @ INTERFACE NAME
Rule 559   annotation_type_body -> { annotation_type_member_declarations_opt }
Rule 560   annotation_type_member_declarations_opt -> annotation_type_member_declarations
Rule 561   annotation_type_member_declarations_opt -> empty
Rule 562   annotation_type_member_declarations -> annotation_type_member_declaration
Rule 563   annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration
Rule 564   annotation_type_member_declaration -> annotation_method_header ;
Rule 565   annotation_type_member_declaration -> constant_declaration
Rule 566   annotation_type_member_declaration -> constructor_declaration
Rule 567   annotation_type_member_declaration -> type_declaration
Rule 568   annotation_method_header -> annotation_method_header_name formal_parameter_list_opt ) method_header_extended_dims annotation_method_header_default_value_opt
Rule 569   annotation_method_header_name -> modifiers_opt type_parameters type NAME (
Rule 570   annotation_method_header_name -> modifiers_opt type NAME (
Rule 571   annotation_method_header_default_value_opt -> default_value
Rule 572   annotation_method_header_default_value_opt -> empty
Rule 573   default_value -> DEFAULT member_value
Rule 574   member_value -> conditional_expression_not_name
Rule 575   member_value -> name
Rule 576   member_value -> annotation
Rule 577   member_value -> member_value_array_initializer
Rule 578   member_value_array_initializer -> { member_values , }
Rule 579   member_value_array_initializer -> { member_values }
Rule 580   member_value_array_initializer -> { , }
Rule 581   member_value_array_initializer -> { }
Rule 582   member_values -> member_value
Rule 583   member_values -> member_values , member_value
Rule 584   annotation -> normal_annotation
Rule 585   annotation -> marker_annotation
Rule 586   annotation -> single_member_annotation
Rule 587   normal_annotation -> annotation_name ( member_value_pairs_opt )
Rule 588   annotation_name -> @ name
Rule 589   member_value_pairs_opt -> member_value_pairs
Rule 590   member_value_pairs_opt -> empty
Rule 591   member_value_pairs -> member_value_pair
Rule 592   member_value_pairs -> member_value_pairs , member_value_pair
Rule 593   member_value_pair -> simple_name = member_value
Rule 594   marker_annotation -> annotation_name
Rule 595   single_member_annotation -> annotation_name ( single_member_annotation_member_value )
Rule 596   single_member_annotation_member_value -> member_value
Rule 597   compilation_unit -> package_declaration
Rule 598   compilation_unit -> package_declaration import_declarations
Rule 599   compilation_unit -> package_declaration import_declarations type_declarations
Rule 600   compilation_unit -> package_declaration type_declarations
Rule 601   compilation_unit -> import_declarations
Rule 602   compilation_unit -> type_declarations
Rule 603   compilation_unit -> import_declarations type_declarations
Rule 604   compilation_unit -> empty
Rule 605   package_declaration -> package_declaration_name ;
Rule 606   package_declaration_name -> modifiers PACKAGE name
Rule 607   package_declaration_name -> PACKAGE name
Rule 608   import_declarations -> import_declaration
Rule 609   import_declarations -> import_declarations import_declaration
Rule 610   import_declaration -> single_type_import_declaration
Rule 611   import_declaration -> type_import_on_demand_declaration
Rule 612   import_declaration -> single_static_import_declaration
Rule 613   import_declaration -> static_import_on_demand_declaration
Rule 614   single_type_import_declaration -> IMPORT name ;
Rule 615   type_import_on_demand_declaration -> IMPORT name . * ;
Rule 616   single_static_import_declaration -> IMPORT STATIC name ;
Rule 617   static_import_on_demand_declaration -> IMPORT STATIC name . * ;
Rule 618   type_declarations -> type_declaration
Rule 619   type_declarations -> type_declarations type_declaration
Rule 620   goal -> PLUSPLUS compilation_unit
Rule 621   goal -> MINUSMINUS expression
Rule 622   goal -> * block_statement
Rule 623   empty -> <empty>

Terminals, with rules where they appear

!                    : 121 125
%                    : 99 105 106
&                    : 46 48 49 438 446
(                    : 145 146 159 160 161 162 163 221 222 223 224 225 226 227 231 232 233 234 235 236 237 252 253 263 276 282 291 298 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 486 487 505 506 545 569 570 587 595
)                    : 145 146 159 160 161 162 163 221 222 223 224 225 226 227 231 232 233 234 235 236 237 251 263 276 282 291 298 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 485 504 545 568 587 595
*                    : 97 101 102 615 617 622
+                    : 89 92 93 109 114
,                    : 179 214 218 220 243 393 395 403 409 432 440 464 491 498 534 535 538 549 578 580 583 592
-                    : 90 94 95 110 115
.                    : 147 148 149 150 151 152 161 222 223 224 225 226 227 311 312 313 314 315 316 317 318 321 322 325 328 329 344 384 390 615 617
/                    : 98 103 104
:                    : 21 23 24 228 229 251 261 273 274
;                    : 175 205 236 236 237 237 260 261 262 276 277 278 279 280 281 283 299 303 307 308 309 310 311 312 313 314 315 316 317 318 451 481 482 503 527 552 564 605 614 615 616 617
<                    : 65 69 70 386 391 401 407 430
=                    : 8 181 304 305 593
>                    : 64 71 72 386 400 417 441
?                    : 21 23 24 413 414 417 418 421 422 425 426
@                    : 555 556 557 558 588
ABSTRACT             : 359
AND                  : 31 33 34
AND_ASSIGN           : 17
ASSERT               : 260 261
BLOCK_COMMENT        : 
BOOLEAN              : 369
BREAK                : 277 278
BYTE                 : 371
CASE                 : 273
CATCH                : 291
CHAR                 : 375
CHAR_LITERAL         : 346
CLASS                : 149 150 151 152 456
CONTINUE             : 279 280
DEFAULT              : 274 573
DIVIDE_ASSIGN        : 10
DO                   : 276
DOUBLE               : 377
ELLIPSIS             : 493
ELSE                 : 232 233
ENUM                 : 531 532
EQ                   : 51 54 55
EXTENDS              : 415 419 423 427 434 435 442 443 459 515
FALSE                : 349
FINAL                : 360
FINALLY              : 306
FLOAT                : 376
FOR                  : 236 237 252 253
GTEQ                 : 66 73 74
IF                   : 231 232 233
IMPLEMENTS           : 462
IMPORT               : 614 615 616 617
INSTANCEOF           : 59 61 62
INT                  : 373
INTERFACE            : 512 555 556 557 558
LINE_COMMENT         : 
LONG                 : 374
LSHIFT               : 78 82 83
LSHIFT_ASSIGN        : 14
LTEQ                 : 67 75 76
MINUSMINUS           : 118 135 621
MINUS_ASSIGN         : 13
NAME                 : 182 221 222 223 224 225 226 227 230 252 253 278 280 328 329 343 429 456 486 487 505 506 512 531 532 542 555 556 557 558 569 570
NATIVE               : 361
NEQ                  : 52 56 57
NEW                  : 319 320 321 322 323 324 333 334 339 340
NULL                 : 350
NUM                  : 345
OR                   : 26 28 29
OR_ASSIGN            : 18
PACKAGE              : 606 607
PLUSPLUS             : 117 134 620
PLUS_ASSIGN          : 12
PRIVATE              : 357
PROTECTED            : 356
PUBLIC               : 355
REMAINDER_ASSIGN     : 11
RETURN               : 281
RRSHIFT              : 80 86 87 412 425
RRSHIFT_ASSIGN       : 16
RSHIFT               : 79 84 85 406 421
RSHIFT_ASSIGN        : 15
SHORT                : 372
STATIC               : 358 483 616 617
STRICTFP             : 365
STRING_LITERAL       : 347
SUPER                : 148 224 227 308 309 311 312 315 316 329 416 420 424 428
SWITCH               : 263
SYNCHRONIZED         : 282 362
THIS                 : 140 147 307 310 313 314 317 318
THROW                : 283
THROWS               : 496
TIMES_ASSIGN         : 9
TRANSIENT            : 363
TRUE                 : 348
TRY                  : 284 285 296 297
VOID                 : 370
VOLATILE             : 364
WHILE                : 234 235 276
XOR_ASSIGN           : 19
[                    : 158 330 331 332 337 338
]                    : 158 330 331 332 337 338
^                    : 41 43 44
error                : 
{                    : 164 216 217 218 264 265 266 267 466 500 516 533 534 535 536 559 578 579 580 581
|                    : 36 38 39 295
}                    : 164 216 217 218 264 265 266 267 466 500 516 533 534 535 536 559 578 579 580 581
~                    : 120 124

Nonterminals, with rules where they appear

abstract_method_declaration : 501 522
additional_bound     : 436 437
additional_bound1    : 444 445
additional_bound_list : 435 437 445
additional_bound_list1 : 443
additive_expression  : 77 78 79 80 82 83 84 85 86 87 89 90
additive_expression_not_name : 81 92 94
and_expression       : 40 41 43 44 46
and_expression_not_name : 42 48
annotation           : 366 576
annotation_method_header : 564
annotation_method_header_default_value_opt : 568
annotation_method_header_name : 568
annotation_name      : 587 594 595
annotation_type_body : 553
annotation_type_declaration : 173 450 480 526
annotation_type_declaration_header : 553
annotation_type_declaration_header_name : 554
annotation_type_member_declaration : 562 563
annotation_type_member_declarations : 560 563
annotation_type_member_declarations_opt : 559
argument_list        : 546 549
argument_list_opt    : 221 222 223 224 225 226 227 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 545
arguments            : 543
arguments_opt        : 541
array_access         : 144
array_creation_with_array_initializer : 137 332
array_creation_without_array_initializer : 138
array_initializer    : 184 333 334
array_type           : 379
assert_statement     : 194
assignment           : 3 5 207
assignment_expression : 1 7
assignment_expression_not_name : 2
assignment_operator  : 7
block                : 192 282 286 291 306 474 483
block_statement      : 167 168 622
block_statements     : 165 168 270
block_statements_opt : 164 500
break_statement      : 198
cast_expression      : 122 126
catch_clause         : 287 288
catch_formal_parameter : 291
catch_type           : 292
catches              : 284 288 289
catches_opt          : 285 296 297
class_body           : 326 452 539
class_body_declaration : 469 470
class_body_declarations : 467 470
class_body_declarations_opt : 466 552
class_body_opt       : 319 320 321 322 323 324
class_declaration    : 171 447 476 523
class_header         : 452
class_header_extends : 457
class_header_extends_opt : 453 554
class_header_implements : 460
class_header_implements_opt : 453 530 554
class_header_name    : 453
class_header_name1   : 454 455
class_instance_creation_expression : 141 213
class_instance_creation_expression_name : 323 324
class_member_declaration : 471
class_or_interface   : 380 385 386 401 407
class_or_interface_type : 161 334 340 378 382 465
class_type           : 319 320 321 322 323 324 459 499
class_type_elt       : 497 498
class_type_list      : 496 498
comma_opt            : 216
compilation_unit     : 620
conditional_and_expression : 25 26 28 29 31
conditional_and_expression_not_name : 27 33
conditional_expression : 4 21 23 24
conditional_expression_not_name : 6 574
conditional_or_expression : 20 21 26
conditional_or_expression_not_name : 22 23 28
constant_declaration : 521 565
constant_expression  : 273
constructor_declaration : 473 566
constructor_header   : 484
constructor_header_name : 485
continue_statement   : 199
default_value        : 571
dim_with_or_without_expr : 335 336
dim_with_or_without_exprs : 333 334 336 339 340
dims                 : 150 151 153 163 387 388 389 390
dims_loop            : 155 157
dims_opt             : 159 160 161 182 252 253 507
do_statement         : 197
empty                : 154 166 215 239 245 247 290 300 327 352 458 461 468 489 495 514 518 544 547 551 561 572 590 604
empty_statement      : 195
enhanced_for_statement : 191
enhanced_for_statement_header : 249 250
enhanced_for_statement_header_init : 251
enhanced_for_statement_no_short_if : 259
enum_body            : 529
enum_body_declarations_opt : 533 534 535 536
enum_constant        : 537 538
enum_constant_header : 539 540
enum_constant_header_name : 541
enum_constants       : 535 536 538
enum_declaration     : 174 449 479 525
enum_declarations    : 550
enum_header          : 529
enum_header_name     : 530
equality_expression  : 45 46 48 49 51 52
equality_expression_not_name : 47 54 56
exclusive_or_expression : 35 36 38 39 41
exclusive_or_expression_not_name : 37 43
explicit_constructor_invocation : 206
expression           : 21 23 24 183 231 232 233 234 235 244 251 260 261 261 263 275 276 282 283 330 331 332 337 548 549 621
expression_not_name  : 146
expression_opt       : 236 237 281
expression_statement : 193
field_access         : 142
field_declaration    : 475 528
finally              : 285 297
for_init             : 238
for_init_opt         : 236 237
for_statement        : 190
for_statement_no_short_if : 258
for_update           : 246
for_update_opt       : 236 237
formal_parameter     : 490 491
formal_parameter_list : 488 491
formal_parameter_list_opt : 485 504 568
generic_type         : 381 384 389 390
goal                 : 0
if_then_else_statement : 188
if_then_else_statement_no_short_if : 256
if_then_statement    : 187
import_declaration   : 608 609
import_declarations  : 598 599 601 603 609
inclusive_or_expression : 30 31 33 34 36
inclusive_or_expression_not_name : 32 38
instanceof_expression : 50 51 52 54 55 56 57 59
instanceof_expression_not_name : 53 62
interface_body       : 508
interface_declaration : 172 448 478 524
interface_header     : 508
interface_header_extends : 513
interface_header_extends_opt : 509
interface_header_name : 509
interface_header_name1 : 510 511
interface_member_declaration : 519 520
interface_member_declarations : 517 520
interface_member_declarations_opt : 516
interface_type       : 463 464
interface_type_list  : 462 464 515
label                : 228 229
labeled_statement    : 186
labeled_statement_no_short_if : 255
literal              : 139
local_variable_declaration : 175 241
local_variable_declaration_statement : 169
marker_annotation    : 585
member_value         : 573 582 583 593 596
member_value_array_initializer : 577
member_value_pair    : 591 592
member_value_pairs   : 589 592
member_value_pairs_opt : 587
member_values        : 578 579 583
method_body          : 484 502
method_declaration   : 477
method_header        : 502 503
method_header_extended_dims : 504 568
method_header_name   : 504
method_header_throws_clause : 494
method_header_throws_clause_opt : 485 504
method_invocation    : 143 212
modifier             : 353 354
modifiers            : 177 253 305 351 354 555 556 606
modifiers_opt        : 292 456 482 486 487 492 493 505 506 512 531 532 542 569 570
multiplicative_expression : 88 89 90 92 93 94 95 97 98 99
multiplicative_expression_not_name : 91 101 103 105
name                 : 24 29 34 39 44 49 55 57 61 70 72 74 76 83 85 87 93 95 102 104 106 128 145 147 148 149 150 160 161 162 163 222 225 312 314 316 318 325 330 344 383 384 388 390 575 588 606 607 614 615 616 617
normal_annotation    : 584
one_dim_loop         : 156 157
package_declaration  : 597 598 599 600
package_declaration_name : 605
post_decrement_expression : 130 133 211
post_increment_expression : 129 132 210
postfix_expression   : 7 119 134 135
postfix_expression_not_name : 123
pre_decrement_expression : 108 113 209
pre_increment_expression : 107 112 208
primary              : 127 131 223 226 311 313 315 317 321 322 328
primary_no_new_array : 136 331
primitive_type       : 151 152 159 333 339 367 387
qualified_name       : 342
reference_type       : 59 61 62 368 396 400 406 412 415 416 434 435 438 443
reference_type1      : 398 419 420 442 446
reference_type2      : 404 423 424
reference_type3      : 410 427 428
relational_expression : 58 64 65 66 67
relational_expression_not_name : 60
resource             : 301 302
resource_specification : 296 297
resources            : 298 302
return_statement     : 200
semi_opt             : 298
shift_expression     : 63 64 65 66 67 69 70 71 72 73 74 75 76 78 79 80
shift_expression_not_name : 68 69 71 73 75 82 84 86
simple_name          : 341 344 593
single_member_annotation : 586
single_member_annotation_member_value : 595
single_static_import_declaration : 612
single_type_import_declaration : 610
statement            : 170 228 231 232 234 236 249 276
statement_expression : 205 242 243
statement_expression_list : 240 243 248
statement_no_short_if : 229 232 233 233 235 237 250
statement_without_trailing_substatement : 185 254
static_import_on_demand_declaration : 613
static_initializer   : 472
switch_block         : 263
switch_block_statement : 268 269
switch_block_statements : 265 267 269
switch_label         : 271 272
switch_labels        : 266 267 270 272
switch_statement     : 196
synchronized_statement : 201
throw_statement      : 202
trailing_semicolon   : 302
try_block            : 284 285 296 297
try_statement        : 203
try_statement_with_resources : 204
type                 : 176 177 252 253 294 295 304 305 482 492 493 505 506 569 570
type_argument        : 394 395
type_argument1       : 392 393
type_argument2       : 402 403
type_argument3       : 408 409
type_argument_list   : 393 395 403 409
type_argument_list1  : 391
type_argument_list2  : 401
type_argument_list3  : 407
type_arguments       : 160 161 222 223 224 309 310 315 316 317 318 319 321 324 385
type_declaration     : 567 618 619
type_declarations    : 599 600 602 603 619
type_import_on_demand_declaration : 611
type_parameter       : 431 432
type_parameter1      : 439 440
type_parameter_header : 433 434 435 441 442 443
type_parameter_list  : 432 440
type_parameter_list1 : 430
type_parameters      : 454 486 505 510 532 556 557 569
unary_expression     : 96 97 98 99 101 102 103 104 105 106 109 110 114 115 117 118 120 121 124 125 159
unary_expression_not_name : 100
unary_expression_not_plus_minus : 111 160 161 162 163
unary_expression_not_plus_minus_not_name : 116
union_type           : 293 295
variable_declarator  : 178 179
variable_declarator_id : 180 181 292 304 305 492 493
variable_declarators : 176 177 179 482
variable_initializer : 181 219 220 304 305
variable_initializers : 217 218 220
while_statement      : 189
while_statement_no_short_if : 257
wildcard             : 397
wildcard1            : 399
wildcard2            : 405
wildcard3            : 411
wildcard_bounds      : 414
wildcard_bounds1     : 418
wildcard_bounds2     : 422
wildcard_bounds3     : 426

Parsing method: LALR

state 0

    (0) S' -> . goal
    (620) goal -> . PLUSPLUS compilation_unit
    (621) goal -> . MINUSMINUS expression
    (622) goal -> . * block_statement

    PLUSPLUS        shift and go to state 2
    MINUSMINUS      shift and go to state 4
    *               shift and go to state 3

    goal                           shift and go to state 1

state 1

    (0) S' -> goal .



state 2

    (620) goal -> PLUSPLUS . compilation_unit
    (597) compilation_unit -> . package_declaration
    (598) compilation_unit -> . package_declaration import_declarations
    (599) compilation_unit -> . package_declaration import_declarations type_declarations
    (600) compilation_unit -> . package_declaration type_declarations
    (601) compilation_unit -> . import_declarations
    (602) compilation_unit -> . type_declarations
    (603) compilation_unit -> . import_declarations type_declarations
    (604) compilation_unit -> . empty
    (605) package_declaration -> . package_declaration_name ;
    (608) import_declarations -> . import_declaration
    (609) import_declarations -> . import_declarations import_declaration
    (618) type_declarations -> . type_declaration
    (619) type_declarations -> . type_declarations type_declaration
    (623) empty -> .
    (606) package_declaration_name -> . modifiers PACKAGE name
    (607) package_declaration_name -> . PACKAGE name
    (610) import_declaration -> . single_type_import_declaration
    (611) import_declaration -> . type_import_on_demand_declaration
    (612) import_declaration -> . single_static_import_declaration
    (613) import_declaration -> . static_import_on_demand_declaration
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (614) single_type_import_declaration -> . IMPORT name ;
    (615) type_import_on_demand_declaration -> . IMPORT name . * ;
    (616) single_static_import_declaration -> . IMPORT STATIC name ;
    (617) static_import_on_demand_declaration -> . IMPORT STATIC name . * ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (588) annotation_name -> . @ name

    $end            reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    PACKAGE         shift and go to state 32
    ;               shift and go to state 28
    IMPORT          shift and go to state 27
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 30

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 11
    marker_annotation              shift and go to state 22
    interface_header_name          shift and go to state 14
    static_import_on_demand_declaration shift and go to state 15
    annotation_type_declaration_header shift and go to state 16
    normal_annotation              shift and go to state 50
    single_member_annotation       shift and go to state 18
    modifiers_opt                  shift and go to state 26
    type_declarations              shift and go to state 20
    package_declaration            shift and go to state 23
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    single_static_import_declaration shift and go to state 37
    import_declarations            shift and go to state 29
    annotation_type_declaration_header_name shift and go to state 31
    compilation_unit               shift and go to state 33
    import_declaration             shift and go to state 34
    single_type_import_declaration shift and go to state 35
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    type_import_on_demand_declaration shift and go to state 39
    modifiers                      shift and go to state 40
    package_declaration_name       shift and go to state 41
    interface_header_name1         shift and go to state 42
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 46
    empty                          shift and go to state 49
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 3

    (622) goal -> * . block_statement
    (169) block_statement -> . local_variable_declaration_statement
    (170) block_statement -> . statement
    (171) block_statement -> . class_declaration
    (172) block_statement -> . interface_declaration
    (173) block_statement -> . annotation_type_declaration
    (174) block_statement -> . enum_declaration
    (175) local_variable_declaration_statement -> . local_variable_declaration ;
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (529) enum_declaration -> . enum_header enum_body
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (623) empty -> .
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 84
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    @               shift and go to state 30
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    expression_statement           shift and go to state 54
    enum_header                    shift and go to state 7
    explicit_constructor_invocation shift and go to state 55
    throw_statement                shift and go to state 57
    generic_type                   shift and go to state 58
    post_decrement_expression      shift and go to state 60
    assert_statement               shift and go to state 61
    statement_expression           shift and go to state 66
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    local_variable_declaration_statement shift and go to state 70
    try_statement                  shift and go to state 71
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 73
    labeled_statement              shift and go to state 77
    post_increment_expression      shift and go to state 78
    enum_header_name               shift and go to state 43
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    interface_declaration          shift and go to state 83
    type_arguments                 shift and go to state 85
    break_statement                shift and go to state 86
    class_or_interface_type        shift and go to state 88
    switch_statement               shift and go to state 89
    array_access                   shift and go to state 90
    single_member_annotation       shift and go to state 18
    reference_type                 shift and go to state 91
    label                          shift and go to state 92
    continue_statement             shift and go to state 93
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    statement_without_trailing_substatement shift and go to state 99
    array_creation_with_array_initializer shift and go to state 101
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation_name                shift and go to state 38
    interface_header_name          shift and go to state 14
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_header_init shift and go to state 105
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108
    modifiers_opt                  shift and go to state 26
    primary                        shift and go to state 109
    marker_annotation              shift and go to state 22
    block_statement                shift and go to state 112
    if_then_statement              shift and go to state 113
    array_creation_without_array_initializer shift and go to state 95
    while_statement                shift and go to state 65
    synchronized_statement         shift and go to state 115
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    statement                      shift and go to state 119
    method_invocation              shift and go to state 120
    empty                          shift and go to state 121
    annotation_type_declaration_header_name shift and go to state 31
    class_instance_creation_expression_name shift and go to state 122
    class_header                   shift and go to state 36
    modifiers                      shift and go to state 125
    type                           shift and go to state 128
    enum_declaration               shift and go to state 129
    empty_statement                shift and go to state 130
    local_variable_declaration     shift and go to state 134
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 135
    enhanced_for_statement         shift and go to state 138
    class_header_name1             shift and go to state 8
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    qualified_name                 shift and go to state 141
    class_header_name              shift and go to state 5
    postfix_expression             shift and go to state 59
    return_statement               shift and go to state 142
    do_statement                   shift and go to state 143
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    annotation                     shift and go to state 10
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 151

state 4

    (621) goal -> MINUSMINUS . expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 169
    conditional_and_expression     shift and go to state 161

state 5

    (453) class_header -> class_header_name . class_header_extends_opt class_header_implements_opt
    (457) class_header_extends_opt -> . class_header_extends
    (458) class_header_extends_opt -> . empty
    (459) class_header_extends -> . EXTENDS class_type
    (623) empty -> .

    EXTENDS         shift and go to state 192
    IMPLEMENTS      reduce using rule 623 (empty -> .)
    {               reduce using rule 623 (empty -> .)

    class_header_extends           shift and go to state 190
    class_header_extends_opt       shift and go to state 191
    empty                          shift and go to state 193

state 6

    (448) type_declaration -> interface_declaration .

    ;               reduce using rule 448 (type_declaration -> interface_declaration .)
    @               reduce using rule 448 (type_declaration -> interface_declaration .)
    PUBLIC          reduce using rule 448 (type_declaration -> interface_declaration .)
    PROTECTED       reduce using rule 448 (type_declaration -> interface_declaration .)
    PRIVATE         reduce using rule 448 (type_declaration -> interface_declaration .)
    STATIC          reduce using rule 448 (type_declaration -> interface_declaration .)
    ABSTRACT        reduce using rule 448 (type_declaration -> interface_declaration .)
    FINAL           reduce using rule 448 (type_declaration -> interface_declaration .)
    NATIVE          reduce using rule 448 (type_declaration -> interface_declaration .)
    SYNCHRONIZED    reduce using rule 448 (type_declaration -> interface_declaration .)
    TRANSIENT       reduce using rule 448 (type_declaration -> interface_declaration .)
    VOLATILE        reduce using rule 448 (type_declaration -> interface_declaration .)
    STRICTFP        reduce using rule 448 (type_declaration -> interface_declaration .)
    ENUM            reduce using rule 448 (type_declaration -> interface_declaration .)
    CLASS           reduce using rule 448 (type_declaration -> interface_declaration .)
    INTERFACE       reduce using rule 448 (type_declaration -> interface_declaration .)
    $end            reduce using rule 448 (type_declaration -> interface_declaration .)
    NAME            reduce using rule 448 (type_declaration -> interface_declaration .)
    <               reduce using rule 448 (type_declaration -> interface_declaration .)
    BOOLEAN         reduce using rule 448 (type_declaration -> interface_declaration .)
    VOID            reduce using rule 448 (type_declaration -> interface_declaration .)
    BYTE            reduce using rule 448 (type_declaration -> interface_declaration .)
    SHORT           reduce using rule 448 (type_declaration -> interface_declaration .)
    INT             reduce using rule 448 (type_declaration -> interface_declaration .)
    LONG            reduce using rule 448 (type_declaration -> interface_declaration .)
    CHAR            reduce using rule 448 (type_declaration -> interface_declaration .)
    FLOAT           reduce using rule 448 (type_declaration -> interface_declaration .)
    DOUBLE          reduce using rule 448 (type_declaration -> interface_declaration .)
    }               reduce using rule 448 (type_declaration -> interface_declaration .)


state 7

    (529) enum_declaration -> enum_header . enum_body
    (533) enum_body -> . { enum_body_declarations_opt }
    (534) enum_body -> . { , enum_body_declarations_opt }
    (535) enum_body -> . { enum_constants , enum_body_declarations_opt }
    (536) enum_body -> . { enum_constants enum_body_declarations_opt }

    {               shift and go to state 195

    enum_body                      shift and go to state 194

state 8

    (454) class_header_name -> class_header_name1 . type_parameters
    (455) class_header_name -> class_header_name1 .
    (430) type_parameters -> . < type_parameter_list1

    EXTENDS         reduce using rule 455 (class_header_name -> class_header_name1 .)
    IMPLEMENTS      reduce using rule 455 (class_header_name -> class_header_name1 .)
    {               reduce using rule 455 (class_header_name -> class_header_name1 .)
    <               shift and go to state 197

    type_parameters                shift and go to state 196

state 9

    (359) modifier -> ABSTRACT .

    @               reduce using rule 359 (modifier -> ABSTRACT .)
    PUBLIC          reduce using rule 359 (modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 359 (modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 359 (modifier -> ABSTRACT .)
    STATIC          reduce using rule 359 (modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 359 (modifier -> ABSTRACT .)
    FINAL           reduce using rule 359 (modifier -> ABSTRACT .)
    NATIVE          reduce using rule 359 (modifier -> ABSTRACT .)
    SYNCHRONIZED    reduce using rule 359 (modifier -> ABSTRACT .)
    TRANSIENT       reduce using rule 359 (modifier -> ABSTRACT .)
    VOLATILE        reduce using rule 359 (modifier -> ABSTRACT .)
    STRICTFP        reduce using rule 359 (modifier -> ABSTRACT .)
    ENUM            reduce using rule 359 (modifier -> ABSTRACT .)
    CLASS           reduce using rule 359 (modifier -> ABSTRACT .)
    INTERFACE       reduce using rule 359 (modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 359 (modifier -> ABSTRACT .)
    VOID            reduce using rule 359 (modifier -> ABSTRACT .)
    BYTE            reduce using rule 359 (modifier -> ABSTRACT .)
    SHORT           reduce using rule 359 (modifier -> ABSTRACT .)
    INT             reduce using rule 359 (modifier -> ABSTRACT .)
    LONG            reduce using rule 359 (modifier -> ABSTRACT .)
    CHAR            reduce using rule 359 (modifier -> ABSTRACT .)
    FLOAT           reduce using rule 359 (modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 359 (modifier -> ABSTRACT .)
    NAME            reduce using rule 359 (modifier -> ABSTRACT .)
    <               reduce using rule 359 (modifier -> ABSTRACT .)
    PACKAGE         reduce using rule 359 (modifier -> ABSTRACT .)


state 10

    (366) modifier -> annotation .

    @               reduce using rule 366 (modifier -> annotation .)
    PUBLIC          reduce using rule 366 (modifier -> annotation .)
    PROTECTED       reduce using rule 366 (modifier -> annotation .)
    PRIVATE         reduce using rule 366 (modifier -> annotation .)
    STATIC          reduce using rule 366 (modifier -> annotation .)
    ABSTRACT        reduce using rule 366 (modifier -> annotation .)
    FINAL           reduce using rule 366 (modifier -> annotation .)
    NATIVE          reduce using rule 366 (modifier -> annotation .)
    SYNCHRONIZED    reduce using rule 366 (modifier -> annotation .)
    TRANSIENT       reduce using rule 366 (modifier -> annotation .)
    VOLATILE        reduce using rule 366 (modifier -> annotation .)
    STRICTFP        reduce using rule 366 (modifier -> annotation .)
    ENUM            reduce using rule 366 (modifier -> annotation .)
    CLASS           reduce using rule 366 (modifier -> annotation .)
    INTERFACE       reduce using rule 366 (modifier -> annotation .)
    BOOLEAN         reduce using rule 366 (modifier -> annotation .)
    VOID            reduce using rule 366 (modifier -> annotation .)
    BYTE            reduce using rule 366 (modifier -> annotation .)
    SHORT           reduce using rule 366 (modifier -> annotation .)
    INT             reduce using rule 366 (modifier -> annotation .)
    LONG            reduce using rule 366 (modifier -> annotation .)
    CHAR            reduce using rule 366 (modifier -> annotation .)
    FLOAT           reduce using rule 366 (modifier -> annotation .)
    DOUBLE          reduce using rule 366 (modifier -> annotation .)
    NAME            reduce using rule 366 (modifier -> annotation .)
    <               reduce using rule 366 (modifier -> annotation .)
    PACKAGE         reduce using rule 366 (modifier -> annotation .)


state 11

    (618) type_declarations -> type_declaration .

    ;               reduce using rule 618 (type_declarations -> type_declaration .)
    @               reduce using rule 618 (type_declarations -> type_declaration .)
    PUBLIC          reduce using rule 618 (type_declarations -> type_declaration .)
    PROTECTED       reduce using rule 618 (type_declarations -> type_declaration .)
    PRIVATE         reduce using rule 618 (type_declarations -> type_declaration .)
    STATIC          reduce using rule 618 (type_declarations -> type_declaration .)
    ABSTRACT        reduce using rule 618 (type_declarations -> type_declaration .)
    FINAL           reduce using rule 618 (type_declarations -> type_declaration .)
    NATIVE          reduce using rule 618 (type_declarations -> type_declaration .)
    SYNCHRONIZED    reduce using rule 618 (type_declarations -> type_declaration .)
    TRANSIENT       reduce using rule 618 (type_declarations -> type_declaration .)
    VOLATILE        reduce using rule 618 (type_declarations -> type_declaration .)
    STRICTFP        reduce using rule 618 (type_declarations -> type_declaration .)
    ENUM            reduce using rule 618 (type_declarations -> type_declaration .)
    CLASS           reduce using rule 618 (type_declarations -> type_declaration .)
    INTERFACE       reduce using rule 618 (type_declarations -> type_declaration .)
    $end            reduce using rule 618 (type_declarations -> type_declaration .)


state 12

    (356) modifier -> PROTECTED .

    @               reduce using rule 356 (modifier -> PROTECTED .)
    PUBLIC          reduce using rule 356 (modifier -> PROTECTED .)
    PROTECTED       reduce using rule 356 (modifier -> PROTECTED .)
    PRIVATE         reduce using rule 356 (modifier -> PROTECTED .)
    STATIC          reduce using rule 356 (modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 356 (modifier -> PROTECTED .)
    FINAL           reduce using rule 356 (modifier -> PROTECTED .)
    NATIVE          reduce using rule 356 (modifier -> PROTECTED .)
    SYNCHRONIZED    reduce using rule 356 (modifier -> PROTECTED .)
    TRANSIENT       reduce using rule 356 (modifier -> PROTECTED .)
    VOLATILE        reduce using rule 356 (modifier -> PROTECTED .)
    STRICTFP        reduce using rule 356 (modifier -> PROTECTED .)
    ENUM            reduce using rule 356 (modifier -> PROTECTED .)
    CLASS           reduce using rule 356 (modifier -> PROTECTED .)
    INTERFACE       reduce using rule 356 (modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 356 (modifier -> PROTECTED .)
    VOID            reduce using rule 356 (modifier -> PROTECTED .)
    BYTE            reduce using rule 356 (modifier -> PROTECTED .)
    SHORT           reduce using rule 356 (modifier -> PROTECTED .)
    INT             reduce using rule 356 (modifier -> PROTECTED .)
    LONG            reduce using rule 356 (modifier -> PROTECTED .)
    CHAR            reduce using rule 356 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 356 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 356 (modifier -> PROTECTED .)
    NAME            reduce using rule 356 (modifier -> PROTECTED .)
    <               reduce using rule 356 (modifier -> PROTECTED .)
    PACKAGE         reduce using rule 356 (modifier -> PROTECTED .)


state 13

    (358) modifier -> STATIC .

    @               reduce using rule 358 (modifier -> STATIC .)
    PUBLIC          reduce using rule 358 (modifier -> STATIC .)
    PROTECTED       reduce using rule 358 (modifier -> STATIC .)
    PRIVATE         reduce using rule 358 (modifier -> STATIC .)
    STATIC          reduce using rule 358 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 358 (modifier -> STATIC .)
    FINAL           reduce using rule 358 (modifier -> STATIC .)
    NATIVE          reduce using rule 358 (modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 358 (modifier -> STATIC .)
    TRANSIENT       reduce using rule 358 (modifier -> STATIC .)
    VOLATILE        reduce using rule 358 (modifier -> STATIC .)
    STRICTFP        reduce using rule 358 (modifier -> STATIC .)
    ENUM            reduce using rule 358 (modifier -> STATIC .)
    CLASS           reduce using rule 358 (modifier -> STATIC .)
    INTERFACE       reduce using rule 358 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 358 (modifier -> STATIC .)
    VOID            reduce using rule 358 (modifier -> STATIC .)
    BYTE            reduce using rule 358 (modifier -> STATIC .)
    SHORT           reduce using rule 358 (modifier -> STATIC .)
    INT             reduce using rule 358 (modifier -> STATIC .)
    LONG            reduce using rule 358 (modifier -> STATIC .)
    CHAR            reduce using rule 358 (modifier -> STATIC .)
    FLOAT           reduce using rule 358 (modifier -> STATIC .)
    DOUBLE          reduce using rule 358 (modifier -> STATIC .)
    NAME            reduce using rule 358 (modifier -> STATIC .)
    <               reduce using rule 358 (modifier -> STATIC .)
    PACKAGE         reduce using rule 358 (modifier -> STATIC .)


state 14

    (509) interface_header -> interface_header_name . interface_header_extends_opt
    (513) interface_header_extends_opt -> . interface_header_extends
    (514) interface_header_extends_opt -> . empty
    (515) interface_header_extends -> . EXTENDS interface_type_list
    (623) empty -> .

    EXTENDS         shift and go to state 199
    {               reduce using rule 623 (empty -> .)

    empty                          shift and go to state 200
    interface_header_extends       shift and go to state 198
    interface_header_extends_opt   shift and go to state 201

state 15

    (613) import_declaration -> static_import_on_demand_declaration .

    ;               reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    IMPORT          reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    @               reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    PUBLIC          reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    PROTECTED       reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    PRIVATE         reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    STATIC          reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    ABSTRACT        reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    FINAL           reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    NATIVE          reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    SYNCHRONIZED    reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    TRANSIENT       reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    VOLATILE        reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    STRICTFP        reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    ENUM            reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    CLASS           reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    INTERFACE       reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)
    $end            reduce using rule 613 (import_declaration -> static_import_on_demand_declaration .)


state 16

    (553) annotation_type_declaration -> annotation_type_declaration_header . annotation_type_body
    (559) annotation_type_body -> . { annotation_type_member_declarations_opt }

    {               shift and go to state 202

    annotation_type_body           shift and go to state 203

state 17

    (360) modifier -> FINAL .

    @               reduce using rule 360 (modifier -> FINAL .)
    PUBLIC          reduce using rule 360 (modifier -> FINAL .)
    PROTECTED       reduce using rule 360 (modifier -> FINAL .)
    PRIVATE         reduce using rule 360 (modifier -> FINAL .)
    STATIC          reduce using rule 360 (modifier -> FINAL .)
    ABSTRACT        reduce using rule 360 (modifier -> FINAL .)
    FINAL           reduce using rule 360 (modifier -> FINAL .)
    NATIVE          reduce using rule 360 (modifier -> FINAL .)
    SYNCHRONIZED    reduce using rule 360 (modifier -> FINAL .)
    TRANSIENT       reduce using rule 360 (modifier -> FINAL .)
    VOLATILE        reduce using rule 360 (modifier -> FINAL .)
    STRICTFP        reduce using rule 360 (modifier -> FINAL .)
    ENUM            reduce using rule 360 (modifier -> FINAL .)
    CLASS           reduce using rule 360 (modifier -> FINAL .)
    INTERFACE       reduce using rule 360 (modifier -> FINAL .)
    BOOLEAN         reduce using rule 360 (modifier -> FINAL .)
    VOID            reduce using rule 360 (modifier -> FINAL .)
    BYTE            reduce using rule 360 (modifier -> FINAL .)
    SHORT           reduce using rule 360 (modifier -> FINAL .)
    INT             reduce using rule 360 (modifier -> FINAL .)
    LONG            reduce using rule 360 (modifier -> FINAL .)
    CHAR            reduce using rule 360 (modifier -> FINAL .)
    FLOAT           reduce using rule 360 (modifier -> FINAL .)
    DOUBLE          reduce using rule 360 (modifier -> FINAL .)
    NAME            reduce using rule 360 (modifier -> FINAL .)
    <               reduce using rule 360 (modifier -> FINAL .)
    PACKAGE         reduce using rule 360 (modifier -> FINAL .)


state 18

    (586) annotation -> single_member_annotation .

    @               reduce using rule 586 (annotation -> single_member_annotation .)
    PUBLIC          reduce using rule 586 (annotation -> single_member_annotation .)
    PROTECTED       reduce using rule 586 (annotation -> single_member_annotation .)
    PRIVATE         reduce using rule 586 (annotation -> single_member_annotation .)
    STATIC          reduce using rule 586 (annotation -> single_member_annotation .)
    ABSTRACT        reduce using rule 586 (annotation -> single_member_annotation .)
    FINAL           reduce using rule 586 (annotation -> single_member_annotation .)
    NATIVE          reduce using rule 586 (annotation -> single_member_annotation .)
    SYNCHRONIZED    reduce using rule 586 (annotation -> single_member_annotation .)
    TRANSIENT       reduce using rule 586 (annotation -> single_member_annotation .)
    VOLATILE        reduce using rule 586 (annotation -> single_member_annotation .)
    STRICTFP        reduce using rule 586 (annotation -> single_member_annotation .)
    ENUM            reduce using rule 586 (annotation -> single_member_annotation .)
    CLASS           reduce using rule 586 (annotation -> single_member_annotation .)
    INTERFACE       reduce using rule 586 (annotation -> single_member_annotation .)
    BOOLEAN         reduce using rule 586 (annotation -> single_member_annotation .)
    VOID            reduce using rule 586 (annotation -> single_member_annotation .)
    BYTE            reduce using rule 586 (annotation -> single_member_annotation .)
    SHORT           reduce using rule 586 (annotation -> single_member_annotation .)
    INT             reduce using rule 586 (annotation -> single_member_annotation .)
    LONG            reduce using rule 586 (annotation -> single_member_annotation .)
    CHAR            reduce using rule 586 (annotation -> single_member_annotation .)
    FLOAT           reduce using rule 586 (annotation -> single_member_annotation .)
    DOUBLE          reduce using rule 586 (annotation -> single_member_annotation .)
    NAME            reduce using rule 586 (annotation -> single_member_annotation .)
    ,               reduce using rule 586 (annotation -> single_member_annotation .)
    }               reduce using rule 586 (annotation -> single_member_annotation .)
    <               reduce using rule 586 (annotation -> single_member_annotation .)
    PACKAGE         reduce using rule 586 (annotation -> single_member_annotation .)
    )               reduce using rule 586 (annotation -> single_member_annotation .)
    ;               reduce using rule 586 (annotation -> single_member_annotation .)


state 19

    (361) modifier -> NATIVE .

    @               reduce using rule 361 (modifier -> NATIVE .)
    PUBLIC          reduce using rule 361 (modifier -> NATIVE .)
    PROTECTED       reduce using rule 361 (modifier -> NATIVE .)
    PRIVATE         reduce using rule 361 (modifier -> NATIVE .)
    STATIC          reduce using rule 361 (modifier -> NATIVE .)
    ABSTRACT        reduce using rule 361 (modifier -> NATIVE .)
    FINAL           reduce using rule 361 (modifier -> NATIVE .)
    NATIVE          reduce using rule 361 (modifier -> NATIVE .)
    SYNCHRONIZED    reduce using rule 361 (modifier -> NATIVE .)
    TRANSIENT       reduce using rule 361 (modifier -> NATIVE .)
    VOLATILE        reduce using rule 361 (modifier -> NATIVE .)
    STRICTFP        reduce using rule 361 (modifier -> NATIVE .)
    ENUM            reduce using rule 361 (modifier -> NATIVE .)
    CLASS           reduce using rule 361 (modifier -> NATIVE .)
    INTERFACE       reduce using rule 361 (modifier -> NATIVE .)
    BOOLEAN         reduce using rule 361 (modifier -> NATIVE .)
    VOID            reduce using rule 361 (modifier -> NATIVE .)
    BYTE            reduce using rule 361 (modifier -> NATIVE .)
    SHORT           reduce using rule 361 (modifier -> NATIVE .)
    INT             reduce using rule 361 (modifier -> NATIVE .)
    LONG            reduce using rule 361 (modifier -> NATIVE .)
    CHAR            reduce using rule 361 (modifier -> NATIVE .)
    FLOAT           reduce using rule 361 (modifier -> NATIVE .)
    DOUBLE          reduce using rule 361 (modifier -> NATIVE .)
    NAME            reduce using rule 361 (modifier -> NATIVE .)
    <               reduce using rule 361 (modifier -> NATIVE .)
    PACKAGE         reduce using rule 361 (modifier -> NATIVE .)


state 20

    (602) compilation_unit -> type_declarations .
    (619) type_declarations -> type_declarations . type_declaration
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    $end            reduce using rule 602 (compilation_unit -> type_declarations .)
    ;               shift and go to state 28
    @               shift and go to state 30
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 204
    marker_annotation              shift and go to state 22
    interface_header_name          shift and go to state 14
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 26
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    empty                          shift and go to state 121
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 205
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 46
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 21

    (362) modifier -> SYNCHRONIZED .

    @               reduce using rule 362 (modifier -> SYNCHRONIZED .)
    PUBLIC          reduce using rule 362 (modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 362 (modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 362 (modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 362 (modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 362 (modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 362 (modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 362 (modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 362 (modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 362 (modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 362 (modifier -> SYNCHRONIZED .)
    STRICTFP        reduce using rule 362 (modifier -> SYNCHRONIZED .)
    ENUM            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    CLASS           reduce using rule 362 (modifier -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 362 (modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 362 (modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 362 (modifier -> SYNCHRONIZED .)
    INT             reduce using rule 362 (modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 362 (modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 362 (modifier -> SYNCHRONIZED .)
    NAME            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    <               reduce using rule 362 (modifier -> SYNCHRONIZED .)
    PACKAGE         reduce using rule 362 (modifier -> SYNCHRONIZED .)


state 22

    (585) annotation -> marker_annotation .

    @               reduce using rule 585 (annotation -> marker_annotation .)
    PUBLIC          reduce using rule 585 (annotation -> marker_annotation .)
    PROTECTED       reduce using rule 585 (annotation -> marker_annotation .)
    PRIVATE         reduce using rule 585 (annotation -> marker_annotation .)
    STATIC          reduce using rule 585 (annotation -> marker_annotation .)
    ABSTRACT        reduce using rule 585 (annotation -> marker_annotation .)
    FINAL           reduce using rule 585 (annotation -> marker_annotation .)
    NATIVE          reduce using rule 585 (annotation -> marker_annotation .)
    SYNCHRONIZED    reduce using rule 585 (annotation -> marker_annotation .)
    TRANSIENT       reduce using rule 585 (annotation -> marker_annotation .)
    VOLATILE        reduce using rule 585 (annotation -> marker_annotation .)
    STRICTFP        reduce using rule 585 (annotation -> marker_annotation .)
    ENUM            reduce using rule 585 (annotation -> marker_annotation .)
    CLASS           reduce using rule 585 (annotation -> marker_annotation .)
    INTERFACE       reduce using rule 585 (annotation -> marker_annotation .)
    BOOLEAN         reduce using rule 585 (annotation -> marker_annotation .)
    VOID            reduce using rule 585 (annotation -> marker_annotation .)
    BYTE            reduce using rule 585 (annotation -> marker_annotation .)
    SHORT           reduce using rule 585 (annotation -> marker_annotation .)
    INT             reduce using rule 585 (annotation -> marker_annotation .)
    LONG            reduce using rule 585 (annotation -> marker_annotation .)
    CHAR            reduce using rule 585 (annotation -> marker_annotation .)
    FLOAT           reduce using rule 585 (annotation -> marker_annotation .)
    DOUBLE          reduce using rule 585 (annotation -> marker_annotation .)
    NAME            reduce using rule 585 (annotation -> marker_annotation .)
    ,               reduce using rule 585 (annotation -> marker_annotation .)
    }               reduce using rule 585 (annotation -> marker_annotation .)
    <               reduce using rule 585 (annotation -> marker_annotation .)
    PACKAGE         reduce using rule 585 (annotation -> marker_annotation .)
    )               reduce using rule 585 (annotation -> marker_annotation .)
    ;               reduce using rule 585 (annotation -> marker_annotation .)


state 23

    (597) compilation_unit -> package_declaration .
    (598) compilation_unit -> package_declaration . import_declarations
    (599) compilation_unit -> package_declaration . import_declarations type_declarations
    (600) compilation_unit -> package_declaration . type_declarations
    (608) import_declarations -> . import_declaration
    (609) import_declarations -> . import_declarations import_declaration
    (618) type_declarations -> . type_declaration
    (619) type_declarations -> . type_declarations type_declaration
    (610) import_declaration -> . single_type_import_declaration
    (611) import_declaration -> . type_import_on_demand_declaration
    (612) import_declaration -> . single_static_import_declaration
    (613) import_declaration -> . static_import_on_demand_declaration
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (614) single_type_import_declaration -> . IMPORT name ;
    (615) type_import_on_demand_declaration -> . IMPORT name . * ;
    (616) single_static_import_declaration -> . IMPORT STATIC name ;
    (617) static_import_on_demand_declaration -> . IMPORT STATIC name . * ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    $end            reduce using rule 597 (compilation_unit -> package_declaration .)
    ;               shift and go to state 28
    IMPORT          shift and go to state 27
    @               shift and go to state 30
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 11
    marker_annotation              shift and go to state 22
    interface_header_name          shift and go to state 14
    static_import_on_demand_declaration shift and go to state 15
    annotation_type_declaration_header shift and go to state 16
    normal_annotation              shift and go to state 50
    modifiers_opt                  shift and go to state 26
    type_declarations              shift and go to state 206
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    single_static_import_declaration shift and go to state 37
    import_declarations            shift and go to state 207
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    import_declaration             shift and go to state 34
    single_type_import_declaration shift and go to state 35
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    type_import_on_demand_declaration shift and go to state 39
    modifiers                      shift and go to state 205
    interface_header_name1         shift and go to state 42
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 46
    empty                          shift and go to state 121
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 24

    (357) modifier -> PRIVATE .

    @               reduce using rule 357 (modifier -> PRIVATE .)
    PUBLIC          reduce using rule 357 (modifier -> PRIVATE .)
    PROTECTED       reduce using rule 357 (modifier -> PRIVATE .)
    PRIVATE         reduce using rule 357 (modifier -> PRIVATE .)
    STATIC          reduce using rule 357 (modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 357 (modifier -> PRIVATE .)
    FINAL           reduce using rule 357 (modifier -> PRIVATE .)
    NATIVE          reduce using rule 357 (modifier -> PRIVATE .)
    SYNCHRONIZED    reduce using rule 357 (modifier -> PRIVATE .)
    TRANSIENT       reduce using rule 357 (modifier -> PRIVATE .)
    VOLATILE        reduce using rule 357 (modifier -> PRIVATE .)
    STRICTFP        reduce using rule 357 (modifier -> PRIVATE .)
    ENUM            reduce using rule 357 (modifier -> PRIVATE .)
    CLASS           reduce using rule 357 (modifier -> PRIVATE .)
    INTERFACE       reduce using rule 357 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 357 (modifier -> PRIVATE .)
    VOID            reduce using rule 357 (modifier -> PRIVATE .)
    BYTE            reduce using rule 357 (modifier -> PRIVATE .)
    SHORT           reduce using rule 357 (modifier -> PRIVATE .)
    INT             reduce using rule 357 (modifier -> PRIVATE .)
    LONG            reduce using rule 357 (modifier -> PRIVATE .)
    CHAR            reduce using rule 357 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 357 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 357 (modifier -> PRIVATE .)
    NAME            reduce using rule 357 (modifier -> PRIVATE .)
    <               reduce using rule 357 (modifier -> PRIVATE .)
    PACKAGE         reduce using rule 357 (modifier -> PRIVATE .)


state 25

    (365) modifier -> STRICTFP .

    @               reduce using rule 365 (modifier -> STRICTFP .)
    PUBLIC          reduce using rule 365 (modifier -> STRICTFP .)
    PROTECTED       reduce using rule 365 (modifier -> STRICTFP .)
    PRIVATE         reduce using rule 365 (modifier -> STRICTFP .)
    STATIC          reduce using rule 365 (modifier -> STRICTFP .)
    ABSTRACT        reduce using rule 365 (modifier -> STRICTFP .)
    FINAL           reduce using rule 365 (modifier -> STRICTFP .)
    NATIVE          reduce using rule 365 (modifier -> STRICTFP .)
    SYNCHRONIZED    reduce using rule 365 (modifier -> STRICTFP .)
    TRANSIENT       reduce using rule 365 (modifier -> STRICTFP .)
    VOLATILE        reduce using rule 365 (modifier -> STRICTFP .)
    STRICTFP        reduce using rule 365 (modifier -> STRICTFP .)
    ENUM            reduce using rule 365 (modifier -> STRICTFP .)
    CLASS           reduce using rule 365 (modifier -> STRICTFP .)
    INTERFACE       reduce using rule 365 (modifier -> STRICTFP .)
    BOOLEAN         reduce using rule 365 (modifier -> STRICTFP .)
    VOID            reduce using rule 365 (modifier -> STRICTFP .)
    BYTE            reduce using rule 365 (modifier -> STRICTFP .)
    SHORT           reduce using rule 365 (modifier -> STRICTFP .)
    INT             reduce using rule 365 (modifier -> STRICTFP .)
    LONG            reduce using rule 365 (modifier -> STRICTFP .)
    CHAR            reduce using rule 365 (modifier -> STRICTFP .)
    FLOAT           reduce using rule 365 (modifier -> STRICTFP .)
    DOUBLE          reduce using rule 365 (modifier -> STRICTFP .)
    NAME            reduce using rule 365 (modifier -> STRICTFP .)
    <               reduce using rule 365 (modifier -> STRICTFP .)
    PACKAGE         reduce using rule 365 (modifier -> STRICTFP .)


state 26

    (531) enum_header_name -> modifiers_opt . ENUM NAME
    (532) enum_header_name -> modifiers_opt . ENUM NAME type_parameters
    (456) class_header_name1 -> modifiers_opt . CLASS NAME
    (512) interface_header_name1 -> modifiers_opt . INTERFACE NAME

    ENUM            shift and go to state 208
    CLASS           shift and go to state 210
    INTERFACE       shift and go to state 209


state 27

    (614) single_type_import_declaration -> IMPORT . name ;
    (615) type_import_on_demand_declaration -> IMPORT . name . * ;
    (616) single_static_import_declaration -> IMPORT . STATIC name ;
    (617) static_import_on_demand_declaration -> IMPORT . STATIC name . * ;
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    STATIC          shift and go to state 213
    NAME            shift and go to state 212

    name                           shift and go to state 211
    qualified_name                 shift and go to state 141
    simple_name                    shift and go to state 64

state 28

    (451) type_declaration -> ; .

    ;               reduce using rule 451 (type_declaration -> ; .)
    @               reduce using rule 451 (type_declaration -> ; .)
    PUBLIC          reduce using rule 451 (type_declaration -> ; .)
    PROTECTED       reduce using rule 451 (type_declaration -> ; .)
    PRIVATE         reduce using rule 451 (type_declaration -> ; .)
    STATIC          reduce using rule 451 (type_declaration -> ; .)
    ABSTRACT        reduce using rule 451 (type_declaration -> ; .)
    FINAL           reduce using rule 451 (type_declaration -> ; .)
    NATIVE          reduce using rule 451 (type_declaration -> ; .)
    SYNCHRONIZED    reduce using rule 451 (type_declaration -> ; .)
    TRANSIENT       reduce using rule 451 (type_declaration -> ; .)
    VOLATILE        reduce using rule 451 (type_declaration -> ; .)
    STRICTFP        reduce using rule 451 (type_declaration -> ; .)
    ENUM            reduce using rule 451 (type_declaration -> ; .)
    CLASS           reduce using rule 451 (type_declaration -> ; .)
    INTERFACE       reduce using rule 451 (type_declaration -> ; .)
    $end            reduce using rule 451 (type_declaration -> ; .)
    NAME            reduce using rule 451 (type_declaration -> ; .)
    <               reduce using rule 451 (type_declaration -> ; .)
    BOOLEAN         reduce using rule 451 (type_declaration -> ; .)
    VOID            reduce using rule 451 (type_declaration -> ; .)
    BYTE            reduce using rule 451 (type_declaration -> ; .)
    SHORT           reduce using rule 451 (type_declaration -> ; .)
    INT             reduce using rule 451 (type_declaration -> ; .)
    LONG            reduce using rule 451 (type_declaration -> ; .)
    CHAR            reduce using rule 451 (type_declaration -> ; .)
    FLOAT           reduce using rule 451 (type_declaration -> ; .)
    DOUBLE          reduce using rule 451 (type_declaration -> ; .)
    }               reduce using rule 451 (type_declaration -> ; .)


state 29

    (601) compilation_unit -> import_declarations .
    (603) compilation_unit -> import_declarations . type_declarations
    (609) import_declarations -> import_declarations . import_declaration
    (618) type_declarations -> . type_declaration
    (619) type_declarations -> . type_declarations type_declaration
    (610) import_declaration -> . single_type_import_declaration
    (611) import_declaration -> . type_import_on_demand_declaration
    (612) import_declaration -> . single_static_import_declaration
    (613) import_declaration -> . static_import_on_demand_declaration
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (614) single_type_import_declaration -> . IMPORT name ;
    (615) type_import_on_demand_declaration -> . IMPORT name . * ;
    (616) single_static_import_declaration -> . IMPORT STATIC name ;
    (617) static_import_on_demand_declaration -> . IMPORT STATIC name . * ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    $end            reduce using rule 601 (compilation_unit -> import_declarations .)
    ;               shift and go to state 28
    IMPORT          shift and go to state 27
    @               shift and go to state 30
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 11
    marker_annotation              shift and go to state 22
    interface_header_name          shift and go to state 14
    static_import_on_demand_declaration shift and go to state 15
    annotation_type_declaration_header shift and go to state 16
    normal_annotation              shift and go to state 50
    modifiers_opt                  shift and go to state 26
    type_declarations              shift and go to state 214
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    single_static_import_declaration shift and go to state 37
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    import_declaration             shift and go to state 215
    single_type_import_declaration shift and go to state 35
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    type_import_on_demand_declaration shift and go to state 39
    modifiers                      shift and go to state 205
    interface_header_name1         shift and go to state 42
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 46
    empty                          shift and go to state 121
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 30

    (557) annotation_type_declaration_header_name -> @ . INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> @ . INTERFACE NAME
    (588) annotation_name -> @ . name
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    INTERFACE       shift and go to state 217
    NAME            shift and go to state 212

    name                           shift and go to state 216
    qualified_name                 shift and go to state 141
    simple_name                    shift and go to state 64

state 31

    (554) annotation_type_declaration_header -> annotation_type_declaration_header_name . class_header_extends_opt class_header_implements_opt
    (457) class_header_extends_opt -> . class_header_extends
    (458) class_header_extends_opt -> . empty
    (459) class_header_extends -> . EXTENDS class_type
    (623) empty -> .

    EXTENDS         shift and go to state 192
    IMPLEMENTS      reduce using rule 623 (empty -> .)
    {               reduce using rule 623 (empty -> .)

    class_header_extends           shift and go to state 190
    class_header_extends_opt       shift and go to state 218
    empty                          shift and go to state 193

state 32

    (607) package_declaration_name -> PACKAGE . name
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    name                           shift and go to state 219
    qualified_name                 shift and go to state 141
    simple_name                    shift and go to state 64

state 33

    (620) goal -> PLUSPLUS compilation_unit .

    $end            reduce using rule 620 (goal -> PLUSPLUS compilation_unit .)


state 34

    (608) import_declarations -> import_declaration .

    ;               reduce using rule 608 (import_declarations -> import_declaration .)
    IMPORT          reduce using rule 608 (import_declarations -> import_declaration .)
    @               reduce using rule 608 (import_declarations -> import_declaration .)
    PUBLIC          reduce using rule 608 (import_declarations -> import_declaration .)
    PROTECTED       reduce using rule 608 (import_declarations -> import_declaration .)
    PRIVATE         reduce using rule 608 (import_declarations -> import_declaration .)
    STATIC          reduce using rule 608 (import_declarations -> import_declaration .)
    ABSTRACT        reduce using rule 608 (import_declarations -> import_declaration .)
    FINAL           reduce using rule 608 (import_declarations -> import_declaration .)
    NATIVE          reduce using rule 608 (import_declarations -> import_declaration .)
    SYNCHRONIZED    reduce using rule 608 (import_declarations -> import_declaration .)
    TRANSIENT       reduce using rule 608 (import_declarations -> import_declaration .)
    VOLATILE        reduce using rule 608 (import_declarations -> import_declaration .)
    STRICTFP        reduce using rule 608 (import_declarations -> import_declaration .)
    ENUM            reduce using rule 608 (import_declarations -> import_declaration .)
    CLASS           reduce using rule 608 (import_declarations -> import_declaration .)
    INTERFACE       reduce using rule 608 (import_declarations -> import_declaration .)
    $end            reduce using rule 608 (import_declarations -> import_declaration .)


state 35

    (610) import_declaration -> single_type_import_declaration .

    ;               reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    IMPORT          reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    @               reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    PUBLIC          reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    PROTECTED       reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    PRIVATE         reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    STATIC          reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    ABSTRACT        reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    FINAL           reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    NATIVE          reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    SYNCHRONIZED    reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    TRANSIENT       reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    VOLATILE        reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    STRICTFP        reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    ENUM            reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    CLASS           reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    INTERFACE       reduce using rule 610 (import_declaration -> single_type_import_declaration .)
    $end            reduce using rule 610 (import_declaration -> single_type_import_declaration .)


state 36

    (452) class_declaration -> class_header . class_body
    (466) class_body -> . { class_body_declarations_opt }

    {               shift and go to state 220

    class_body                     shift and go to state 221

state 37

    (612) import_declaration -> single_static_import_declaration .

    ;               reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    IMPORT          reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    @               reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    PUBLIC          reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    PROTECTED       reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    PRIVATE         reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    STATIC          reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    ABSTRACT        reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    FINAL           reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    NATIVE          reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    SYNCHRONIZED    reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    TRANSIENT       reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    VOLATILE        reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    STRICTFP        reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    ENUM            reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    CLASS           reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    INTERFACE       reduce using rule 612 (import_declaration -> single_static_import_declaration .)
    $end            reduce using rule 612 (import_declaration -> single_static_import_declaration .)


state 38

    (587) normal_annotation -> annotation_name . ( member_value_pairs_opt )
    (594) marker_annotation -> annotation_name .
    (595) single_member_annotation -> annotation_name . ( single_member_annotation_member_value )

    (               shift and go to state 222
    PUBLIC          reduce using rule 594 (marker_annotation -> annotation_name .)
    PROTECTED       reduce using rule 594 (marker_annotation -> annotation_name .)
    PRIVATE         reduce using rule 594 (marker_annotation -> annotation_name .)
    STATIC          reduce using rule 594 (marker_annotation -> annotation_name .)
    ABSTRACT        reduce using rule 594 (marker_annotation -> annotation_name .)
    FINAL           reduce using rule 594 (marker_annotation -> annotation_name .)
    NATIVE          reduce using rule 594 (marker_annotation -> annotation_name .)
    SYNCHRONIZED    reduce using rule 594 (marker_annotation -> annotation_name .)
    TRANSIENT       reduce using rule 594 (marker_annotation -> annotation_name .)
    VOLATILE        reduce using rule 594 (marker_annotation -> annotation_name .)
    STRICTFP        reduce using rule 594 (marker_annotation -> annotation_name .)
    BOOLEAN         reduce using rule 594 (marker_annotation -> annotation_name .)
    VOID            reduce using rule 594 (marker_annotation -> annotation_name .)
    BYTE            reduce using rule 594 (marker_annotation -> annotation_name .)
    SHORT           reduce using rule 594 (marker_annotation -> annotation_name .)
    INT             reduce using rule 594 (marker_annotation -> annotation_name .)
    LONG            reduce using rule 594 (marker_annotation -> annotation_name .)
    CHAR            reduce using rule 594 (marker_annotation -> annotation_name .)
    FLOAT           reduce using rule 594 (marker_annotation -> annotation_name .)
    DOUBLE          reduce using rule 594 (marker_annotation -> annotation_name .)
    @               reduce using rule 594 (marker_annotation -> annotation_name .)
    NAME            reduce using rule 594 (marker_annotation -> annotation_name .)
    ENUM            reduce using rule 594 (marker_annotation -> annotation_name .)
    CLASS           reduce using rule 594 (marker_annotation -> annotation_name .)
    INTERFACE       reduce using rule 594 (marker_annotation -> annotation_name .)
    <               reduce using rule 594 (marker_annotation -> annotation_name .)
    PACKAGE         reduce using rule 594 (marker_annotation -> annotation_name .)
    ,               reduce using rule 594 (marker_annotation -> annotation_name .)
    }               reduce using rule 594 (marker_annotation -> annotation_name .)
    )               reduce using rule 594 (marker_annotation -> annotation_name .)
    ;               reduce using rule 594 (marker_annotation -> annotation_name .)


state 39

    (611) import_declaration -> type_import_on_demand_declaration .

    ;               reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    IMPORT          reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    @               reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    PUBLIC          reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    PROTECTED       reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    PRIVATE         reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    STATIC          reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    ABSTRACT        reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    FINAL           reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    NATIVE          reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    SYNCHRONIZED    reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    TRANSIENT       reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    VOLATILE        reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    STRICTFP        reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    ENUM            reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    CLASS           reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    INTERFACE       reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)
    $end            reduce using rule 611 (import_declaration -> type_import_on_demand_declaration .)


state 40

    (606) package_declaration_name -> modifiers . PACKAGE name
    (354) modifiers -> modifiers . modifier
    (555) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME type_parameters
    (351) modifiers_opt -> modifiers .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    PACKAGE         shift and go to state 224
    @               shift and go to state 223
    ENUM            reduce using rule 351 (modifiers_opt -> modifiers .)
    CLASS           reduce using rule 351 (modifiers_opt -> modifiers .)
    INTERFACE       reduce using rule 351 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    annotation_name                shift and go to state 38
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 225
    annotation                     shift and go to state 10

state 41

    (605) package_declaration -> package_declaration_name . ;

    ;               shift and go to state 226


state 42

    (510) interface_header_name -> interface_header_name1 . type_parameters
    (511) interface_header_name -> interface_header_name1 .
    (430) type_parameters -> . < type_parameter_list1

    EXTENDS         reduce using rule 511 (interface_header_name -> interface_header_name1 .)
    {               reduce using rule 511 (interface_header_name -> interface_header_name1 .)
    <               shift and go to state 197

    type_parameters                shift and go to state 227

state 43

    (530) enum_header -> enum_header_name . class_header_implements_opt
    (460) class_header_implements_opt -> . class_header_implements
    (461) class_header_implements_opt -> . empty
    (462) class_header_implements -> . IMPLEMENTS interface_type_list
    (623) empty -> .

    IMPLEMENTS      shift and go to state 229
    {               reduce using rule 623 (empty -> .)

    class_header_implements_opt    shift and go to state 228
    class_header_implements        shift and go to state 230
    empty                          shift and go to state 231

state 44

    (449) type_declaration -> enum_declaration .

    ;               reduce using rule 449 (type_declaration -> enum_declaration .)
    @               reduce using rule 449 (type_declaration -> enum_declaration .)
    PUBLIC          reduce using rule 449 (type_declaration -> enum_declaration .)
    PROTECTED       reduce using rule 449 (type_declaration -> enum_declaration .)
    PRIVATE         reduce using rule 449 (type_declaration -> enum_declaration .)
    STATIC          reduce using rule 449 (type_declaration -> enum_declaration .)
    ABSTRACT        reduce using rule 449 (type_declaration -> enum_declaration .)
    FINAL           reduce using rule 449 (type_declaration -> enum_declaration .)
    NATIVE          reduce using rule 449 (type_declaration -> enum_declaration .)
    SYNCHRONIZED    reduce using rule 449 (type_declaration -> enum_declaration .)
    TRANSIENT       reduce using rule 449 (type_declaration -> enum_declaration .)
    VOLATILE        reduce using rule 449 (type_declaration -> enum_declaration .)
    STRICTFP        reduce using rule 449 (type_declaration -> enum_declaration .)
    ENUM            reduce using rule 449 (type_declaration -> enum_declaration .)
    CLASS           reduce using rule 449 (type_declaration -> enum_declaration .)
    INTERFACE       reduce using rule 449 (type_declaration -> enum_declaration .)
    $end            reduce using rule 449 (type_declaration -> enum_declaration .)
    NAME            reduce using rule 449 (type_declaration -> enum_declaration .)
    <               reduce using rule 449 (type_declaration -> enum_declaration .)
    BOOLEAN         reduce using rule 449 (type_declaration -> enum_declaration .)
    VOID            reduce using rule 449 (type_declaration -> enum_declaration .)
    BYTE            reduce using rule 449 (type_declaration -> enum_declaration .)
    SHORT           reduce using rule 449 (type_declaration -> enum_declaration .)
    INT             reduce using rule 449 (type_declaration -> enum_declaration .)
    LONG            reduce using rule 449 (type_declaration -> enum_declaration .)
    CHAR            reduce using rule 449 (type_declaration -> enum_declaration .)
    FLOAT           reduce using rule 449 (type_declaration -> enum_declaration .)
    DOUBLE          reduce using rule 449 (type_declaration -> enum_declaration .)
    }               reduce using rule 449 (type_declaration -> enum_declaration .)


state 45

    (508) interface_declaration -> interface_header . interface_body
    (516) interface_body -> . { interface_member_declarations_opt }

    {               shift and go to state 232

    interface_body                 shift and go to state 233

state 46

    (447) type_declaration -> class_declaration .

    ;               reduce using rule 447 (type_declaration -> class_declaration .)
    @               reduce using rule 447 (type_declaration -> class_declaration .)
    PUBLIC          reduce using rule 447 (type_declaration -> class_declaration .)
    PROTECTED       reduce using rule 447 (type_declaration -> class_declaration .)
    PRIVATE         reduce using rule 447 (type_declaration -> class_declaration .)
    STATIC          reduce using rule 447 (type_declaration -> class_declaration .)
    ABSTRACT        reduce using rule 447 (type_declaration -> class_declaration .)
    FINAL           reduce using rule 447 (type_declaration -> class_declaration .)
    NATIVE          reduce using rule 447 (type_declaration -> class_declaration .)
    SYNCHRONIZED    reduce using rule 447 (type_declaration -> class_declaration .)
    TRANSIENT       reduce using rule 447 (type_declaration -> class_declaration .)
    VOLATILE        reduce using rule 447 (type_declaration -> class_declaration .)
    STRICTFP        reduce using rule 447 (type_declaration -> class_declaration .)
    ENUM            reduce using rule 447 (type_declaration -> class_declaration .)
    CLASS           reduce using rule 447 (type_declaration -> class_declaration .)
    INTERFACE       reduce using rule 447 (type_declaration -> class_declaration .)
    $end            reduce using rule 447 (type_declaration -> class_declaration .)
    NAME            reduce using rule 447 (type_declaration -> class_declaration .)
    <               reduce using rule 447 (type_declaration -> class_declaration .)
    BOOLEAN         reduce using rule 447 (type_declaration -> class_declaration .)
    VOID            reduce using rule 447 (type_declaration -> class_declaration .)
    BYTE            reduce using rule 447 (type_declaration -> class_declaration .)
    SHORT           reduce using rule 447 (type_declaration -> class_declaration .)
    INT             reduce using rule 447 (type_declaration -> class_declaration .)
    LONG            reduce using rule 447 (type_declaration -> class_declaration .)
    CHAR            reduce using rule 447 (type_declaration -> class_declaration .)
    FLOAT           reduce using rule 447 (type_declaration -> class_declaration .)
    DOUBLE          reduce using rule 447 (type_declaration -> class_declaration .)
    }               reduce using rule 447 (type_declaration -> class_declaration .)


state 47

    (363) modifier -> TRANSIENT .

    @               reduce using rule 363 (modifier -> TRANSIENT .)
    PUBLIC          reduce using rule 363 (modifier -> TRANSIENT .)
    PROTECTED       reduce using rule 363 (modifier -> TRANSIENT .)
    PRIVATE         reduce using rule 363 (modifier -> TRANSIENT .)
    STATIC          reduce using rule 363 (modifier -> TRANSIENT .)
    ABSTRACT        reduce using rule 363 (modifier -> TRANSIENT .)
    FINAL           reduce using rule 363 (modifier -> TRANSIENT .)
    NATIVE          reduce using rule 363 (modifier -> TRANSIENT .)
    SYNCHRONIZED    reduce using rule 363 (modifier -> TRANSIENT .)
    TRANSIENT       reduce using rule 363 (modifier -> TRANSIENT .)
    VOLATILE        reduce using rule 363 (modifier -> TRANSIENT .)
    STRICTFP        reduce using rule 363 (modifier -> TRANSIENT .)
    ENUM            reduce using rule 363 (modifier -> TRANSIENT .)
    CLASS           reduce using rule 363 (modifier -> TRANSIENT .)
    INTERFACE       reduce using rule 363 (modifier -> TRANSIENT .)
    BOOLEAN         reduce using rule 363 (modifier -> TRANSIENT .)
    VOID            reduce using rule 363 (modifier -> TRANSIENT .)
    BYTE            reduce using rule 363 (modifier -> TRANSIENT .)
    SHORT           reduce using rule 363 (modifier -> TRANSIENT .)
    INT             reduce using rule 363 (modifier -> TRANSIENT .)
    LONG            reduce using rule 363 (modifier -> TRANSIENT .)
    CHAR            reduce using rule 363 (modifier -> TRANSIENT .)
    FLOAT           reduce using rule 363 (modifier -> TRANSIENT .)
    DOUBLE          reduce using rule 363 (modifier -> TRANSIENT .)
    NAME            reduce using rule 363 (modifier -> TRANSIENT .)
    <               reduce using rule 363 (modifier -> TRANSIENT .)
    PACKAGE         reduce using rule 363 (modifier -> TRANSIENT .)


state 48

    (364) modifier -> VOLATILE .

    @               reduce using rule 364 (modifier -> VOLATILE .)
    PUBLIC          reduce using rule 364 (modifier -> VOLATILE .)
    PROTECTED       reduce using rule 364 (modifier -> VOLATILE .)
    PRIVATE         reduce using rule 364 (modifier -> VOLATILE .)
    STATIC          reduce using rule 364 (modifier -> VOLATILE .)
    ABSTRACT        reduce using rule 364 (modifier -> VOLATILE .)
    FINAL           reduce using rule 364 (modifier -> VOLATILE .)
    NATIVE          reduce using rule 364 (modifier -> VOLATILE .)
    SYNCHRONIZED    reduce using rule 364 (modifier -> VOLATILE .)
    TRANSIENT       reduce using rule 364 (modifier -> VOLATILE .)
    VOLATILE        reduce using rule 364 (modifier -> VOLATILE .)
    STRICTFP        reduce using rule 364 (modifier -> VOLATILE .)
    ENUM            reduce using rule 364 (modifier -> VOLATILE .)
    CLASS           reduce using rule 364 (modifier -> VOLATILE .)
    INTERFACE       reduce using rule 364 (modifier -> VOLATILE .)
    BOOLEAN         reduce using rule 364 (modifier -> VOLATILE .)
    VOID            reduce using rule 364 (modifier -> VOLATILE .)
    BYTE            reduce using rule 364 (modifier -> VOLATILE .)
    SHORT           reduce using rule 364 (modifier -> VOLATILE .)
    INT             reduce using rule 364 (modifier -> VOLATILE .)
    LONG            reduce using rule 364 (modifier -> VOLATILE .)
    CHAR            reduce using rule 364 (modifier -> VOLATILE .)
    FLOAT           reduce using rule 364 (modifier -> VOLATILE .)
    DOUBLE          reduce using rule 364 (modifier -> VOLATILE .)
    NAME            reduce using rule 364 (modifier -> VOLATILE .)
    <               reduce using rule 364 (modifier -> VOLATILE .)
    PACKAGE         reduce using rule 364 (modifier -> VOLATILE .)


state 49

    (604) compilation_unit -> empty .
    (352) modifiers_opt -> empty .

    $end            reduce using rule 604 (compilation_unit -> empty .)
    ENUM            reduce using rule 352 (modifiers_opt -> empty .)
    CLASS           reduce using rule 352 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 352 (modifiers_opt -> empty .)


state 50

    (584) annotation -> normal_annotation .

    @               reduce using rule 584 (annotation -> normal_annotation .)
    PUBLIC          reduce using rule 584 (annotation -> normal_annotation .)
    PROTECTED       reduce using rule 584 (annotation -> normal_annotation .)
    PRIVATE         reduce using rule 584 (annotation -> normal_annotation .)
    STATIC          reduce using rule 584 (annotation -> normal_annotation .)
    ABSTRACT        reduce using rule 584 (annotation -> normal_annotation .)
    FINAL           reduce using rule 584 (annotation -> normal_annotation .)
    NATIVE          reduce using rule 584 (annotation -> normal_annotation .)
    SYNCHRONIZED    reduce using rule 584 (annotation -> normal_annotation .)
    TRANSIENT       reduce using rule 584 (annotation -> normal_annotation .)
    VOLATILE        reduce using rule 584 (annotation -> normal_annotation .)
    STRICTFP        reduce using rule 584 (annotation -> normal_annotation .)
    ENUM            reduce using rule 584 (annotation -> normal_annotation .)
    CLASS           reduce using rule 584 (annotation -> normal_annotation .)
    INTERFACE       reduce using rule 584 (annotation -> normal_annotation .)
    BOOLEAN         reduce using rule 584 (annotation -> normal_annotation .)
    VOID            reduce using rule 584 (annotation -> normal_annotation .)
    BYTE            reduce using rule 584 (annotation -> normal_annotation .)
    SHORT           reduce using rule 584 (annotation -> normal_annotation .)
    INT             reduce using rule 584 (annotation -> normal_annotation .)
    LONG            reduce using rule 584 (annotation -> normal_annotation .)
    CHAR            reduce using rule 584 (annotation -> normal_annotation .)
    FLOAT           reduce using rule 584 (annotation -> normal_annotation .)
    DOUBLE          reduce using rule 584 (annotation -> normal_annotation .)
    NAME            reduce using rule 584 (annotation -> normal_annotation .)
    ,               reduce using rule 584 (annotation -> normal_annotation .)
    }               reduce using rule 584 (annotation -> normal_annotation .)
    <               reduce using rule 584 (annotation -> normal_annotation .)
    PACKAGE         reduce using rule 584 (annotation -> normal_annotation .)
    )               reduce using rule 584 (annotation -> normal_annotation .)
    ;               reduce using rule 584 (annotation -> normal_annotation .)


state 51

    (353) modifiers -> modifier .

    @               reduce using rule 353 (modifiers -> modifier .)
    PUBLIC          reduce using rule 353 (modifiers -> modifier .)
    PROTECTED       reduce using rule 353 (modifiers -> modifier .)
    PRIVATE         reduce using rule 353 (modifiers -> modifier .)
    STATIC          reduce using rule 353 (modifiers -> modifier .)
    ABSTRACT        reduce using rule 353 (modifiers -> modifier .)
    FINAL           reduce using rule 353 (modifiers -> modifier .)
    NATIVE          reduce using rule 353 (modifiers -> modifier .)
    SYNCHRONIZED    reduce using rule 353 (modifiers -> modifier .)
    TRANSIENT       reduce using rule 353 (modifiers -> modifier .)
    VOLATILE        reduce using rule 353 (modifiers -> modifier .)
    STRICTFP        reduce using rule 353 (modifiers -> modifier .)
    BOOLEAN         reduce using rule 353 (modifiers -> modifier .)
    VOID            reduce using rule 353 (modifiers -> modifier .)
    BYTE            reduce using rule 353 (modifiers -> modifier .)
    SHORT           reduce using rule 353 (modifiers -> modifier .)
    INT             reduce using rule 353 (modifiers -> modifier .)
    LONG            reduce using rule 353 (modifiers -> modifier .)
    CHAR            reduce using rule 353 (modifiers -> modifier .)
    FLOAT           reduce using rule 353 (modifiers -> modifier .)
    DOUBLE          reduce using rule 353 (modifiers -> modifier .)
    NAME            reduce using rule 353 (modifiers -> modifier .)
    ENUM            reduce using rule 353 (modifiers -> modifier .)
    CLASS           reduce using rule 353 (modifiers -> modifier .)
    INTERFACE       reduce using rule 353 (modifiers -> modifier .)
    <               reduce using rule 353 (modifiers -> modifier .)
    PACKAGE         reduce using rule 353 (modifiers -> modifier .)


state 52

    (450) type_declaration -> annotation_type_declaration .

    ;               reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    @               reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    PUBLIC          reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    PROTECTED       reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    PRIVATE         reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    STATIC          reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    ABSTRACT        reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    FINAL           reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    NATIVE          reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    SYNCHRONIZED    reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    TRANSIENT       reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    VOLATILE        reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    STRICTFP        reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    ENUM            reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    CLASS           reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    INTERFACE       reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    $end            reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    NAME            reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    <               reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    BOOLEAN         reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    VOID            reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    BYTE            reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    SHORT           reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    INT             reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    LONG            reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    CHAR            reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    FLOAT           reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    DOUBLE          reduce using rule 450 (type_declaration -> annotation_type_declaration .)
    }               reduce using rule 450 (type_declaration -> annotation_type_declaration .)


state 53

    (355) modifier -> PUBLIC .

    @               reduce using rule 355 (modifier -> PUBLIC .)
    PUBLIC          reduce using rule 355 (modifier -> PUBLIC .)
    PROTECTED       reduce using rule 355 (modifier -> PUBLIC .)
    PRIVATE         reduce using rule 355 (modifier -> PUBLIC .)
    STATIC          reduce using rule 355 (modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 355 (modifier -> PUBLIC .)
    FINAL           reduce using rule 355 (modifier -> PUBLIC .)
    NATIVE          reduce using rule 355 (modifier -> PUBLIC .)
    SYNCHRONIZED    reduce using rule 355 (modifier -> PUBLIC .)
    TRANSIENT       reduce using rule 355 (modifier -> PUBLIC .)
    VOLATILE        reduce using rule 355 (modifier -> PUBLIC .)
    STRICTFP        reduce using rule 355 (modifier -> PUBLIC .)
    ENUM            reduce using rule 355 (modifier -> PUBLIC .)
    CLASS           reduce using rule 355 (modifier -> PUBLIC .)
    INTERFACE       reduce using rule 355 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 355 (modifier -> PUBLIC .)
    VOID            reduce using rule 355 (modifier -> PUBLIC .)
    BYTE            reduce using rule 355 (modifier -> PUBLIC .)
    SHORT           reduce using rule 355 (modifier -> PUBLIC .)
    INT             reduce using rule 355 (modifier -> PUBLIC .)
    LONG            reduce using rule 355 (modifier -> PUBLIC .)
    CHAR            reduce using rule 355 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 355 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 355 (modifier -> PUBLIC .)
    NAME            reduce using rule 355 (modifier -> PUBLIC .)
    <               reduce using rule 355 (modifier -> PUBLIC .)
    PACKAGE         reduce using rule 355 (modifier -> PUBLIC .)


state 54

    (193) statement_without_trailing_substatement -> expression_statement .

    $end            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    IF              reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    WHILE           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    FOR             reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    {               reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    ASSERT          reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    ;               reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    SWITCH          reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    DO              reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    BREAK           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    CONTINUE        reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    RETURN          reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    SYNCHRONIZED    reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    THROW           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    TRY             reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    NAME            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    @               reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    BOOLEAN         reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    VOID            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    BYTE            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    SHORT           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    INT             reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    LONG            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    CHAR            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    FLOAT           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    DOUBLE          reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    PUBLIC          reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    PROTECTED       reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    PRIVATE         reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    STATIC          reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    ABSTRACT        reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    FINAL           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    NATIVE          reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    TRANSIENT       reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    VOLATILE        reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    STRICTFP        reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    THIS            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    SUPER           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    PLUSPLUS        reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    MINUSMINUS      reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    NEW             reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    <               reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    (               reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    NUM             reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    CHAR_LITERAL    reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    STRING_LITERAL  reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    TRUE            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    FALSE           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    NULL            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    ENUM            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    CLASS           reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    INTERFACE       reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    }               reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    CASE            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    DEFAULT         reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)
    ELSE            reduce using rule 193 (statement_without_trailing_substatement -> expression_statement .)


state 55

    (206) expression_statement -> explicit_constructor_invocation .

    WHILE           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    IF              reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    FOR             reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    {               reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    ASSERT          reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    ;               reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    SWITCH          reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    DO              reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    BREAK           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    CONTINUE        reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    RETURN          reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    SYNCHRONIZED    reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    THROW           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    TRY             reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    NAME            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    @               reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    BOOLEAN         reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    VOID            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    BYTE            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    SHORT           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    INT             reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    LONG            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    CHAR            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    FLOAT           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    DOUBLE          reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    PUBLIC          reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    PROTECTED       reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    PRIVATE         reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    STATIC          reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    ABSTRACT        reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    FINAL           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    NATIVE          reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    TRANSIENT       reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    VOLATILE        reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    STRICTFP        reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    THIS            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    SUPER           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    PLUSPLUS        reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    MINUSMINUS      reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    NEW             reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    <               reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    (               reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    NUM             reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    CHAR_LITERAL    reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    STRING_LITERAL  reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    TRUE            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    FALSE           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    NULL            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    ENUM            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    CLASS           reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    INTERFACE       reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    }               reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    CASE            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    DEFAULT         reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    $end            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)
    ELSE            reduce using rule 206 (expression_statement -> explicit_constructor_invocation .)


state 56

    (370) primitive_type -> VOID .

    .               reduce using rule 370 (primitive_type -> VOID .)
    [               reduce using rule 370 (primitive_type -> VOID .)
    NAME            reduce using rule 370 (primitive_type -> VOID .)
    )               reduce using rule 370 (primitive_type -> VOID .)
    |               reduce using rule 370 (primitive_type -> VOID .)
    ELLIPSIS        reduce using rule 370 (primitive_type -> VOID .)


state 57

    (202) statement_without_trailing_substatement -> throw_statement .

    $end            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    IF              reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    WHILE           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    FOR             reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    {               reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    ASSERT          reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    ;               reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    SWITCH          reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    DO              reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    BREAK           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    CONTINUE        reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    RETURN          reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    SYNCHRONIZED    reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    THROW           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    TRY             reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    NAME            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    @               reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    BOOLEAN         reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    VOID            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    BYTE            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    SHORT           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    INT             reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    LONG            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    CHAR            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    FLOAT           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    DOUBLE          reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    PUBLIC          reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    PROTECTED       reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    PRIVATE         reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    STATIC          reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    ABSTRACT        reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    FINAL           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    NATIVE          reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    TRANSIENT       reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    VOLATILE        reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    STRICTFP        reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    THIS            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    SUPER           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    PLUSPLUS        reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    MINUSMINUS      reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    NEW             reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    <               reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    (               reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    NUM             reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    CHAR_LITERAL    reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    STRING_LITERAL  reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    TRUE            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    FALSE           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    NULL            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    ENUM            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    CLASS           reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    INTERFACE       reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    }               reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    CASE            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    DEFAULT         reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)
    ELSE            reduce using rule 202 (statement_without_trailing_substatement -> throw_statement .)


state 58

    (381) class_or_interface_type -> generic_type .
    (389) array_type -> generic_type . dims
    (390) array_type -> generic_type . . name dims
    (384) class_or_interface -> generic_type . . name
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    NAME            reduce using rule 381 (class_or_interface_type -> generic_type .)
    INSTANCEOF      reduce using rule 381 (class_or_interface_type -> generic_type .)
    EQ              reduce using rule 381 (class_or_interface_type -> generic_type .)
    NEQ             reduce using rule 381 (class_or_interface_type -> generic_type .)
    &               reduce using rule 381 (class_or_interface_type -> generic_type .)
    ^               reduce using rule 381 (class_or_interface_type -> generic_type .)
    |               reduce using rule 381 (class_or_interface_type -> generic_type .)
    AND             reduce using rule 381 (class_or_interface_type -> generic_type .)
    ?               reduce using rule 381 (class_or_interface_type -> generic_type .)
    OR              reduce using rule 381 (class_or_interface_type -> generic_type .)
    )               reduce using rule 381 (class_or_interface_type -> generic_type .)
    ,               reduce using rule 381 (class_or_interface_type -> generic_type .)
    }               reduce using rule 381 (class_or_interface_type -> generic_type .)
    ;               reduce using rule 381 (class_or_interface_type -> generic_type .)
    $end            reduce using rule 381 (class_or_interface_type -> generic_type .)
    :               reduce using rule 381 (class_or_interface_type -> generic_type .)
    ]               reduce using rule 381 (class_or_interface_type -> generic_type .)
    ELLIPSIS        reduce using rule 381 (class_or_interface_type -> generic_type .)
    .               shift and go to state 234
    [               shift and go to state 238

    one_dim_loop                   shift and go to state 237
    dims                           shift and go to state 235
    dims_loop                      shift and go to state 236

state 59

    (7) assignment -> postfix_expression . assignment_operator assignment_expression
    (134) post_increment_expression -> postfix_expression . PLUSPLUS
    (135) post_decrement_expression -> postfix_expression . MINUSMINUS
    (8) assignment_operator -> . =
    (9) assignment_operator -> . TIMES_ASSIGN
    (10) assignment_operator -> . DIVIDE_ASSIGN
    (11) assignment_operator -> . REMAINDER_ASSIGN
    (12) assignment_operator -> . PLUS_ASSIGN
    (13) assignment_operator -> . MINUS_ASSIGN
    (14) assignment_operator -> . LSHIFT_ASSIGN
    (15) assignment_operator -> . RSHIFT_ASSIGN
    (16) assignment_operator -> . RRSHIFT_ASSIGN
    (17) assignment_operator -> . AND_ASSIGN
    (18) assignment_operator -> . OR_ASSIGN
    (19) assignment_operator -> . XOR_ASSIGN

    PLUSPLUS        shift and go to state 242
    MINUSMINUS      shift and go to state 251
    =               shift and go to state 252
    TIMES_ASSIGN    shift and go to state 239
    DIVIDE_ASSIGN   shift and go to state 248
    REMAINDER_ASSIGN shift and go to state 244
    PLUS_ASSIGN     shift and go to state 250
    MINUS_ASSIGN    shift and go to state 246
    LSHIFT_ASSIGN   shift and go to state 241
    RSHIFT_ASSIGN   shift and go to state 240
    RRSHIFT_ASSIGN  shift and go to state 243
    AND_ASSIGN      shift and go to state 247
    OR_ASSIGN       shift and go to state 245
    XOR_ASSIGN      shift and go to state 253

    assignment_operator            shift and go to state 249

state 60

    (211) statement_expression -> post_decrement_expression .
    (130) postfix_expression -> post_decrement_expression .

    ;               reduce using rule 211 (statement_expression -> post_decrement_expression .)
    ,               reduce using rule 211 (statement_expression -> post_decrement_expression .)
    )               reduce using rule 211 (statement_expression -> post_decrement_expression .)
    PLUSPLUS        reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    MINUSMINUS      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    =               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    TIMES_ASSIGN    reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    DIVIDE_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    REMAINDER_ASSIGN reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    PLUS_ASSIGN     reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    MINUS_ASSIGN    reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    LSHIFT_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    RSHIFT_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    RRSHIFT_ASSIGN  reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    AND_ASSIGN      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    OR_ASSIGN       reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    XOR_ASSIGN      reduce using rule 130 (postfix_expression -> post_decrement_expression .)


state 61

    (194) statement_without_trailing_substatement -> assert_statement .

    $end            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    IF              reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    WHILE           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    FOR             reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    {               reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    ASSERT          reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    ;               reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    SWITCH          reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    DO              reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    BREAK           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    CONTINUE        reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    RETURN          reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    SYNCHRONIZED    reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    THROW           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    TRY             reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    NAME            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    @               reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    BOOLEAN         reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    VOID            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    BYTE            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    SHORT           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    INT             reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    LONG            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    CHAR            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    FLOAT           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    DOUBLE          reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    PUBLIC          reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    PROTECTED       reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    PRIVATE         reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    STATIC          reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    ABSTRACT        reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    FINAL           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    NATIVE          reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    TRANSIENT       reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    VOLATILE        reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    STRICTFP        reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    THIS            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    SUPER           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    PLUSPLUS        reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    MINUSMINUS      reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    NEW             reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    <               reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    (               reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    NUM             reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    CHAR_LITERAL    reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    STRING_LITERAL  reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    TRUE            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    FALSE           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    NULL            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    ENUM            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    CLASS           reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    INTERFACE       reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    }               reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    CASE            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    DEFAULT         reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)
    ELSE            reduce using rule 194 (statement_without_trailing_substatement -> assert_statement .)


state 62

    (145) primary_no_new_array -> ( . name )
    (146) primary_no_new_array -> ( . expression_not_name )
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (2) expression_not_name -> . assignment_expression_not_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (5) assignment_expression_not_name -> . assignment
    (6) assignment_expression_not_name -> . conditional_expression_not_name
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name ? expression : conditional_expression
    (24) conditional_expression_not_name -> . name ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name OR conditional_and_expression
    (29) conditional_or_expression_not_name -> . name OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name AND inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (37) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (38) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name | exclusive_or_expression
    (39) inclusive_or_expression_not_name -> . name | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (42) exclusive_or_expression_not_name -> . and_expression_not_name
    (43) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name ^ and_expression
    (44) exclusive_or_expression_not_name -> . name ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (47) and_expression_not_name -> . equality_expression_not_name
    (48) and_expression_not_name -> . and_expression_not_name & equality_expression
    (49) and_expression_not_name -> . name & equality_expression
    (53) equality_expression_not_name -> . instanceof_expression_not_name
    (54) equality_expression_not_name -> . equality_expression_not_name EQ instanceof_expression
    (55) equality_expression_not_name -> . name EQ instanceof_expression
    (56) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (57) equality_expression_not_name -> . name NEQ instanceof_expression
    (60) instanceof_expression_not_name -> . relational_expression_not_name
    (61) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (62) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (68) relational_expression_not_name -> . shift_expression_not_name
    (69) relational_expression_not_name -> . shift_expression_not_name < shift_expression
    (70) relational_expression_not_name -> . name < shift_expression
    (71) relational_expression_not_name -> . shift_expression_not_name > shift_expression
    (72) relational_expression_not_name -> . name > shift_expression
    (73) relational_expression_not_name -> . shift_expression_not_name GTEQ shift_expression
    (74) relational_expression_not_name -> . name GTEQ shift_expression
    (75) relational_expression_not_name -> . shift_expression_not_name LTEQ shift_expression
    (76) relational_expression_not_name -> . name LTEQ shift_expression
    (81) shift_expression_not_name -> . additive_expression_not_name
    (82) shift_expression_not_name -> . shift_expression_not_name LSHIFT additive_expression
    (83) shift_expression_not_name -> . name LSHIFT additive_expression
    (84) shift_expression_not_name -> . shift_expression_not_name RSHIFT additive_expression
    (85) shift_expression_not_name -> . name RSHIFT additive_expression
    (86) shift_expression_not_name -> . shift_expression_not_name RRSHIFT additive_expression
    (87) shift_expression_not_name -> . name RRSHIFT additive_expression
    (91) additive_expression_not_name -> . multiplicative_expression_not_name
    (92) additive_expression_not_name -> . additive_expression_not_name + multiplicative_expression
    (93) additive_expression_not_name -> . name + multiplicative_expression
    (94) additive_expression_not_name -> . additive_expression_not_name - multiplicative_expression
    (95) additive_expression_not_name -> . name - multiplicative_expression
    (100) multiplicative_expression_not_name -> . unary_expression_not_name
    (101) multiplicative_expression_not_name -> . multiplicative_expression_not_name * unary_expression
    (102) multiplicative_expression_not_name -> . name * unary_expression
    (103) multiplicative_expression_not_name -> . multiplicative_expression_not_name / unary_expression
    (104) multiplicative_expression_not_name -> . name / unary_expression
    (105) multiplicative_expression_not_name -> . multiplicative_expression_not_name % unary_expression
    (106) multiplicative_expression_not_name -> . name % unary_expression
    (112) unary_expression_not_name -> . pre_increment_expression
    (113) unary_expression_not_name -> . pre_decrement_expression
    (114) unary_expression_not_name -> . + unary_expression
    (115) unary_expression_not_name -> . - unary_expression
    (116) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (123) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (124) unary_expression_not_plus_minus_not_name -> . ~ unary_expression
    (125) unary_expression_not_plus_minus_not_name -> . ! unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . cast_expression
    (131) postfix_expression_not_name -> . primary
    (132) postfix_expression_not_name -> . post_increment_expression
    (133) postfix_expression_not_name -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    NAME            shift and go to state 179
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 264
    -               shift and go to state 278
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 267
    !               shift and go to state 277

    relational_expression_not_name shift and go to state 262
    primary                        shift and go to state 268
    expression_not_name            shift and go to state 275
    assignment_expression_not_name shift and go to state 263
    exclusive_or_expression_not_name shift and go to state 254
    inclusive_or_expression_not_name shift and go to state 269
    post_decrement_expression      shift and go to state 255
    array_creation_without_array_initializer shift and go to state 95
    primitive_type                 shift and go to state 174
    postfix_expression_not_name    shift and go to state 265
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 266
    postfix_expression             shift and go to state 59
    class_instance_creation_expression shift and go to state 156
    conditional_expression_not_name shift and go to state 279
    literal                        shift and go to state 146
    method_invocation              shift and go to state 176
    shift_expression_not_name      shift and go to state 256
    simple_name                    shift and go to state 64
    equality_expression_not_name   shift and go to state 281
    field_access                   shift and go to state 96
    unary_expression_not_plus_minus_not_name shift and go to state 257
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 282
    multiplicative_expression_not_name shift and go to state 276
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    conditional_and_expression_not_name shift and go to state 258
    cast_expression                shift and go to state 270
    and_expression_not_name        shift and go to state 271
    primary_no_new_array           shift and go to state 87
    unary_expression_not_name      shift and go to state 280
    name                           shift and go to state 259
    conditional_or_expression_not_name shift and go to state 272
    instanceof_expression_not_name shift and go to state 273
    post_increment_expression      shift and go to state 260
    pre_decrement_expression       shift and go to state 261
    additive_expression_not_name   shift and go to state 274

state 63

    (374) primitive_type -> LONG .

    .               reduce using rule 374 (primitive_type -> LONG .)
    [               reduce using rule 374 (primitive_type -> LONG .)
    NAME            reduce using rule 374 (primitive_type -> LONG .)
    )               reduce using rule 374 (primitive_type -> LONG .)
    |               reduce using rule 374 (primitive_type -> LONG .)
    ELLIPSIS        reduce using rule 374 (primitive_type -> LONG .)


state 64

    (341) name -> simple_name .

    .               reduce using rule 341 (name -> simple_name .)
    [               reduce using rule 341 (name -> simple_name .)
    PLUSPLUS        reduce using rule 341 (name -> simple_name .)
    MINUSMINUS      reduce using rule 341 (name -> simple_name .)
    =               reduce using rule 341 (name -> simple_name .)
    TIMES_ASSIGN    reduce using rule 341 (name -> simple_name .)
    DIVIDE_ASSIGN   reduce using rule 341 (name -> simple_name .)
    REMAINDER_ASSIGN reduce using rule 341 (name -> simple_name .)
    PLUS_ASSIGN     reduce using rule 341 (name -> simple_name .)
    MINUS_ASSIGN    reduce using rule 341 (name -> simple_name .)
    LSHIFT_ASSIGN   reduce using rule 341 (name -> simple_name .)
    RSHIFT_ASSIGN   reduce using rule 341 (name -> simple_name .)
    RRSHIFT_ASSIGN  reduce using rule 341 (name -> simple_name .)
    AND_ASSIGN      reduce using rule 341 (name -> simple_name .)
    OR_ASSIGN       reduce using rule 341 (name -> simple_name .)
    XOR_ASSIGN      reduce using rule 341 (name -> simple_name .)
    *               reduce using rule 341 (name -> simple_name .)
    /               reduce using rule 341 (name -> simple_name .)
    %               reduce using rule 341 (name -> simple_name .)
    +               reduce using rule 341 (name -> simple_name .)
    -               reduce using rule 341 (name -> simple_name .)
    LSHIFT          reduce using rule 341 (name -> simple_name .)
    RSHIFT          reduce using rule 341 (name -> simple_name .)
    RRSHIFT         reduce using rule 341 (name -> simple_name .)
    >               reduce using rule 341 (name -> simple_name .)
    <               reduce using rule 341 (name -> simple_name .)
    GTEQ            reduce using rule 341 (name -> simple_name .)
    LTEQ            reduce using rule 341 (name -> simple_name .)
    INSTANCEOF      reduce using rule 341 (name -> simple_name .)
    EQ              reduce using rule 341 (name -> simple_name .)
    NEQ             reduce using rule 341 (name -> simple_name .)
    &               reduce using rule 341 (name -> simple_name .)
    ^               reduce using rule 341 (name -> simple_name .)
    |               reduce using rule 341 (name -> simple_name .)
    AND             reduce using rule 341 (name -> simple_name .)
    ?               reduce using rule 341 (name -> simple_name .)
    OR              reduce using rule 341 (name -> simple_name .)
    ;               reduce using rule 341 (name -> simple_name .)
    :               reduce using rule 341 (name -> simple_name .)
    ,               reduce using rule 341 (name -> simple_name .)
    )               reduce using rule 341 (name -> simple_name .)
    $end            reduce using rule 341 (name -> simple_name .)
    ]               reduce using rule 341 (name -> simple_name .)
    }               reduce using rule 341 (name -> simple_name .)
    IMPLEMENTS      reduce using rule 341 (name -> simple_name .)
    {               reduce using rule 341 (name -> simple_name .)
    NAME            reduce using rule 341 (name -> simple_name .)
    (               reduce using rule 341 (name -> simple_name .)
    PACKAGE         reduce using rule 341 (name -> simple_name .)
    @               reduce using rule 341 (name -> simple_name .)
    PUBLIC          reduce using rule 341 (name -> simple_name .)
    PROTECTED       reduce using rule 341 (name -> simple_name .)
    PRIVATE         reduce using rule 341 (name -> simple_name .)
    STATIC          reduce using rule 341 (name -> simple_name .)
    ABSTRACT        reduce using rule 341 (name -> simple_name .)
    FINAL           reduce using rule 341 (name -> simple_name .)
    NATIVE          reduce using rule 341 (name -> simple_name .)
    SYNCHRONIZED    reduce using rule 341 (name -> simple_name .)
    TRANSIENT       reduce using rule 341 (name -> simple_name .)
    VOLATILE        reduce using rule 341 (name -> simple_name .)
    STRICTFP        reduce using rule 341 (name -> simple_name .)
    ENUM            reduce using rule 341 (name -> simple_name .)
    CLASS           reduce using rule 341 (name -> simple_name .)
    INTERFACE       reduce using rule 341 (name -> simple_name .)
    BOOLEAN         reduce using rule 341 (name -> simple_name .)
    VOID            reduce using rule 341 (name -> simple_name .)
    BYTE            reduce using rule 341 (name -> simple_name .)
    SHORT           reduce using rule 341 (name -> simple_name .)
    INT             reduce using rule 341 (name -> simple_name .)
    LONG            reduce using rule 341 (name -> simple_name .)
    CHAR            reduce using rule 341 (name -> simple_name .)
    FLOAT           reduce using rule 341 (name -> simple_name .)
    DOUBLE          reduce using rule 341 (name -> simple_name .)
    ELLIPSIS        reduce using rule 341 (name -> simple_name .)


state 65

    (189) statement -> while_statement .

    IF              reduce using rule 189 (statement -> while_statement .)
    WHILE           reduce using rule 189 (statement -> while_statement .)
    FOR             reduce using rule 189 (statement -> while_statement .)
    {               reduce using rule 189 (statement -> while_statement .)
    ASSERT          reduce using rule 189 (statement -> while_statement .)
    ;               reduce using rule 189 (statement -> while_statement .)
    SWITCH          reduce using rule 189 (statement -> while_statement .)
    DO              reduce using rule 189 (statement -> while_statement .)
    BREAK           reduce using rule 189 (statement -> while_statement .)
    CONTINUE        reduce using rule 189 (statement -> while_statement .)
    RETURN          reduce using rule 189 (statement -> while_statement .)
    SYNCHRONIZED    reduce using rule 189 (statement -> while_statement .)
    THROW           reduce using rule 189 (statement -> while_statement .)
    TRY             reduce using rule 189 (statement -> while_statement .)
    NAME            reduce using rule 189 (statement -> while_statement .)
    @               reduce using rule 189 (statement -> while_statement .)
    BOOLEAN         reduce using rule 189 (statement -> while_statement .)
    VOID            reduce using rule 189 (statement -> while_statement .)
    BYTE            reduce using rule 189 (statement -> while_statement .)
    SHORT           reduce using rule 189 (statement -> while_statement .)
    INT             reduce using rule 189 (statement -> while_statement .)
    LONG            reduce using rule 189 (statement -> while_statement .)
    CHAR            reduce using rule 189 (statement -> while_statement .)
    FLOAT           reduce using rule 189 (statement -> while_statement .)
    DOUBLE          reduce using rule 189 (statement -> while_statement .)
    PUBLIC          reduce using rule 189 (statement -> while_statement .)
    PROTECTED       reduce using rule 189 (statement -> while_statement .)
    PRIVATE         reduce using rule 189 (statement -> while_statement .)
    STATIC          reduce using rule 189 (statement -> while_statement .)
    ABSTRACT        reduce using rule 189 (statement -> while_statement .)
    FINAL           reduce using rule 189 (statement -> while_statement .)
    NATIVE          reduce using rule 189 (statement -> while_statement .)
    TRANSIENT       reduce using rule 189 (statement -> while_statement .)
    VOLATILE        reduce using rule 189 (statement -> while_statement .)
    STRICTFP        reduce using rule 189 (statement -> while_statement .)
    THIS            reduce using rule 189 (statement -> while_statement .)
    SUPER           reduce using rule 189 (statement -> while_statement .)
    PLUSPLUS        reduce using rule 189 (statement -> while_statement .)
    MINUSMINUS      reduce using rule 189 (statement -> while_statement .)
    NEW             reduce using rule 189 (statement -> while_statement .)
    <               reduce using rule 189 (statement -> while_statement .)
    (               reduce using rule 189 (statement -> while_statement .)
    NUM             reduce using rule 189 (statement -> while_statement .)
    CHAR_LITERAL    reduce using rule 189 (statement -> while_statement .)
    STRING_LITERAL  reduce using rule 189 (statement -> while_statement .)
    TRUE            reduce using rule 189 (statement -> while_statement .)
    FALSE           reduce using rule 189 (statement -> while_statement .)
    NULL            reduce using rule 189 (statement -> while_statement .)
    ENUM            reduce using rule 189 (statement -> while_statement .)
    CLASS           reduce using rule 189 (statement -> while_statement .)
    INTERFACE       reduce using rule 189 (statement -> while_statement .)
    }               reduce using rule 189 (statement -> while_statement .)
    $end            reduce using rule 189 (statement -> while_statement .)
    CASE            reduce using rule 189 (statement -> while_statement .)
    DEFAULT         reduce using rule 189 (statement -> while_statement .)


state 66

    (205) expression_statement -> statement_expression . ;

    ;               shift and go to state 283


state 67

    (391) type_arguments -> < . type_argument_list1
    (392) type_argument_list1 -> . type_argument1
    (393) type_argument_list1 -> . type_argument_list , type_argument1
    (398) type_argument1 -> . reference_type1
    (399) type_argument1 -> . wildcard1
    (394) type_argument_list -> . type_argument
    (395) type_argument_list -> . type_argument_list , type_argument
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (417) wildcard1 -> . ? >
    (418) wildcard1 -> . ? wildcard_bounds1
    (396) type_argument -> . reference_type
    (397) type_argument -> . wildcard
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (413) wildcard -> . ?
    (414) wildcard -> . ? wildcard_bounds
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    ?               shift and go to state 288
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    wildcard1                      shift and go to state 289
    type_argument_list             shift and go to state 290
    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 291
    type_argument1                 shift and go to state 292
    reference_type                 shift and go to state 286
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    type_argument_list1            shift and go to state 285
    wildcard                       shift and go to state 296
    reference_type1                shift and go to state 293
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 88
    type_argument                  shift and go to state 294

state 68

    (249) enhanced_for_statement -> enhanced_for_statement_header . statement
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    array_access                   shift and go to state 90
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 92
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 299
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    literal                        shift and go to state 146
    statement_without_trailing_substatement shift and go to state 99
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    labeled_statement              shift and go to state 77
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    block                          shift and go to state 107
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    if_then_else_statement         shift and go to state 108

state 69

    (190) statement -> for_statement .

    IF              reduce using rule 190 (statement -> for_statement .)
    WHILE           reduce using rule 190 (statement -> for_statement .)
    FOR             reduce using rule 190 (statement -> for_statement .)
    {               reduce using rule 190 (statement -> for_statement .)
    ASSERT          reduce using rule 190 (statement -> for_statement .)
    ;               reduce using rule 190 (statement -> for_statement .)
    SWITCH          reduce using rule 190 (statement -> for_statement .)
    DO              reduce using rule 190 (statement -> for_statement .)
    BREAK           reduce using rule 190 (statement -> for_statement .)
    CONTINUE        reduce using rule 190 (statement -> for_statement .)
    RETURN          reduce using rule 190 (statement -> for_statement .)
    SYNCHRONIZED    reduce using rule 190 (statement -> for_statement .)
    THROW           reduce using rule 190 (statement -> for_statement .)
    TRY             reduce using rule 190 (statement -> for_statement .)
    NAME            reduce using rule 190 (statement -> for_statement .)
    @               reduce using rule 190 (statement -> for_statement .)
    BOOLEAN         reduce using rule 190 (statement -> for_statement .)
    VOID            reduce using rule 190 (statement -> for_statement .)
    BYTE            reduce using rule 190 (statement -> for_statement .)
    SHORT           reduce using rule 190 (statement -> for_statement .)
    INT             reduce using rule 190 (statement -> for_statement .)
    LONG            reduce using rule 190 (statement -> for_statement .)
    CHAR            reduce using rule 190 (statement -> for_statement .)
    FLOAT           reduce using rule 190 (statement -> for_statement .)
    DOUBLE          reduce using rule 190 (statement -> for_statement .)
    PUBLIC          reduce using rule 190 (statement -> for_statement .)
    PROTECTED       reduce using rule 190 (statement -> for_statement .)
    PRIVATE         reduce using rule 190 (statement -> for_statement .)
    STATIC          reduce using rule 190 (statement -> for_statement .)
    ABSTRACT        reduce using rule 190 (statement -> for_statement .)
    FINAL           reduce using rule 190 (statement -> for_statement .)
    NATIVE          reduce using rule 190 (statement -> for_statement .)
    TRANSIENT       reduce using rule 190 (statement -> for_statement .)
    VOLATILE        reduce using rule 190 (statement -> for_statement .)
    STRICTFP        reduce using rule 190 (statement -> for_statement .)
    THIS            reduce using rule 190 (statement -> for_statement .)
    SUPER           reduce using rule 190 (statement -> for_statement .)
    PLUSPLUS        reduce using rule 190 (statement -> for_statement .)
    MINUSMINUS      reduce using rule 190 (statement -> for_statement .)
    NEW             reduce using rule 190 (statement -> for_statement .)
    <               reduce using rule 190 (statement -> for_statement .)
    (               reduce using rule 190 (statement -> for_statement .)
    NUM             reduce using rule 190 (statement -> for_statement .)
    CHAR_LITERAL    reduce using rule 190 (statement -> for_statement .)
    STRING_LITERAL  reduce using rule 190 (statement -> for_statement .)
    TRUE            reduce using rule 190 (statement -> for_statement .)
    FALSE           reduce using rule 190 (statement -> for_statement .)
    NULL            reduce using rule 190 (statement -> for_statement .)
    ENUM            reduce using rule 190 (statement -> for_statement .)
    CLASS           reduce using rule 190 (statement -> for_statement .)
    INTERFACE       reduce using rule 190 (statement -> for_statement .)
    }               reduce using rule 190 (statement -> for_statement .)
    $end            reduce using rule 190 (statement -> for_statement .)
    CASE            reduce using rule 190 (statement -> for_statement .)
    DEFAULT         reduce using rule 190 (statement -> for_statement .)


state 70

    (169) block_statement -> local_variable_declaration_statement .

    IF              reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    WHILE           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    FOR             reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    {               reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    ASSERT          reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    ;               reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    SWITCH          reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    DO              reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    BREAK           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    CONTINUE        reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    RETURN          reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    SYNCHRONIZED    reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    THROW           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    TRY             reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    NAME            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    @               reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    BOOLEAN         reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    VOID            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    BYTE            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    SHORT           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    INT             reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    LONG            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    CHAR            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    FLOAT           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    DOUBLE          reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    PUBLIC          reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    PROTECTED       reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    PRIVATE         reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    STATIC          reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    ABSTRACT        reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    FINAL           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    NATIVE          reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    TRANSIENT       reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    VOLATILE        reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    STRICTFP        reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    THIS            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    SUPER           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    PLUSPLUS        reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    MINUSMINUS      reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    NEW             reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    <               reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    (               reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    NUM             reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    CHAR_LITERAL    reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    STRING_LITERAL  reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    TRUE            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    FALSE           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    NULL            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    ENUM            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    CLASS           reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    INTERFACE       reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    }               reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    CASE            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    DEFAULT         reduce using rule 169 (block_statement -> local_variable_declaration_statement .)
    $end            reduce using rule 169 (block_statement -> local_variable_declaration_statement .)


state 71

    (203) statement_without_trailing_substatement -> try_statement .

    $end            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    IF              reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    WHILE           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    FOR             reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    {               reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    ASSERT          reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    ;               reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    SWITCH          reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    DO              reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    BREAK           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    CONTINUE        reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    RETURN          reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    SYNCHRONIZED    reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    THROW           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    TRY             reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    NAME            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    @               reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    BOOLEAN         reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    VOID            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    BYTE            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    SHORT           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    INT             reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    LONG            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    CHAR            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    FLOAT           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    DOUBLE          reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    PUBLIC          reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    PROTECTED       reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    PRIVATE         reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    STATIC          reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    ABSTRACT        reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    FINAL           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    NATIVE          reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    TRANSIENT       reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    VOLATILE        reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    STRICTFP        reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    THIS            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    SUPER           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    PLUSPLUS        reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    MINUSMINUS      reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    NEW             reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    <               reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    (               reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    NUM             reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    CHAR_LITERAL    reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    STRING_LITERAL  reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    TRUE            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    FALSE           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    NULL            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    ENUM            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    CLASS           reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    INTERFACE       reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    }               reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    CASE            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    DEFAULT         reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)
    ELSE            reduce using rule 203 (statement_without_trailing_substatement -> try_statement .)


state 72

    (213) statement_expression -> class_instance_creation_expression .
    (141) primary_no_new_array -> class_instance_creation_expression .

    ;               reduce using rule 213 (statement_expression -> class_instance_creation_expression .)
    ,               reduce using rule 213 (statement_expression -> class_instance_creation_expression .)
    )               reduce using rule 213 (statement_expression -> class_instance_creation_expression .)
    [               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    .               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    PLUSPLUS        reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    MINUSMINUS      reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    =               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    TIMES_ASSIGN    reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    DIVIDE_ASSIGN   reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    REMAINDER_ASSIGN reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    PLUS_ASSIGN     reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    MINUS_ASSIGN    reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    LSHIFT_ASSIGN   reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    RSHIFT_ASSIGN   reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    RRSHIFT_ASSIGN  reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    AND_ASSIGN      reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    OR_ASSIGN       reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    XOR_ASSIGN      reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)


state 73

    (312) explicit_constructor_invocation -> name . . SUPER ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> name . . THIS ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> name . . type_arguments SUPER ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> name . . type_arguments THIS ( argument_list_opt ) ;
    (388) array_type -> name . dims
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (383) class_or_interface -> name .
    (128) postfix_expression -> name .
    (325) class_instance_creation_expression_name -> name . .
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (344) qualified_name -> name . . simple_name
    (330) array_access -> name . [ expression ]
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               shift and go to state 302
    <               reduce using rule 383 (class_or_interface -> name .)
    NAME            reduce using rule 383 (class_or_interface -> name .)
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    =               reduce using rule 128 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 128 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    LSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT_ASSIGN  reduce using rule 128 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    [               shift and go to state 301

    dims                           shift and go to state 300
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 74

    (307) explicit_constructor_invocation -> THIS . ( argument_list_opt ) ;
    (140) primary_no_new_array -> THIS .

    (               shift and go to state 303
    [               reduce using rule 140 (primary_no_new_array -> THIS .)
    .               reduce using rule 140 (primary_no_new_array -> THIS .)
    PLUSPLUS        reduce using rule 140 (primary_no_new_array -> THIS .)
    MINUSMINUS      reduce using rule 140 (primary_no_new_array -> THIS .)
    =               reduce using rule 140 (primary_no_new_array -> THIS .)
    TIMES_ASSIGN    reduce using rule 140 (primary_no_new_array -> THIS .)
    DIVIDE_ASSIGN   reduce using rule 140 (primary_no_new_array -> THIS .)
    REMAINDER_ASSIGN reduce using rule 140 (primary_no_new_array -> THIS .)
    PLUS_ASSIGN     reduce using rule 140 (primary_no_new_array -> THIS .)
    MINUS_ASSIGN    reduce using rule 140 (primary_no_new_array -> THIS .)
    LSHIFT_ASSIGN   reduce using rule 140 (primary_no_new_array -> THIS .)
    RSHIFT_ASSIGN   reduce using rule 140 (primary_no_new_array -> THIS .)
    RRSHIFT_ASSIGN  reduce using rule 140 (primary_no_new_array -> THIS .)
    AND_ASSIGN      reduce using rule 140 (primary_no_new_array -> THIS .)
    OR_ASSIGN       reduce using rule 140 (primary_no_new_array -> THIS .)
    XOR_ASSIGN      reduce using rule 140 (primary_no_new_array -> THIS .)


state 75

    (377) primitive_type -> DOUBLE .

    .               reduce using rule 377 (primitive_type -> DOUBLE .)
    [               reduce using rule 377 (primitive_type -> DOUBLE .)
    NAME            reduce using rule 377 (primitive_type -> DOUBLE .)
    )               reduce using rule 377 (primitive_type -> DOUBLE .)
    |               reduce using rule 377 (primitive_type -> DOUBLE .)
    ELLIPSIS        reduce using rule 377 (primitive_type -> DOUBLE .)


state 76

    (346) literal -> CHAR_LITERAL .

    [               reduce using rule 346 (literal -> CHAR_LITERAL .)
    .               reduce using rule 346 (literal -> CHAR_LITERAL .)
    PLUSPLUS        reduce using rule 346 (literal -> CHAR_LITERAL .)
    MINUSMINUS      reduce using rule 346 (literal -> CHAR_LITERAL .)
    =               reduce using rule 346 (literal -> CHAR_LITERAL .)
    TIMES_ASSIGN    reduce using rule 346 (literal -> CHAR_LITERAL .)
    DIVIDE_ASSIGN   reduce using rule 346 (literal -> CHAR_LITERAL .)
    REMAINDER_ASSIGN reduce using rule 346 (literal -> CHAR_LITERAL .)
    PLUS_ASSIGN     reduce using rule 346 (literal -> CHAR_LITERAL .)
    MINUS_ASSIGN    reduce using rule 346 (literal -> CHAR_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 346 (literal -> CHAR_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 346 (literal -> CHAR_LITERAL .)
    RRSHIFT_ASSIGN  reduce using rule 346 (literal -> CHAR_LITERAL .)
    AND_ASSIGN      reduce using rule 346 (literal -> CHAR_LITERAL .)
    OR_ASSIGN       reduce using rule 346 (literal -> CHAR_LITERAL .)
    XOR_ASSIGN      reduce using rule 346 (literal -> CHAR_LITERAL .)
    *               reduce using rule 346 (literal -> CHAR_LITERAL .)
    /               reduce using rule 346 (literal -> CHAR_LITERAL .)
    %               reduce using rule 346 (literal -> CHAR_LITERAL .)
    +               reduce using rule 346 (literal -> CHAR_LITERAL .)
    -               reduce using rule 346 (literal -> CHAR_LITERAL .)
    LSHIFT          reduce using rule 346 (literal -> CHAR_LITERAL .)
    RSHIFT          reduce using rule 346 (literal -> CHAR_LITERAL .)
    RRSHIFT         reduce using rule 346 (literal -> CHAR_LITERAL .)
    >               reduce using rule 346 (literal -> CHAR_LITERAL .)
    <               reduce using rule 346 (literal -> CHAR_LITERAL .)
    GTEQ            reduce using rule 346 (literal -> CHAR_LITERAL .)
    LTEQ            reduce using rule 346 (literal -> CHAR_LITERAL .)
    INSTANCEOF      reduce using rule 346 (literal -> CHAR_LITERAL .)
    EQ              reduce using rule 346 (literal -> CHAR_LITERAL .)
    NEQ             reduce using rule 346 (literal -> CHAR_LITERAL .)
    &               reduce using rule 346 (literal -> CHAR_LITERAL .)
    ^               reduce using rule 346 (literal -> CHAR_LITERAL .)
    |               reduce using rule 346 (literal -> CHAR_LITERAL .)
    AND             reduce using rule 346 (literal -> CHAR_LITERAL .)
    ?               reduce using rule 346 (literal -> CHAR_LITERAL .)
    OR              reduce using rule 346 (literal -> CHAR_LITERAL .)
    $end            reduce using rule 346 (literal -> CHAR_LITERAL .)
    ,               reduce using rule 346 (literal -> CHAR_LITERAL .)
    )               reduce using rule 346 (literal -> CHAR_LITERAL .)
    }               reduce using rule 346 (literal -> CHAR_LITERAL .)
    ;               reduce using rule 346 (literal -> CHAR_LITERAL .)
    :               reduce using rule 346 (literal -> CHAR_LITERAL .)
    ]               reduce using rule 346 (literal -> CHAR_LITERAL .)


state 77

    (186) statement -> labeled_statement .

    IF              reduce using rule 186 (statement -> labeled_statement .)
    WHILE           reduce using rule 186 (statement -> labeled_statement .)
    FOR             reduce using rule 186 (statement -> labeled_statement .)
    {               reduce using rule 186 (statement -> labeled_statement .)
    ASSERT          reduce using rule 186 (statement -> labeled_statement .)
    ;               reduce using rule 186 (statement -> labeled_statement .)
    SWITCH          reduce using rule 186 (statement -> labeled_statement .)
    DO              reduce using rule 186 (statement -> labeled_statement .)
    BREAK           reduce using rule 186 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 186 (statement -> labeled_statement .)
    RETURN          reduce using rule 186 (statement -> labeled_statement .)
    SYNCHRONIZED    reduce using rule 186 (statement -> labeled_statement .)
    THROW           reduce using rule 186 (statement -> labeled_statement .)
    TRY             reduce using rule 186 (statement -> labeled_statement .)
    NAME            reduce using rule 186 (statement -> labeled_statement .)
    @               reduce using rule 186 (statement -> labeled_statement .)
    BOOLEAN         reduce using rule 186 (statement -> labeled_statement .)
    VOID            reduce using rule 186 (statement -> labeled_statement .)
    BYTE            reduce using rule 186 (statement -> labeled_statement .)
    SHORT           reduce using rule 186 (statement -> labeled_statement .)
    INT             reduce using rule 186 (statement -> labeled_statement .)
    LONG            reduce using rule 186 (statement -> labeled_statement .)
    CHAR            reduce using rule 186 (statement -> labeled_statement .)
    FLOAT           reduce using rule 186 (statement -> labeled_statement .)
    DOUBLE          reduce using rule 186 (statement -> labeled_statement .)
    PUBLIC          reduce using rule 186 (statement -> labeled_statement .)
    PROTECTED       reduce using rule 186 (statement -> labeled_statement .)
    PRIVATE         reduce using rule 186 (statement -> labeled_statement .)
    STATIC          reduce using rule 186 (statement -> labeled_statement .)
    ABSTRACT        reduce using rule 186 (statement -> labeled_statement .)
    FINAL           reduce using rule 186 (statement -> labeled_statement .)
    NATIVE          reduce using rule 186 (statement -> labeled_statement .)
    TRANSIENT       reduce using rule 186 (statement -> labeled_statement .)
    VOLATILE        reduce using rule 186 (statement -> labeled_statement .)
    STRICTFP        reduce using rule 186 (statement -> labeled_statement .)
    THIS            reduce using rule 186 (statement -> labeled_statement .)
    SUPER           reduce using rule 186 (statement -> labeled_statement .)
    PLUSPLUS        reduce using rule 186 (statement -> labeled_statement .)
    MINUSMINUS      reduce using rule 186 (statement -> labeled_statement .)
    NEW             reduce using rule 186 (statement -> labeled_statement .)
    <               reduce using rule 186 (statement -> labeled_statement .)
    (               reduce using rule 186 (statement -> labeled_statement .)
    NUM             reduce using rule 186 (statement -> labeled_statement .)
    CHAR_LITERAL    reduce using rule 186 (statement -> labeled_statement .)
    STRING_LITERAL  reduce using rule 186 (statement -> labeled_statement .)
    TRUE            reduce using rule 186 (statement -> labeled_statement .)
    FALSE           reduce using rule 186 (statement -> labeled_statement .)
    NULL            reduce using rule 186 (statement -> labeled_statement .)
    ENUM            reduce using rule 186 (statement -> labeled_statement .)
    CLASS           reduce using rule 186 (statement -> labeled_statement .)
    INTERFACE       reduce using rule 186 (statement -> labeled_statement .)
    }               reduce using rule 186 (statement -> labeled_statement .)
    $end            reduce using rule 186 (statement -> labeled_statement .)
    CASE            reduce using rule 186 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 186 (statement -> labeled_statement .)


state 78

    (210) statement_expression -> post_increment_expression .
    (129) postfix_expression -> post_increment_expression .

    ;               reduce using rule 210 (statement_expression -> post_increment_expression .)
    ,               reduce using rule 210 (statement_expression -> post_increment_expression .)
    )               reduce using rule 210 (statement_expression -> post_increment_expression .)
    PLUSPLUS        reduce using rule 129 (postfix_expression -> post_increment_expression .)
    MINUSMINUS      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    =               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    TIMES_ASSIGN    reduce using rule 129 (postfix_expression -> post_increment_expression .)
    DIVIDE_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    REMAINDER_ASSIGN reduce using rule 129 (postfix_expression -> post_increment_expression .)
    PLUS_ASSIGN     reduce using rule 129 (postfix_expression -> post_increment_expression .)
    MINUS_ASSIGN    reduce using rule 129 (postfix_expression -> post_increment_expression .)
    LSHIFT_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    RSHIFT_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    RRSHIFT_ASSIGN  reduce using rule 129 (postfix_expression -> post_increment_expression .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> post_increment_expression .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> post_increment_expression .)


state 79

    (209) statement_expression -> pre_decrement_expression .

    ;               reduce using rule 209 (statement_expression -> pre_decrement_expression .)
    ,               reduce using rule 209 (statement_expression -> pre_decrement_expression .)
    )               reduce using rule 209 (statement_expression -> pre_decrement_expression .)


state 80

    (204) statement_without_trailing_substatement -> try_statement_with_resources .

    $end            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    IF              reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    WHILE           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FOR             reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    {               reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ASSERT          reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ;               reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SWITCH          reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    DO              reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    BREAK           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CONTINUE        reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    RETURN          reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SYNCHRONIZED    reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    THROW           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    TRY             reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    NAME            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    @               reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    BOOLEAN         reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    VOID            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    BYTE            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SHORT           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    INT             reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    LONG            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CHAR            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FLOAT           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    DOUBLE          reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    PUBLIC          reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    PROTECTED       reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    PRIVATE         reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    STATIC          reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ABSTRACT        reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FINAL           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    NATIVE          reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    TRANSIENT       reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    VOLATILE        reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    STRICTFP        reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    THIS            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    SUPER           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    PLUSPLUS        reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    MINUSMINUS      reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    NEW             reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    <               reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    (               reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    NUM             reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CHAR_LITERAL    reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    STRING_LITERAL  reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    TRUE            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    FALSE           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    NULL            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ENUM            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CLASS           reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    INTERFACE       reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    }               reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    CASE            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    DEFAULT         reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)
    ELSE            reduce using rule 204 (statement_without_trailing_substatement -> try_statement_with_resources .)


state 81

    (372) primitive_type -> SHORT .

    .               reduce using rule 372 (primitive_type -> SHORT .)
    [               reduce using rule 372 (primitive_type -> SHORT .)
    NAME            reduce using rule 372 (primitive_type -> SHORT .)
    )               reduce using rule 372 (primitive_type -> SHORT .)
    |               reduce using rule 372 (primitive_type -> SHORT .)
    ELLIPSIS        reduce using rule 372 (primitive_type -> SHORT .)


state 82

    (281) return_statement -> RETURN . expression_opt ;
    (244) expression_opt -> . expression
    (245) expression_opt -> . empty
    (1) expression -> . assignment_expression
    (623) empty -> .
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    ;               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    additive_expression            shift and go to state 173
    postfix_expression             shift and go to state 185
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    pre_increment_expression       shift and go to state 168
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 306
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    expression_opt                 shift and go to state 304
    cast_expression                shift and go to state 177
    class_instance_creation_expression shift and go to state 156
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 305
    conditional_and_expression     shift and go to state 161

state 83

    (172) block_statement -> interface_declaration .

    IF              reduce using rule 172 (block_statement -> interface_declaration .)
    WHILE           reduce using rule 172 (block_statement -> interface_declaration .)
    FOR             reduce using rule 172 (block_statement -> interface_declaration .)
    {               reduce using rule 172 (block_statement -> interface_declaration .)
    ASSERT          reduce using rule 172 (block_statement -> interface_declaration .)
    ;               reduce using rule 172 (block_statement -> interface_declaration .)
    SWITCH          reduce using rule 172 (block_statement -> interface_declaration .)
    DO              reduce using rule 172 (block_statement -> interface_declaration .)
    BREAK           reduce using rule 172 (block_statement -> interface_declaration .)
    CONTINUE        reduce using rule 172 (block_statement -> interface_declaration .)
    RETURN          reduce using rule 172 (block_statement -> interface_declaration .)
    SYNCHRONIZED    reduce using rule 172 (block_statement -> interface_declaration .)
    THROW           reduce using rule 172 (block_statement -> interface_declaration .)
    TRY             reduce using rule 172 (block_statement -> interface_declaration .)
    NAME            reduce using rule 172 (block_statement -> interface_declaration .)
    @               reduce using rule 172 (block_statement -> interface_declaration .)
    BOOLEAN         reduce using rule 172 (block_statement -> interface_declaration .)
    VOID            reduce using rule 172 (block_statement -> interface_declaration .)
    BYTE            reduce using rule 172 (block_statement -> interface_declaration .)
    SHORT           reduce using rule 172 (block_statement -> interface_declaration .)
    INT             reduce using rule 172 (block_statement -> interface_declaration .)
    LONG            reduce using rule 172 (block_statement -> interface_declaration .)
    CHAR            reduce using rule 172 (block_statement -> interface_declaration .)
    FLOAT           reduce using rule 172 (block_statement -> interface_declaration .)
    DOUBLE          reduce using rule 172 (block_statement -> interface_declaration .)
    PUBLIC          reduce using rule 172 (block_statement -> interface_declaration .)
    PROTECTED       reduce using rule 172 (block_statement -> interface_declaration .)
    PRIVATE         reduce using rule 172 (block_statement -> interface_declaration .)
    STATIC          reduce using rule 172 (block_statement -> interface_declaration .)
    ABSTRACT        reduce using rule 172 (block_statement -> interface_declaration .)
    FINAL           reduce using rule 172 (block_statement -> interface_declaration .)
    NATIVE          reduce using rule 172 (block_statement -> interface_declaration .)
    TRANSIENT       reduce using rule 172 (block_statement -> interface_declaration .)
    VOLATILE        reduce using rule 172 (block_statement -> interface_declaration .)
    STRICTFP        reduce using rule 172 (block_statement -> interface_declaration .)
    THIS            reduce using rule 172 (block_statement -> interface_declaration .)
    SUPER           reduce using rule 172 (block_statement -> interface_declaration .)
    PLUSPLUS        reduce using rule 172 (block_statement -> interface_declaration .)
    MINUSMINUS      reduce using rule 172 (block_statement -> interface_declaration .)
    NEW             reduce using rule 172 (block_statement -> interface_declaration .)
    <               reduce using rule 172 (block_statement -> interface_declaration .)
    (               reduce using rule 172 (block_statement -> interface_declaration .)
    NUM             reduce using rule 172 (block_statement -> interface_declaration .)
    CHAR_LITERAL    reduce using rule 172 (block_statement -> interface_declaration .)
    STRING_LITERAL  reduce using rule 172 (block_statement -> interface_declaration .)
    TRUE            reduce using rule 172 (block_statement -> interface_declaration .)
    FALSE           reduce using rule 172 (block_statement -> interface_declaration .)
    NULL            reduce using rule 172 (block_statement -> interface_declaration .)
    ENUM            reduce using rule 172 (block_statement -> interface_declaration .)
    CLASS           reduce using rule 172 (block_statement -> interface_declaration .)
    INTERFACE       reduce using rule 172 (block_statement -> interface_declaration .)
    }               reduce using rule 172 (block_statement -> interface_declaration .)
    CASE            reduce using rule 172 (block_statement -> interface_declaration .)
    DEFAULT         reduce using rule 172 (block_statement -> interface_declaration .)
    $end            reduce using rule 172 (block_statement -> interface_declaration .)


state 84

    (282) synchronized_statement -> SYNCHRONIZED . ( expression ) block
    (362) modifier -> SYNCHRONIZED .

    (               shift and go to state 307
    @               reduce using rule 362 (modifier -> SYNCHRONIZED .)
    PUBLIC          reduce using rule 362 (modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 362 (modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 362 (modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 362 (modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 362 (modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 362 (modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 362 (modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 362 (modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 362 (modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 362 (modifier -> SYNCHRONIZED .)
    STRICTFP        reduce using rule 362 (modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 362 (modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 362 (modifier -> SYNCHRONIZED .)
    INT             reduce using rule 362 (modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 362 (modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 362 (modifier -> SYNCHRONIZED .)
    NAME            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    ENUM            reduce using rule 362 (modifier -> SYNCHRONIZED .)
    CLASS           reduce using rule 362 (modifier -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 362 (modifier -> SYNCHRONIZED .)


state 85

    (309) explicit_constructor_invocation -> type_arguments . SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> type_arguments . THIS ( argument_list_opt ) ;

    SUPER           shift and go to state 309
    THIS            shift and go to state 308


state 86

    (198) statement_without_trailing_substatement -> break_statement .

    $end            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    IF              reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    WHILE           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    FOR             reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    {               reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    ASSERT          reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    ;               reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    SWITCH          reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    DO              reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    BREAK           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    CONTINUE        reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    RETURN          reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    SYNCHRONIZED    reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    THROW           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    TRY             reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    NAME            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    @               reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    BOOLEAN         reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    VOID            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    BYTE            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    SHORT           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    INT             reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    LONG            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    CHAR            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    FLOAT           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    DOUBLE          reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    PUBLIC          reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    PROTECTED       reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    PRIVATE         reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    STATIC          reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    ABSTRACT        reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    FINAL           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    NATIVE          reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    TRANSIENT       reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    VOLATILE        reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    STRICTFP        reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    THIS            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    SUPER           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    PLUSPLUS        reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    MINUSMINUS      reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    NEW             reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    <               reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    (               reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    NUM             reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    CHAR_LITERAL    reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    STRING_LITERAL  reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    TRUE            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    FALSE           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    NULL            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    ENUM            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    CLASS           reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    INTERFACE       reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    }               reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    CASE            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    DEFAULT         reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)
    ELSE            reduce using rule 198 (statement_without_trailing_substatement -> break_statement .)


state 87

    (136) primary -> primary_no_new_array .
    (331) array_access -> primary_no_new_array . [ expression ]

    .               reduce using rule 136 (primary -> primary_no_new_array .)
    PLUSPLUS        reduce using rule 136 (primary -> primary_no_new_array .)
    MINUSMINUS      reduce using rule 136 (primary -> primary_no_new_array .)
    =               reduce using rule 136 (primary -> primary_no_new_array .)
    TIMES_ASSIGN    reduce using rule 136 (primary -> primary_no_new_array .)
    DIVIDE_ASSIGN   reduce using rule 136 (primary -> primary_no_new_array .)
    REMAINDER_ASSIGN reduce using rule 136 (primary -> primary_no_new_array .)
    PLUS_ASSIGN     reduce using rule 136 (primary -> primary_no_new_array .)
    MINUS_ASSIGN    reduce using rule 136 (primary -> primary_no_new_array .)
    LSHIFT_ASSIGN   reduce using rule 136 (primary -> primary_no_new_array .)
    RSHIFT_ASSIGN   reduce using rule 136 (primary -> primary_no_new_array .)
    RRSHIFT_ASSIGN  reduce using rule 136 (primary -> primary_no_new_array .)
    AND_ASSIGN      reduce using rule 136 (primary -> primary_no_new_array .)
    OR_ASSIGN       reduce using rule 136 (primary -> primary_no_new_array .)
    XOR_ASSIGN      reduce using rule 136 (primary -> primary_no_new_array .)
    *               reduce using rule 136 (primary -> primary_no_new_array .)
    /               reduce using rule 136 (primary -> primary_no_new_array .)
    %               reduce using rule 136 (primary -> primary_no_new_array .)
    +               reduce using rule 136 (primary -> primary_no_new_array .)
    -               reduce using rule 136 (primary -> primary_no_new_array .)
    LSHIFT          reduce using rule 136 (primary -> primary_no_new_array .)
    RSHIFT          reduce using rule 136 (primary -> primary_no_new_array .)
    RRSHIFT         reduce using rule 136 (primary -> primary_no_new_array .)
    >               reduce using rule 136 (primary -> primary_no_new_array .)
    <               reduce using rule 136 (primary -> primary_no_new_array .)
    GTEQ            reduce using rule 136 (primary -> primary_no_new_array .)
    LTEQ            reduce using rule 136 (primary -> primary_no_new_array .)
    INSTANCEOF      reduce using rule 136 (primary -> primary_no_new_array .)
    EQ              reduce using rule 136 (primary -> primary_no_new_array .)
    NEQ             reduce using rule 136 (primary -> primary_no_new_array .)
    &               reduce using rule 136 (primary -> primary_no_new_array .)
    ^               reduce using rule 136 (primary -> primary_no_new_array .)
    |               reduce using rule 136 (primary -> primary_no_new_array .)
    AND             reduce using rule 136 (primary -> primary_no_new_array .)
    ?               reduce using rule 136 (primary -> primary_no_new_array .)
    OR              reduce using rule 136 (primary -> primary_no_new_array .)
    ,               reduce using rule 136 (primary -> primary_no_new_array .)
    )               reduce using rule 136 (primary -> primary_no_new_array .)
    }               reduce using rule 136 (primary -> primary_no_new_array .)
    ;               reduce using rule 136 (primary -> primary_no_new_array .)
    $end            reduce using rule 136 (primary -> primary_no_new_array .)
    :               reduce using rule 136 (primary -> primary_no_new_array .)
    ]               reduce using rule 136 (primary -> primary_no_new_array .)
    [               shift and go to state 310


state 88

    (378) reference_type -> class_or_interface_type .

    >               reduce using rule 378 (reference_type -> class_or_interface_type .)
    ,               reduce using rule 378 (reference_type -> class_or_interface_type .)
    INSTANCEOF      reduce using rule 378 (reference_type -> class_or_interface_type .)
    EQ              reduce using rule 378 (reference_type -> class_or_interface_type .)
    NEQ             reduce using rule 378 (reference_type -> class_or_interface_type .)
    &               reduce using rule 378 (reference_type -> class_or_interface_type .)
    ^               reduce using rule 378 (reference_type -> class_or_interface_type .)
    |               reduce using rule 378 (reference_type -> class_or_interface_type .)
    AND             reduce using rule 378 (reference_type -> class_or_interface_type .)
    ?               reduce using rule 378 (reference_type -> class_or_interface_type .)
    OR              reduce using rule 378 (reference_type -> class_or_interface_type .)
    )               reduce using rule 378 (reference_type -> class_or_interface_type .)
    }               reduce using rule 378 (reference_type -> class_or_interface_type .)
    ;               reduce using rule 378 (reference_type -> class_or_interface_type .)
    NAME            reduce using rule 378 (reference_type -> class_or_interface_type .)
    RRSHIFT         reduce using rule 378 (reference_type -> class_or_interface_type .)
    RSHIFT          reduce using rule 378 (reference_type -> class_or_interface_type .)
    $end            reduce using rule 378 (reference_type -> class_or_interface_type .)
    :               reduce using rule 378 (reference_type -> class_or_interface_type .)
    ]               reduce using rule 378 (reference_type -> class_or_interface_type .)
    ELLIPSIS        reduce using rule 378 (reference_type -> class_or_interface_type .)


state 89

    (196) statement_without_trailing_substatement -> switch_statement .

    $end            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    IF              reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    WHILE           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    FOR             reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    {               reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    ASSERT          reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    ;               reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    SWITCH          reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    DO              reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    BREAK           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    CONTINUE        reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    RETURN          reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    SYNCHRONIZED    reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    THROW           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    TRY             reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    NAME            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    @               reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    BOOLEAN         reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    VOID            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    BYTE            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    SHORT           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    INT             reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    LONG            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    CHAR            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    FLOAT           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    DOUBLE          reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    PUBLIC          reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    PROTECTED       reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    PRIVATE         reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    STATIC          reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    ABSTRACT        reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    FINAL           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    NATIVE          reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    TRANSIENT       reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    VOLATILE        reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    STRICTFP        reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    THIS            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    SUPER           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    PLUSPLUS        reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    MINUSMINUS      reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    NEW             reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    <               reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    (               reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    NUM             reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    CHAR_LITERAL    reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    STRING_LITERAL  reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    TRUE            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    FALSE           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    NULL            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    ENUM            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    CLASS           reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    INTERFACE       reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    }               reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    CASE            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    DEFAULT         reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)
    ELSE            reduce using rule 196 (statement_without_trailing_substatement -> switch_statement .)


state 90

    (144) primary_no_new_array -> array_access .

    [               reduce using rule 144 (primary_no_new_array -> array_access .)
    .               reduce using rule 144 (primary_no_new_array -> array_access .)
    PLUSPLUS        reduce using rule 144 (primary_no_new_array -> array_access .)
    MINUSMINUS      reduce using rule 144 (primary_no_new_array -> array_access .)
    ;               reduce using rule 144 (primary_no_new_array -> array_access .)
    *               reduce using rule 144 (primary_no_new_array -> array_access .)
    /               reduce using rule 144 (primary_no_new_array -> array_access .)
    %               reduce using rule 144 (primary_no_new_array -> array_access .)
    +               reduce using rule 144 (primary_no_new_array -> array_access .)
    -               reduce using rule 144 (primary_no_new_array -> array_access .)
    LSHIFT          reduce using rule 144 (primary_no_new_array -> array_access .)
    RSHIFT          reduce using rule 144 (primary_no_new_array -> array_access .)
    RRSHIFT         reduce using rule 144 (primary_no_new_array -> array_access .)
    >               reduce using rule 144 (primary_no_new_array -> array_access .)
    <               reduce using rule 144 (primary_no_new_array -> array_access .)
    GTEQ            reduce using rule 144 (primary_no_new_array -> array_access .)
    LTEQ            reduce using rule 144 (primary_no_new_array -> array_access .)
    INSTANCEOF      reduce using rule 144 (primary_no_new_array -> array_access .)
    EQ              reduce using rule 144 (primary_no_new_array -> array_access .)
    NEQ             reduce using rule 144 (primary_no_new_array -> array_access .)
    &               reduce using rule 144 (primary_no_new_array -> array_access .)
    ^               reduce using rule 144 (primary_no_new_array -> array_access .)
    |               reduce using rule 144 (primary_no_new_array -> array_access .)
    AND             reduce using rule 144 (primary_no_new_array -> array_access .)
    ?               reduce using rule 144 (primary_no_new_array -> array_access .)
    OR              reduce using rule 144 (primary_no_new_array -> array_access .)
    $end            reduce using rule 144 (primary_no_new_array -> array_access .)
    )               reduce using rule 144 (primary_no_new_array -> array_access .)
    :               reduce using rule 144 (primary_no_new_array -> array_access .)
    ]               reduce using rule 144 (primary_no_new_array -> array_access .)
    ,               reduce using rule 144 (primary_no_new_array -> array_access .)
    }               reduce using rule 144 (primary_no_new_array -> array_access .)
    =               reduce using rule 144 (primary_no_new_array -> array_access .)
    TIMES_ASSIGN    reduce using rule 144 (primary_no_new_array -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 144 (primary_no_new_array -> array_access .)
    REMAINDER_ASSIGN reduce using rule 144 (primary_no_new_array -> array_access .)
    PLUS_ASSIGN     reduce using rule 144 (primary_no_new_array -> array_access .)
    MINUS_ASSIGN    reduce using rule 144 (primary_no_new_array -> array_access .)
    LSHIFT_ASSIGN   reduce using rule 144 (primary_no_new_array -> array_access .)
    RSHIFT_ASSIGN   reduce using rule 144 (primary_no_new_array -> array_access .)
    RRSHIFT_ASSIGN  reduce using rule 144 (primary_no_new_array -> array_access .)
    AND_ASSIGN      reduce using rule 144 (primary_no_new_array -> array_access .)
    OR_ASSIGN       reduce using rule 144 (primary_no_new_array -> array_access .)
    XOR_ASSIGN      reduce using rule 144 (primary_no_new_array -> array_access .)


state 91

    (368) type -> reference_type .

    NAME            reduce using rule 368 (type -> reference_type .)
    |               reduce using rule 368 (type -> reference_type .)
    ELLIPSIS        reduce using rule 368 (type -> reference_type .)


state 92

    (228) labeled_statement -> label . : statement

    :               shift and go to state 311


state 93

    (199) statement_without_trailing_substatement -> continue_statement .

    $end            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    IF              reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    WHILE           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    FOR             reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    {               reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    ASSERT          reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    ;               reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    SWITCH          reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    DO              reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    BREAK           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    CONTINUE        reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    RETURN          reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    SYNCHRONIZED    reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    THROW           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    TRY             reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    NAME            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    @               reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    BOOLEAN         reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    VOID            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    BYTE            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    SHORT           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    INT             reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    LONG            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    CHAR            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    FLOAT           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    DOUBLE          reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    PUBLIC          reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    PROTECTED       reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    PRIVATE         reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    STATIC          reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    ABSTRACT        reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    FINAL           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    NATIVE          reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    TRANSIENT       reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    VOLATILE        reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    STRICTFP        reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    THIS            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    SUPER           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    PLUSPLUS        reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    MINUSMINUS      reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    NEW             reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    <               reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    (               reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    NUM             reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    CHAR_LITERAL    reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    STRING_LITERAL  reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    TRUE            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    FALSE           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    NULL            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    ENUM            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    CLASS           reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    INTERFACE       reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    }               reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    CASE            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    DEFAULT         reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)
    ELSE            reduce using rule 199 (statement_without_trailing_substatement -> continue_statement .)


state 94

    (262) empty_statement -> ; .

    IF              reduce using rule 262 (empty_statement -> ; .)
    WHILE           reduce using rule 262 (empty_statement -> ; .)
    FOR             reduce using rule 262 (empty_statement -> ; .)
    {               reduce using rule 262 (empty_statement -> ; .)
    ASSERT          reduce using rule 262 (empty_statement -> ; .)
    ;               reduce using rule 262 (empty_statement -> ; .)
    SWITCH          reduce using rule 262 (empty_statement -> ; .)
    DO              reduce using rule 262 (empty_statement -> ; .)
    BREAK           reduce using rule 262 (empty_statement -> ; .)
    CONTINUE        reduce using rule 262 (empty_statement -> ; .)
    RETURN          reduce using rule 262 (empty_statement -> ; .)
    SYNCHRONIZED    reduce using rule 262 (empty_statement -> ; .)
    THROW           reduce using rule 262 (empty_statement -> ; .)
    TRY             reduce using rule 262 (empty_statement -> ; .)
    NAME            reduce using rule 262 (empty_statement -> ; .)
    @               reduce using rule 262 (empty_statement -> ; .)
    BOOLEAN         reduce using rule 262 (empty_statement -> ; .)
    VOID            reduce using rule 262 (empty_statement -> ; .)
    BYTE            reduce using rule 262 (empty_statement -> ; .)
    SHORT           reduce using rule 262 (empty_statement -> ; .)
    INT             reduce using rule 262 (empty_statement -> ; .)
    LONG            reduce using rule 262 (empty_statement -> ; .)
    CHAR            reduce using rule 262 (empty_statement -> ; .)
    FLOAT           reduce using rule 262 (empty_statement -> ; .)
    DOUBLE          reduce using rule 262 (empty_statement -> ; .)
    PUBLIC          reduce using rule 262 (empty_statement -> ; .)
    PROTECTED       reduce using rule 262 (empty_statement -> ; .)
    PRIVATE         reduce using rule 262 (empty_statement -> ; .)
    STATIC          reduce using rule 262 (empty_statement -> ; .)
    ABSTRACT        reduce using rule 262 (empty_statement -> ; .)
    FINAL           reduce using rule 262 (empty_statement -> ; .)
    NATIVE          reduce using rule 262 (empty_statement -> ; .)
    TRANSIENT       reduce using rule 262 (empty_statement -> ; .)
    VOLATILE        reduce using rule 262 (empty_statement -> ; .)
    STRICTFP        reduce using rule 262 (empty_statement -> ; .)
    THIS            reduce using rule 262 (empty_statement -> ; .)
    SUPER           reduce using rule 262 (empty_statement -> ; .)
    PLUSPLUS        reduce using rule 262 (empty_statement -> ; .)
    MINUSMINUS      reduce using rule 262 (empty_statement -> ; .)
    NEW             reduce using rule 262 (empty_statement -> ; .)
    <               reduce using rule 262 (empty_statement -> ; .)
    (               reduce using rule 262 (empty_statement -> ; .)
    NUM             reduce using rule 262 (empty_statement -> ; .)
    CHAR_LITERAL    reduce using rule 262 (empty_statement -> ; .)
    STRING_LITERAL  reduce using rule 262 (empty_statement -> ; .)
    TRUE            reduce using rule 262 (empty_statement -> ; .)
    FALSE           reduce using rule 262 (empty_statement -> ; .)
    NULL            reduce using rule 262 (empty_statement -> ; .)
    ENUM            reduce using rule 262 (empty_statement -> ; .)
    CLASS           reduce using rule 262 (empty_statement -> ; .)
    INTERFACE       reduce using rule 262 (empty_statement -> ; .)
    }               reduce using rule 262 (empty_statement -> ; .)
    CASE            reduce using rule 262 (empty_statement -> ; .)
    DEFAULT         reduce using rule 262 (empty_statement -> ; .)
    $end            reduce using rule 262 (empty_statement -> ; .)
    ELSE            reduce using rule 262 (empty_statement -> ; .)


state 95

    (138) primary -> array_creation_without_array_initializer .

    .               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    PLUSPLUS        reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    MINUSMINUS      reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    =               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    TIMES_ASSIGN    reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    DIVIDE_ASSIGN   reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    REMAINDER_ASSIGN reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    PLUS_ASSIGN     reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    MINUS_ASSIGN    reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    LSHIFT_ASSIGN   reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    RSHIFT_ASSIGN   reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    RRSHIFT_ASSIGN  reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    AND_ASSIGN      reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    OR_ASSIGN       reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    XOR_ASSIGN      reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    *               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    /               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    %               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    +               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    -               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    LSHIFT          reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    RSHIFT          reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    RRSHIFT         reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    >               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    <               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    GTEQ            reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    LTEQ            reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    INSTANCEOF      reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    EQ              reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    NEQ             reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    &               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    ^               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    |               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    AND             reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    ?               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    OR              reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    ,               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    )               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    }               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    ;               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    $end            reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    :               reduce using rule 138 (primary -> array_creation_without_array_initializer .)
    ]               reduce using rule 138 (primary -> array_creation_without_array_initializer .)


state 96

    (142) primary_no_new_array -> field_access .

    [               reduce using rule 142 (primary_no_new_array -> field_access .)
    .               reduce using rule 142 (primary_no_new_array -> field_access .)
    PLUSPLUS        reduce using rule 142 (primary_no_new_array -> field_access .)
    MINUSMINUS      reduce using rule 142 (primary_no_new_array -> field_access .)
    ;               reduce using rule 142 (primary_no_new_array -> field_access .)
    *               reduce using rule 142 (primary_no_new_array -> field_access .)
    /               reduce using rule 142 (primary_no_new_array -> field_access .)
    %               reduce using rule 142 (primary_no_new_array -> field_access .)
    +               reduce using rule 142 (primary_no_new_array -> field_access .)
    -               reduce using rule 142 (primary_no_new_array -> field_access .)
    LSHIFT          reduce using rule 142 (primary_no_new_array -> field_access .)
    RSHIFT          reduce using rule 142 (primary_no_new_array -> field_access .)
    RRSHIFT         reduce using rule 142 (primary_no_new_array -> field_access .)
    >               reduce using rule 142 (primary_no_new_array -> field_access .)
    <               reduce using rule 142 (primary_no_new_array -> field_access .)
    GTEQ            reduce using rule 142 (primary_no_new_array -> field_access .)
    LTEQ            reduce using rule 142 (primary_no_new_array -> field_access .)
    INSTANCEOF      reduce using rule 142 (primary_no_new_array -> field_access .)
    EQ              reduce using rule 142 (primary_no_new_array -> field_access .)
    NEQ             reduce using rule 142 (primary_no_new_array -> field_access .)
    &               reduce using rule 142 (primary_no_new_array -> field_access .)
    ^               reduce using rule 142 (primary_no_new_array -> field_access .)
    |               reduce using rule 142 (primary_no_new_array -> field_access .)
    AND             reduce using rule 142 (primary_no_new_array -> field_access .)
    ?               reduce using rule 142 (primary_no_new_array -> field_access .)
    OR              reduce using rule 142 (primary_no_new_array -> field_access .)
    $end            reduce using rule 142 (primary_no_new_array -> field_access .)
    )               reduce using rule 142 (primary_no_new_array -> field_access .)
    :               reduce using rule 142 (primary_no_new_array -> field_access .)
    ]               reduce using rule 142 (primary_no_new_array -> field_access .)
    ,               reduce using rule 142 (primary_no_new_array -> field_access .)
    }               reduce using rule 142 (primary_no_new_array -> field_access .)
    =               reduce using rule 142 (primary_no_new_array -> field_access .)
    TIMES_ASSIGN    reduce using rule 142 (primary_no_new_array -> field_access .)
    DIVIDE_ASSIGN   reduce using rule 142 (primary_no_new_array -> field_access .)
    REMAINDER_ASSIGN reduce using rule 142 (primary_no_new_array -> field_access .)
    PLUS_ASSIGN     reduce using rule 142 (primary_no_new_array -> field_access .)
    MINUS_ASSIGN    reduce using rule 142 (primary_no_new_array -> field_access .)
    LSHIFT_ASSIGN   reduce using rule 142 (primary_no_new_array -> field_access .)
    RSHIFT_ASSIGN   reduce using rule 142 (primary_no_new_array -> field_access .)
    RRSHIFT_ASSIGN  reduce using rule 142 (primary_no_new_array -> field_access .)
    AND_ASSIGN      reduce using rule 142 (primary_no_new_array -> field_access .)
    OR_ASSIGN       reduce using rule 142 (primary_no_new_array -> field_access .)
    XOR_ASSIGN      reduce using rule 142 (primary_no_new_array -> field_access .)


state 97

    (236) for_statement -> FOR . ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (252) enhanced_for_statement_header_init -> FOR . ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> FOR . ( modifiers type NAME dims_opt

    (               shift and go to state 312


state 98

    (117) pre_increment_expression -> PLUSPLUS . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 313
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 99

    (185) statement -> statement_without_trailing_substatement .

    IF              reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    WHILE           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    FOR             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    {               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ASSERT          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ;               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    SWITCH          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    DO              reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    BREAK           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CONTINUE        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    RETURN          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    SYNCHRONIZED    reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    THROW           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    TRY             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NAME            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    @               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    BOOLEAN         reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    VOID            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    BYTE            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    SHORT           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    INT             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    LONG            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CHAR            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    FLOAT           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    DOUBLE          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    PUBLIC          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    PROTECTED       reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    PRIVATE         reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    STATIC          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ABSTRACT        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    FINAL           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NATIVE          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    TRANSIENT       reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    VOLATILE        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    STRICTFP        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    THIS            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    SUPER           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    PLUSPLUS        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    MINUSMINUS      reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NEW             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    <               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    (               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NUM             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CHAR_LITERAL    reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    STRING_LITERAL  reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    TRUE            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    FALSE           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NULL            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ENUM            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CLASS           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    INTERFACE       reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    }               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    $end            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CASE            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    DEFAULT         reduce using rule 185 (statement -> statement_without_trailing_substatement .)


state 100

    (284) try_statement -> TRY . try_block catches
    (285) try_statement -> TRY . try_block catches_opt finally
    (296) try_statement_with_resources -> TRY . resource_specification try_block catches_opt
    (297) try_statement_with_resources -> TRY . resource_specification try_block catches_opt finally
    (286) try_block -> . block
    (298) resource_specification -> . ( resources semi_opt )
    (164) block -> . { block_statements_opt }

    (               shift and go to state 316
    {               shift and go to state 106

    try_block                      shift and go to state 317
    resource_specification         shift and go to state 318
    block                          shift and go to state 319

state 101

    (137) primary -> array_creation_with_array_initializer .
    (332) array_access -> array_creation_with_array_initializer . [ expression ]

    .               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    PLUSPLUS        reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    MINUSMINUS      reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    =               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    TIMES_ASSIGN    reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    DIVIDE_ASSIGN   reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    REMAINDER_ASSIGN reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    PLUS_ASSIGN     reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    MINUS_ASSIGN    reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    LSHIFT_ASSIGN   reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    RSHIFT_ASSIGN   reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    RRSHIFT_ASSIGN  reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    AND_ASSIGN      reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    OR_ASSIGN       reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    XOR_ASSIGN      reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    *               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    /               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    %               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    +               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    -               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    LSHIFT          reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    RSHIFT          reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    RRSHIFT         reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    >               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    <               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    GTEQ            reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    LTEQ            reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    INSTANCEOF      reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    EQ              reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    NEQ             reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    &               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    ^               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    |               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    AND             reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    ?               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    OR              reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    ,               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    )               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    }               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    ;               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    $end            reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    :               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    ]               reduce using rule 137 (primary -> array_creation_with_array_initializer .)
    [               shift and go to state 320


state 102

    (379) reference_type -> array_type .

    >               reduce using rule 379 (reference_type -> array_type .)
    ,               reduce using rule 379 (reference_type -> array_type .)
    INSTANCEOF      reduce using rule 379 (reference_type -> array_type .)
    EQ              reduce using rule 379 (reference_type -> array_type .)
    NEQ             reduce using rule 379 (reference_type -> array_type .)
    &               reduce using rule 379 (reference_type -> array_type .)
    ^               reduce using rule 379 (reference_type -> array_type .)
    |               reduce using rule 379 (reference_type -> array_type .)
    AND             reduce using rule 379 (reference_type -> array_type .)
    ?               reduce using rule 379 (reference_type -> array_type .)
    OR              reduce using rule 379 (reference_type -> array_type .)
    )               reduce using rule 379 (reference_type -> array_type .)
    }               reduce using rule 379 (reference_type -> array_type .)
    ;               reduce using rule 379 (reference_type -> array_type .)
    NAME            reduce using rule 379 (reference_type -> array_type .)
    RRSHIFT         reduce using rule 379 (reference_type -> array_type .)
    RSHIFT          reduce using rule 379 (reference_type -> array_type .)
    $end            reduce using rule 379 (reference_type -> array_type .)
    :               reduce using rule 379 (reference_type -> array_type .)
    ]               reduce using rule 379 (reference_type -> array_type .)
    ELLIPSIS        reduce using rule 379 (reference_type -> array_type .)


state 103

    (208) statement_expression -> pre_increment_expression .

    ;               reduce using rule 208 (statement_expression -> pre_increment_expression .)
    ,               reduce using rule 208 (statement_expression -> pre_increment_expression .)
    )               reduce using rule 208 (statement_expression -> pre_increment_expression .)


state 104

    (279) continue_statement -> CONTINUE . ;
    (280) continue_statement -> CONTINUE . NAME ;

    ;               shift and go to state 321
    NAME            shift and go to state 322


state 105

    (251) enhanced_for_statement_header -> enhanced_for_statement_header_init . : expression )

    :               shift and go to state 323


state 106

    (164) block -> { . block_statements_opt }
    (165) block_statements_opt -> . block_statements
    (166) block_statements_opt -> . empty
    (167) block_statements -> . block_statement
    (168) block_statements -> . block_statements block_statement
    (623) empty -> .
    (169) block_statement -> . local_variable_declaration_statement
    (170) block_statement -> . statement
    (171) block_statement -> . class_declaration
    (172) block_statement -> . interface_declaration
    (173) block_statement -> . annotation_type_declaration
    (174) block_statement -> . enum_declaration
    (175) local_variable_declaration_statement -> . local_variable_declaration ;
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (529) enum_declaration -> . enum_header enum_body
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    }               reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 84
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    @               shift and go to state 30
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    expression_statement           shift and go to state 54
    enum_header                    shift and go to state 7
    explicit_constructor_invocation shift and go to state 55
    throw_statement                shift and go to state 57
    generic_type                   shift and go to state 58
    post_decrement_expression      shift and go to state 60
    block_statements_opt           shift and go to state 324
    assert_statement               shift and go to state 61
    statement_expression           shift and go to state 66
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    local_variable_declaration_statement shift and go to state 70
    try_statement                  shift and go to state 71
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 73
    labeled_statement              shift and go to state 77
    post_increment_expression      shift and go to state 78
    enum_header_name               shift and go to state 43
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    interface_declaration          shift and go to state 83
    type_arguments                 shift and go to state 85
    break_statement                shift and go to state 86
    class_or_interface_type        shift and go to state 88
    switch_statement               shift and go to state 89
    array_access                   shift and go to state 90
    single_member_annotation       shift and go to state 18
    reference_type                 shift and go to state 91
    label                          shift and go to state 92
    continue_statement             shift and go to state 93
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    statement_without_trailing_substatement shift and go to state 99
    array_creation_with_array_initializer shift and go to state 101
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation_name                shift and go to state 38
    interface_header_name          shift and go to state 14
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_header_init shift and go to state 105
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108
    modifiers_opt                  shift and go to state 26
    primary                        shift and go to state 109
    marker_annotation              shift and go to state 22
    block_statement                shift and go to state 325
    if_then_statement              shift and go to state 113
    array_creation_without_array_initializer shift and go to state 95
    while_statement                shift and go to state 65
    synchronized_statement         shift and go to state 115
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    statement                      shift and go to state 119
    method_invocation              shift and go to state 120
    empty                          shift and go to state 326
    annotation_type_declaration_header_name shift and go to state 31
    class_instance_creation_expression_name shift and go to state 122
    class_header                   shift and go to state 36
    modifiers                      shift and go to state 125
    type                           shift and go to state 128
    enum_declaration               shift and go to state 129
    empty_statement                shift and go to state 130
    local_variable_declaration     shift and go to state 134
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 135
    enhanced_for_statement         shift and go to state 138
    class_header_name1             shift and go to state 8
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    qualified_name                 shift and go to state 141
    class_header_name              shift and go to state 5
    postfix_expression             shift and go to state 59
    return_statement               shift and go to state 142
    do_statement                   shift and go to state 143
    block_statements               shift and go to state 327
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    annotation                     shift and go to state 10
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 151

state 107

    (192) statement_without_trailing_substatement -> block .

    $end            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    IF              reduce using rule 192 (statement_without_trailing_substatement -> block .)
    WHILE           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    FOR             reduce using rule 192 (statement_without_trailing_substatement -> block .)
    {               reduce using rule 192 (statement_without_trailing_substatement -> block .)
    ASSERT          reduce using rule 192 (statement_without_trailing_substatement -> block .)
    ;               reduce using rule 192 (statement_without_trailing_substatement -> block .)
    SWITCH          reduce using rule 192 (statement_without_trailing_substatement -> block .)
    DO              reduce using rule 192 (statement_without_trailing_substatement -> block .)
    BREAK           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    CONTINUE        reduce using rule 192 (statement_without_trailing_substatement -> block .)
    RETURN          reduce using rule 192 (statement_without_trailing_substatement -> block .)
    SYNCHRONIZED    reduce using rule 192 (statement_without_trailing_substatement -> block .)
    THROW           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    TRY             reduce using rule 192 (statement_without_trailing_substatement -> block .)
    NAME            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    @               reduce using rule 192 (statement_without_trailing_substatement -> block .)
    BOOLEAN         reduce using rule 192 (statement_without_trailing_substatement -> block .)
    VOID            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    BYTE            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    SHORT           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    INT             reduce using rule 192 (statement_without_trailing_substatement -> block .)
    LONG            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    CHAR            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    FLOAT           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    DOUBLE          reduce using rule 192 (statement_without_trailing_substatement -> block .)
    PUBLIC          reduce using rule 192 (statement_without_trailing_substatement -> block .)
    PROTECTED       reduce using rule 192 (statement_without_trailing_substatement -> block .)
    PRIVATE         reduce using rule 192 (statement_without_trailing_substatement -> block .)
    STATIC          reduce using rule 192 (statement_without_trailing_substatement -> block .)
    ABSTRACT        reduce using rule 192 (statement_without_trailing_substatement -> block .)
    FINAL           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    NATIVE          reduce using rule 192 (statement_without_trailing_substatement -> block .)
    TRANSIENT       reduce using rule 192 (statement_without_trailing_substatement -> block .)
    VOLATILE        reduce using rule 192 (statement_without_trailing_substatement -> block .)
    STRICTFP        reduce using rule 192 (statement_without_trailing_substatement -> block .)
    THIS            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    SUPER           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    PLUSPLUS        reduce using rule 192 (statement_without_trailing_substatement -> block .)
    MINUSMINUS      reduce using rule 192 (statement_without_trailing_substatement -> block .)
    NEW             reduce using rule 192 (statement_without_trailing_substatement -> block .)
    <               reduce using rule 192 (statement_without_trailing_substatement -> block .)
    (               reduce using rule 192 (statement_without_trailing_substatement -> block .)
    NUM             reduce using rule 192 (statement_without_trailing_substatement -> block .)
    CHAR_LITERAL    reduce using rule 192 (statement_without_trailing_substatement -> block .)
    STRING_LITERAL  reduce using rule 192 (statement_without_trailing_substatement -> block .)
    TRUE            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    FALSE           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    NULL            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    ENUM            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    CLASS           reduce using rule 192 (statement_without_trailing_substatement -> block .)
    INTERFACE       reduce using rule 192 (statement_without_trailing_substatement -> block .)
    }               reduce using rule 192 (statement_without_trailing_substatement -> block .)
    CASE            reduce using rule 192 (statement_without_trailing_substatement -> block .)
    DEFAULT         reduce using rule 192 (statement_without_trailing_substatement -> block .)
    ELSE            reduce using rule 192 (statement_without_trailing_substatement -> block .)


state 108

    (188) statement -> if_then_else_statement .

    IF              reduce using rule 188 (statement -> if_then_else_statement .)
    WHILE           reduce using rule 188 (statement -> if_then_else_statement .)
    FOR             reduce using rule 188 (statement -> if_then_else_statement .)
    {               reduce using rule 188 (statement -> if_then_else_statement .)
    ASSERT          reduce using rule 188 (statement -> if_then_else_statement .)
    ;               reduce using rule 188 (statement -> if_then_else_statement .)
    SWITCH          reduce using rule 188 (statement -> if_then_else_statement .)
    DO              reduce using rule 188 (statement -> if_then_else_statement .)
    BREAK           reduce using rule 188 (statement -> if_then_else_statement .)
    CONTINUE        reduce using rule 188 (statement -> if_then_else_statement .)
    RETURN          reduce using rule 188 (statement -> if_then_else_statement .)
    SYNCHRONIZED    reduce using rule 188 (statement -> if_then_else_statement .)
    THROW           reduce using rule 188 (statement -> if_then_else_statement .)
    TRY             reduce using rule 188 (statement -> if_then_else_statement .)
    NAME            reduce using rule 188 (statement -> if_then_else_statement .)
    @               reduce using rule 188 (statement -> if_then_else_statement .)
    BOOLEAN         reduce using rule 188 (statement -> if_then_else_statement .)
    VOID            reduce using rule 188 (statement -> if_then_else_statement .)
    BYTE            reduce using rule 188 (statement -> if_then_else_statement .)
    SHORT           reduce using rule 188 (statement -> if_then_else_statement .)
    INT             reduce using rule 188 (statement -> if_then_else_statement .)
    LONG            reduce using rule 188 (statement -> if_then_else_statement .)
    CHAR            reduce using rule 188 (statement -> if_then_else_statement .)
    FLOAT           reduce using rule 188 (statement -> if_then_else_statement .)
    DOUBLE          reduce using rule 188 (statement -> if_then_else_statement .)
    PUBLIC          reduce using rule 188 (statement -> if_then_else_statement .)
    PROTECTED       reduce using rule 188 (statement -> if_then_else_statement .)
    PRIVATE         reduce using rule 188 (statement -> if_then_else_statement .)
    STATIC          reduce using rule 188 (statement -> if_then_else_statement .)
    ABSTRACT        reduce using rule 188 (statement -> if_then_else_statement .)
    FINAL           reduce using rule 188 (statement -> if_then_else_statement .)
    NATIVE          reduce using rule 188 (statement -> if_then_else_statement .)
    TRANSIENT       reduce using rule 188 (statement -> if_then_else_statement .)
    VOLATILE        reduce using rule 188 (statement -> if_then_else_statement .)
    STRICTFP        reduce using rule 188 (statement -> if_then_else_statement .)
    THIS            reduce using rule 188 (statement -> if_then_else_statement .)
    SUPER           reduce using rule 188 (statement -> if_then_else_statement .)
    PLUSPLUS        reduce using rule 188 (statement -> if_then_else_statement .)
    MINUSMINUS      reduce using rule 188 (statement -> if_then_else_statement .)
    NEW             reduce using rule 188 (statement -> if_then_else_statement .)
    <               reduce using rule 188 (statement -> if_then_else_statement .)
    (               reduce using rule 188 (statement -> if_then_else_statement .)
    NUM             reduce using rule 188 (statement -> if_then_else_statement .)
    CHAR_LITERAL    reduce using rule 188 (statement -> if_then_else_statement .)
    STRING_LITERAL  reduce using rule 188 (statement -> if_then_else_statement .)
    TRUE            reduce using rule 188 (statement -> if_then_else_statement .)
    FALSE           reduce using rule 188 (statement -> if_then_else_statement .)
    NULL            reduce using rule 188 (statement -> if_then_else_statement .)
    ENUM            reduce using rule 188 (statement -> if_then_else_statement .)
    CLASS           reduce using rule 188 (statement -> if_then_else_statement .)
    INTERFACE       reduce using rule 188 (statement -> if_then_else_statement .)
    }               reduce using rule 188 (statement -> if_then_else_statement .)
    $end            reduce using rule 188 (statement -> if_then_else_statement .)
    CASE            reduce using rule 188 (statement -> if_then_else_statement .)
    DEFAULT         reduce using rule 188 (statement -> if_then_else_statement .)


state 109

    (311) explicit_constructor_invocation -> primary . . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> primary . . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> primary . . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> primary . . type_arguments THIS ( argument_list_opt ) ;
    (223) method_invocation -> primary . . type_arguments NAME ( argument_list_opt )
    (226) method_invocation -> primary . . NAME ( argument_list_opt )
    (321) class_instance_creation_expression -> primary . . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . . NEW class_type ( argument_list_opt ) class_body_opt
    (127) postfix_expression -> primary .
    (328) field_access -> primary . . NAME

    .               shift and go to state 328
    PLUSPLUS        reduce using rule 127 (postfix_expression -> primary .)
    MINUSMINUS      reduce using rule 127 (postfix_expression -> primary .)
    =               reduce using rule 127 (postfix_expression -> primary .)
    TIMES_ASSIGN    reduce using rule 127 (postfix_expression -> primary .)
    DIVIDE_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    REMAINDER_ASSIGN reduce using rule 127 (postfix_expression -> primary .)
    PLUS_ASSIGN     reduce using rule 127 (postfix_expression -> primary .)
    MINUS_ASSIGN    reduce using rule 127 (postfix_expression -> primary .)
    LSHIFT_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    RSHIFT_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    RRSHIFT_ASSIGN  reduce using rule 127 (postfix_expression -> primary .)
    AND_ASSIGN      reduce using rule 127 (postfix_expression -> primary .)
    OR_ASSIGN       reduce using rule 127 (postfix_expression -> primary .)
    XOR_ASSIGN      reduce using rule 127 (postfix_expression -> primary .)


state 110

    (375) primitive_type -> CHAR .

    .               reduce using rule 375 (primitive_type -> CHAR .)
    [               reduce using rule 375 (primitive_type -> CHAR .)
    NAME            reduce using rule 375 (primitive_type -> CHAR .)
    )               reduce using rule 375 (primitive_type -> CHAR .)
    |               reduce using rule 375 (primitive_type -> CHAR .)
    ELLIPSIS        reduce using rule 375 (primitive_type -> CHAR .)


state 111

    (234) while_statement -> WHILE . ( expression ) statement

    (               shift and go to state 329


state 112

    (622) goal -> * block_statement .

    $end            reduce using rule 622 (goal -> * block_statement .)


state 113

    (187) statement -> if_then_statement .

    IF              reduce using rule 187 (statement -> if_then_statement .)
    WHILE           reduce using rule 187 (statement -> if_then_statement .)
    FOR             reduce using rule 187 (statement -> if_then_statement .)
    {               reduce using rule 187 (statement -> if_then_statement .)
    ASSERT          reduce using rule 187 (statement -> if_then_statement .)
    ;               reduce using rule 187 (statement -> if_then_statement .)
    SWITCH          reduce using rule 187 (statement -> if_then_statement .)
    DO              reduce using rule 187 (statement -> if_then_statement .)
    BREAK           reduce using rule 187 (statement -> if_then_statement .)
    CONTINUE        reduce using rule 187 (statement -> if_then_statement .)
    RETURN          reduce using rule 187 (statement -> if_then_statement .)
    SYNCHRONIZED    reduce using rule 187 (statement -> if_then_statement .)
    THROW           reduce using rule 187 (statement -> if_then_statement .)
    TRY             reduce using rule 187 (statement -> if_then_statement .)
    NAME            reduce using rule 187 (statement -> if_then_statement .)
    @               reduce using rule 187 (statement -> if_then_statement .)
    BOOLEAN         reduce using rule 187 (statement -> if_then_statement .)
    VOID            reduce using rule 187 (statement -> if_then_statement .)
    BYTE            reduce using rule 187 (statement -> if_then_statement .)
    SHORT           reduce using rule 187 (statement -> if_then_statement .)
    INT             reduce using rule 187 (statement -> if_then_statement .)
    LONG            reduce using rule 187 (statement -> if_then_statement .)
    CHAR            reduce using rule 187 (statement -> if_then_statement .)
    FLOAT           reduce using rule 187 (statement -> if_then_statement .)
    DOUBLE          reduce using rule 187 (statement -> if_then_statement .)
    PUBLIC          reduce using rule 187 (statement -> if_then_statement .)
    PROTECTED       reduce using rule 187 (statement -> if_then_statement .)
    PRIVATE         reduce using rule 187 (statement -> if_then_statement .)
    STATIC          reduce using rule 187 (statement -> if_then_statement .)
    ABSTRACT        reduce using rule 187 (statement -> if_then_statement .)
    FINAL           reduce using rule 187 (statement -> if_then_statement .)
    NATIVE          reduce using rule 187 (statement -> if_then_statement .)
    TRANSIENT       reduce using rule 187 (statement -> if_then_statement .)
    VOLATILE        reduce using rule 187 (statement -> if_then_statement .)
    STRICTFP        reduce using rule 187 (statement -> if_then_statement .)
    THIS            reduce using rule 187 (statement -> if_then_statement .)
    SUPER           reduce using rule 187 (statement -> if_then_statement .)
    PLUSPLUS        reduce using rule 187 (statement -> if_then_statement .)
    MINUSMINUS      reduce using rule 187 (statement -> if_then_statement .)
    NEW             reduce using rule 187 (statement -> if_then_statement .)
    <               reduce using rule 187 (statement -> if_then_statement .)
    (               reduce using rule 187 (statement -> if_then_statement .)
    NUM             reduce using rule 187 (statement -> if_then_statement .)
    CHAR_LITERAL    reduce using rule 187 (statement -> if_then_statement .)
    STRING_LITERAL  reduce using rule 187 (statement -> if_then_statement .)
    TRUE            reduce using rule 187 (statement -> if_then_statement .)
    FALSE           reduce using rule 187 (statement -> if_then_statement .)
    NULL            reduce using rule 187 (statement -> if_then_statement .)
    ENUM            reduce using rule 187 (statement -> if_then_statement .)
    CLASS           reduce using rule 187 (statement -> if_then_statement .)
    INTERFACE       reduce using rule 187 (statement -> if_then_statement .)
    }               reduce using rule 187 (statement -> if_then_statement .)
    $end            reduce using rule 187 (statement -> if_then_statement .)
    CASE            reduce using rule 187 (statement -> if_then_statement .)
    DEFAULT         reduce using rule 187 (statement -> if_then_statement .)


state 114

    (319) class_instance_creation_expression -> NEW . type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> NEW . class_type ( argument_list_opt ) class_body_opt
    (333) array_creation_with_array_initializer -> NEW . primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> NEW . class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> NEW . primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> NEW . class_or_interface_type dim_with_or_without_exprs
    (391) type_arguments -> . < type_argument_list1
    (382) class_type -> . class_or_interface_type
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    <               shift and go to state 67
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type                     shift and go to state 334
    class_or_interface             shift and go to state 144
    name                           shift and go to state 335
    type_arguments                 shift and go to state 330
    primitive_type                 shift and go to state 333
    generic_type                   shift and go to state 331
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 332

state 115

    (201) statement_without_trailing_substatement -> synchronized_statement .

    $end            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    IF              reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    WHILE           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    FOR             reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    {               reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    ASSERT          reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    ;               reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    SWITCH          reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    DO              reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    BREAK           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    CONTINUE        reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    RETURN          reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    SYNCHRONIZED    reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    THROW           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    TRY             reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    NAME            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    @               reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    BOOLEAN         reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    VOID            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    BYTE            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    SHORT           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    INT             reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    LONG            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    CHAR            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    FLOAT           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    DOUBLE          reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    PUBLIC          reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    PROTECTED       reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    PRIVATE         reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    STATIC          reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    ABSTRACT        reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    FINAL           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    NATIVE          reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    TRANSIENT       reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    VOLATILE        reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    STRICTFP        reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    THIS            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    SUPER           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    PLUSPLUS        reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    MINUSMINUS      reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    NEW             reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    <               reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    (               reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    NUM             reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    CHAR_LITERAL    reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    STRING_LITERAL  reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    TRUE            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    FALSE           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    NULL            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    ENUM            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    CLASS           reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    INTERFACE       reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    }               reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    CASE            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    DEFAULT         reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)
    ELSE            reduce using rule 201 (statement_without_trailing_substatement -> synchronized_statement .)


state 116

    (367) type -> primitive_type .
    (387) array_type -> primitive_type . dims
    (151) primary_no_new_array -> primitive_type . dims . CLASS
    (152) primary_no_new_array -> primitive_type . . CLASS
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    NAME            reduce using rule 367 (type -> primitive_type .)
    .               shift and go to state 336
    [               shift and go to state 238

    dims                           shift and go to state 337
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 117

    (263) switch_statement -> SWITCH . ( expression ) switch_block

    (               shift and go to state 338


state 118

    (345) literal -> NUM .

    [               reduce using rule 345 (literal -> NUM .)
    .               reduce using rule 345 (literal -> NUM .)
    PLUSPLUS        reduce using rule 345 (literal -> NUM .)
    MINUSMINUS      reduce using rule 345 (literal -> NUM .)
    =               reduce using rule 345 (literal -> NUM .)
    TIMES_ASSIGN    reduce using rule 345 (literal -> NUM .)
    DIVIDE_ASSIGN   reduce using rule 345 (literal -> NUM .)
    REMAINDER_ASSIGN reduce using rule 345 (literal -> NUM .)
    PLUS_ASSIGN     reduce using rule 345 (literal -> NUM .)
    MINUS_ASSIGN    reduce using rule 345 (literal -> NUM .)
    LSHIFT_ASSIGN   reduce using rule 345 (literal -> NUM .)
    RSHIFT_ASSIGN   reduce using rule 345 (literal -> NUM .)
    RRSHIFT_ASSIGN  reduce using rule 345 (literal -> NUM .)
    AND_ASSIGN      reduce using rule 345 (literal -> NUM .)
    OR_ASSIGN       reduce using rule 345 (literal -> NUM .)
    XOR_ASSIGN      reduce using rule 345 (literal -> NUM .)
    *               reduce using rule 345 (literal -> NUM .)
    /               reduce using rule 345 (literal -> NUM .)
    %               reduce using rule 345 (literal -> NUM .)
    +               reduce using rule 345 (literal -> NUM .)
    -               reduce using rule 345 (literal -> NUM .)
    LSHIFT          reduce using rule 345 (literal -> NUM .)
    RSHIFT          reduce using rule 345 (literal -> NUM .)
    RRSHIFT         reduce using rule 345 (literal -> NUM .)
    >               reduce using rule 345 (literal -> NUM .)
    <               reduce using rule 345 (literal -> NUM .)
    GTEQ            reduce using rule 345 (literal -> NUM .)
    LTEQ            reduce using rule 345 (literal -> NUM .)
    INSTANCEOF      reduce using rule 345 (literal -> NUM .)
    EQ              reduce using rule 345 (literal -> NUM .)
    NEQ             reduce using rule 345 (literal -> NUM .)
    &               reduce using rule 345 (literal -> NUM .)
    ^               reduce using rule 345 (literal -> NUM .)
    |               reduce using rule 345 (literal -> NUM .)
    AND             reduce using rule 345 (literal -> NUM .)
    ?               reduce using rule 345 (literal -> NUM .)
    OR              reduce using rule 345 (literal -> NUM .)
    $end            reduce using rule 345 (literal -> NUM .)
    ,               reduce using rule 345 (literal -> NUM .)
    )               reduce using rule 345 (literal -> NUM .)
    }               reduce using rule 345 (literal -> NUM .)
    ;               reduce using rule 345 (literal -> NUM .)
    :               reduce using rule 345 (literal -> NUM .)
    ]               reduce using rule 345 (literal -> NUM .)


state 119

    (170) block_statement -> statement .

    IF              reduce using rule 170 (block_statement -> statement .)
    WHILE           reduce using rule 170 (block_statement -> statement .)
    FOR             reduce using rule 170 (block_statement -> statement .)
    {               reduce using rule 170 (block_statement -> statement .)
    ASSERT          reduce using rule 170 (block_statement -> statement .)
    ;               reduce using rule 170 (block_statement -> statement .)
    SWITCH          reduce using rule 170 (block_statement -> statement .)
    DO              reduce using rule 170 (block_statement -> statement .)
    BREAK           reduce using rule 170 (block_statement -> statement .)
    CONTINUE        reduce using rule 170 (block_statement -> statement .)
    RETURN          reduce using rule 170 (block_statement -> statement .)
    SYNCHRONIZED    reduce using rule 170 (block_statement -> statement .)
    THROW           reduce using rule 170 (block_statement -> statement .)
    TRY             reduce using rule 170 (block_statement -> statement .)
    NAME            reduce using rule 170 (block_statement -> statement .)
    @               reduce using rule 170 (block_statement -> statement .)
    BOOLEAN         reduce using rule 170 (block_statement -> statement .)
    VOID            reduce using rule 170 (block_statement -> statement .)
    BYTE            reduce using rule 170 (block_statement -> statement .)
    SHORT           reduce using rule 170 (block_statement -> statement .)
    INT             reduce using rule 170 (block_statement -> statement .)
    LONG            reduce using rule 170 (block_statement -> statement .)
    CHAR            reduce using rule 170 (block_statement -> statement .)
    FLOAT           reduce using rule 170 (block_statement -> statement .)
    DOUBLE          reduce using rule 170 (block_statement -> statement .)
    PUBLIC          reduce using rule 170 (block_statement -> statement .)
    PROTECTED       reduce using rule 170 (block_statement -> statement .)
    PRIVATE         reduce using rule 170 (block_statement -> statement .)
    STATIC          reduce using rule 170 (block_statement -> statement .)
    ABSTRACT        reduce using rule 170 (block_statement -> statement .)
    FINAL           reduce using rule 170 (block_statement -> statement .)
    NATIVE          reduce using rule 170 (block_statement -> statement .)
    TRANSIENT       reduce using rule 170 (block_statement -> statement .)
    VOLATILE        reduce using rule 170 (block_statement -> statement .)
    STRICTFP        reduce using rule 170 (block_statement -> statement .)
    THIS            reduce using rule 170 (block_statement -> statement .)
    SUPER           reduce using rule 170 (block_statement -> statement .)
    PLUSPLUS        reduce using rule 170 (block_statement -> statement .)
    MINUSMINUS      reduce using rule 170 (block_statement -> statement .)
    NEW             reduce using rule 170 (block_statement -> statement .)
    <               reduce using rule 170 (block_statement -> statement .)
    (               reduce using rule 170 (block_statement -> statement .)
    NUM             reduce using rule 170 (block_statement -> statement .)
    CHAR_LITERAL    reduce using rule 170 (block_statement -> statement .)
    STRING_LITERAL  reduce using rule 170 (block_statement -> statement .)
    TRUE            reduce using rule 170 (block_statement -> statement .)
    FALSE           reduce using rule 170 (block_statement -> statement .)
    NULL            reduce using rule 170 (block_statement -> statement .)
    ENUM            reduce using rule 170 (block_statement -> statement .)
    CLASS           reduce using rule 170 (block_statement -> statement .)
    INTERFACE       reduce using rule 170 (block_statement -> statement .)
    }               reduce using rule 170 (block_statement -> statement .)
    CASE            reduce using rule 170 (block_statement -> statement .)
    DEFAULT         reduce using rule 170 (block_statement -> statement .)
    $end            reduce using rule 170 (block_statement -> statement .)


state 120

    (212) statement_expression -> method_invocation .
    (143) primary_no_new_array -> method_invocation .

    ;               reduce using rule 212 (statement_expression -> method_invocation .)
    ,               reduce using rule 212 (statement_expression -> method_invocation .)
    )               reduce using rule 212 (statement_expression -> method_invocation .)
    [               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    .               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    PLUSPLUS        reduce using rule 143 (primary_no_new_array -> method_invocation .)
    MINUSMINUS      reduce using rule 143 (primary_no_new_array -> method_invocation .)
    =               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    TIMES_ASSIGN    reduce using rule 143 (primary_no_new_array -> method_invocation .)
    DIVIDE_ASSIGN   reduce using rule 143 (primary_no_new_array -> method_invocation .)
    REMAINDER_ASSIGN reduce using rule 143 (primary_no_new_array -> method_invocation .)
    PLUS_ASSIGN     reduce using rule 143 (primary_no_new_array -> method_invocation .)
    MINUS_ASSIGN    reduce using rule 143 (primary_no_new_array -> method_invocation .)
    LSHIFT_ASSIGN   reduce using rule 143 (primary_no_new_array -> method_invocation .)
    RSHIFT_ASSIGN   reduce using rule 143 (primary_no_new_array -> method_invocation .)
    RRSHIFT_ASSIGN  reduce using rule 143 (primary_no_new_array -> method_invocation .)
    AND_ASSIGN      reduce using rule 143 (primary_no_new_array -> method_invocation .)
    OR_ASSIGN       reduce using rule 143 (primary_no_new_array -> method_invocation .)
    XOR_ASSIGN      reduce using rule 143 (primary_no_new_array -> method_invocation .)


state 121

    (352) modifiers_opt -> empty .

    BOOLEAN         reduce using rule 352 (modifiers_opt -> empty .)
    VOID            reduce using rule 352 (modifiers_opt -> empty .)
    BYTE            reduce using rule 352 (modifiers_opt -> empty .)
    SHORT           reduce using rule 352 (modifiers_opt -> empty .)
    INT             reduce using rule 352 (modifiers_opt -> empty .)
    LONG            reduce using rule 352 (modifiers_opt -> empty .)
    CHAR            reduce using rule 352 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 352 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 352 (modifiers_opt -> empty .)
    NAME            reduce using rule 352 (modifiers_opt -> empty .)
    ENUM            reduce using rule 352 (modifiers_opt -> empty .)
    CLASS           reduce using rule 352 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 352 (modifiers_opt -> empty .)
    <               reduce using rule 352 (modifiers_opt -> empty .)


state 122

    (323) class_instance_creation_expression -> class_instance_creation_expression_name . NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> class_instance_creation_expression_name . NEW type_arguments class_type ( argument_list_opt ) class_body_opt

    NEW             shift and go to state 339


state 123

    (371) primitive_type -> BYTE .

    .               reduce using rule 371 (primitive_type -> BYTE .)
    [               reduce using rule 371 (primitive_type -> BYTE .)
    NAME            reduce using rule 371 (primitive_type -> BYTE .)
    )               reduce using rule 371 (primitive_type -> BYTE .)
    |               reduce using rule 371 (primitive_type -> BYTE .)
    ELLIPSIS        reduce using rule 371 (primitive_type -> BYTE .)


state 124

    (348) literal -> TRUE .

    [               reduce using rule 348 (literal -> TRUE .)
    .               reduce using rule 348 (literal -> TRUE .)
    PLUSPLUS        reduce using rule 348 (literal -> TRUE .)
    MINUSMINUS      reduce using rule 348 (literal -> TRUE .)
    =               reduce using rule 348 (literal -> TRUE .)
    TIMES_ASSIGN    reduce using rule 348 (literal -> TRUE .)
    DIVIDE_ASSIGN   reduce using rule 348 (literal -> TRUE .)
    REMAINDER_ASSIGN reduce using rule 348 (literal -> TRUE .)
    PLUS_ASSIGN     reduce using rule 348 (literal -> TRUE .)
    MINUS_ASSIGN    reduce using rule 348 (literal -> TRUE .)
    LSHIFT_ASSIGN   reduce using rule 348 (literal -> TRUE .)
    RSHIFT_ASSIGN   reduce using rule 348 (literal -> TRUE .)
    RRSHIFT_ASSIGN  reduce using rule 348 (literal -> TRUE .)
    AND_ASSIGN      reduce using rule 348 (literal -> TRUE .)
    OR_ASSIGN       reduce using rule 348 (literal -> TRUE .)
    XOR_ASSIGN      reduce using rule 348 (literal -> TRUE .)
    *               reduce using rule 348 (literal -> TRUE .)
    /               reduce using rule 348 (literal -> TRUE .)
    %               reduce using rule 348 (literal -> TRUE .)
    +               reduce using rule 348 (literal -> TRUE .)
    -               reduce using rule 348 (literal -> TRUE .)
    LSHIFT          reduce using rule 348 (literal -> TRUE .)
    RSHIFT          reduce using rule 348 (literal -> TRUE .)
    RRSHIFT         reduce using rule 348 (literal -> TRUE .)
    >               reduce using rule 348 (literal -> TRUE .)
    <               reduce using rule 348 (literal -> TRUE .)
    GTEQ            reduce using rule 348 (literal -> TRUE .)
    LTEQ            reduce using rule 348 (literal -> TRUE .)
    INSTANCEOF      reduce using rule 348 (literal -> TRUE .)
    EQ              reduce using rule 348 (literal -> TRUE .)
    NEQ             reduce using rule 348 (literal -> TRUE .)
    &               reduce using rule 348 (literal -> TRUE .)
    ^               reduce using rule 348 (literal -> TRUE .)
    |               reduce using rule 348 (literal -> TRUE .)
    AND             reduce using rule 348 (literal -> TRUE .)
    ?               reduce using rule 348 (literal -> TRUE .)
    OR              reduce using rule 348 (literal -> TRUE .)
    $end            reduce using rule 348 (literal -> TRUE .)
    ,               reduce using rule 348 (literal -> TRUE .)
    )               reduce using rule 348 (literal -> TRUE .)
    }               reduce using rule 348 (literal -> TRUE .)
    ;               reduce using rule 348 (literal -> TRUE .)
    :               reduce using rule 348 (literal -> TRUE .)
    ]               reduce using rule 348 (literal -> TRUE .)


state 125

    (177) local_variable_declaration -> modifiers . type variable_declarators
    (354) modifiers -> modifiers . modifier
    (555) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME type_parameters
    (351) modifiers_opt -> modifiers .
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (588) annotation_name -> . @ name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    @               shift and go to state 223
    ENUM            reduce using rule 351 (modifiers_opt -> modifiers .)
    CLASS           reduce using rule 351 (modifiers_opt -> modifiers .)
    INTERFACE       reduce using rule 351 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    generic_type                   shift and go to state 58
    marker_annotation              shift and go to state 22
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 91
    primitive_type                 shift and go to state 340
    type                           shift and go to state 341
    class_or_interface             shift and go to state 144
    single_member_annotation       shift and go to state 18
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation                     shift and go to state 10
    annotation_name                shift and go to state 38
    name                           shift and go to state 342
    modifier                       shift and go to state 225

state 126

    (349) literal -> FALSE .

    [               reduce using rule 349 (literal -> FALSE .)
    .               reduce using rule 349 (literal -> FALSE .)
    PLUSPLUS        reduce using rule 349 (literal -> FALSE .)
    MINUSMINUS      reduce using rule 349 (literal -> FALSE .)
    =               reduce using rule 349 (literal -> FALSE .)
    TIMES_ASSIGN    reduce using rule 349 (literal -> FALSE .)
    DIVIDE_ASSIGN   reduce using rule 349 (literal -> FALSE .)
    REMAINDER_ASSIGN reduce using rule 349 (literal -> FALSE .)
    PLUS_ASSIGN     reduce using rule 349 (literal -> FALSE .)
    MINUS_ASSIGN    reduce using rule 349 (literal -> FALSE .)
    LSHIFT_ASSIGN   reduce using rule 349 (literal -> FALSE .)
    RSHIFT_ASSIGN   reduce using rule 349 (literal -> FALSE .)
    RRSHIFT_ASSIGN  reduce using rule 349 (literal -> FALSE .)
    AND_ASSIGN      reduce using rule 349 (literal -> FALSE .)
    OR_ASSIGN       reduce using rule 349 (literal -> FALSE .)
    XOR_ASSIGN      reduce using rule 349 (literal -> FALSE .)
    *               reduce using rule 349 (literal -> FALSE .)
    /               reduce using rule 349 (literal -> FALSE .)
    %               reduce using rule 349 (literal -> FALSE .)
    +               reduce using rule 349 (literal -> FALSE .)
    -               reduce using rule 349 (literal -> FALSE .)
    LSHIFT          reduce using rule 349 (literal -> FALSE .)
    RSHIFT          reduce using rule 349 (literal -> FALSE .)
    RRSHIFT         reduce using rule 349 (literal -> FALSE .)
    >               reduce using rule 349 (literal -> FALSE .)
    <               reduce using rule 349 (literal -> FALSE .)
    GTEQ            reduce using rule 349 (literal -> FALSE .)
    LTEQ            reduce using rule 349 (literal -> FALSE .)
    INSTANCEOF      reduce using rule 349 (literal -> FALSE .)
    EQ              reduce using rule 349 (literal -> FALSE .)
    NEQ             reduce using rule 349 (literal -> FALSE .)
    &               reduce using rule 349 (literal -> FALSE .)
    ^               reduce using rule 349 (literal -> FALSE .)
    |               reduce using rule 349 (literal -> FALSE .)
    AND             reduce using rule 349 (literal -> FALSE .)
    ?               reduce using rule 349 (literal -> FALSE .)
    OR              reduce using rule 349 (literal -> FALSE .)
    $end            reduce using rule 349 (literal -> FALSE .)
    ,               reduce using rule 349 (literal -> FALSE .)
    )               reduce using rule 349 (literal -> FALSE .)
    }               reduce using rule 349 (literal -> FALSE .)
    ;               reduce using rule 349 (literal -> FALSE .)
    :               reduce using rule 349 (literal -> FALSE .)
    ]               reduce using rule 349 (literal -> FALSE .)


state 127

    (230) label -> NAME .
    (221) method_invocation -> NAME . ( argument_list_opt )
    (343) simple_name -> NAME .

    :               reduce using rule 230 (label -> NAME .)
    (               shift and go to state 343
    .               reduce using rule 343 (simple_name -> NAME .)
    [               reduce using rule 343 (simple_name -> NAME .)
    PLUSPLUS        reduce using rule 343 (simple_name -> NAME .)
    MINUSMINUS      reduce using rule 343 (simple_name -> NAME .)
    =               reduce using rule 343 (simple_name -> NAME .)
    TIMES_ASSIGN    reduce using rule 343 (simple_name -> NAME .)
    DIVIDE_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    REMAINDER_ASSIGN reduce using rule 343 (simple_name -> NAME .)
    PLUS_ASSIGN     reduce using rule 343 (simple_name -> NAME .)
    MINUS_ASSIGN    reduce using rule 343 (simple_name -> NAME .)
    LSHIFT_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    RSHIFT_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    RRSHIFT_ASSIGN  reduce using rule 343 (simple_name -> NAME .)
    AND_ASSIGN      reduce using rule 343 (simple_name -> NAME .)
    OR_ASSIGN       reduce using rule 343 (simple_name -> NAME .)
    XOR_ASSIGN      reduce using rule 343 (simple_name -> NAME .)
    <               reduce using rule 343 (simple_name -> NAME .)
    NAME            reduce using rule 343 (simple_name -> NAME .)


state 128

    (176) local_variable_declaration -> type . variable_declarators
    (178) variable_declarators -> . variable_declarator
    (179) variable_declarators -> . variable_declarators , variable_declarator
    (180) variable_declarator -> . variable_declarator_id
    (181) variable_declarator -> . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 345

    variable_declarators           shift and go to state 344
    variable_declarator            shift and go to state 346
    variable_declarator_id         shift and go to state 347

state 129

    (174) block_statement -> enum_declaration .

    IF              reduce using rule 174 (block_statement -> enum_declaration .)
    WHILE           reduce using rule 174 (block_statement -> enum_declaration .)
    FOR             reduce using rule 174 (block_statement -> enum_declaration .)
    {               reduce using rule 174 (block_statement -> enum_declaration .)
    ASSERT          reduce using rule 174 (block_statement -> enum_declaration .)
    ;               reduce using rule 174 (block_statement -> enum_declaration .)
    SWITCH          reduce using rule 174 (block_statement -> enum_declaration .)
    DO              reduce using rule 174 (block_statement -> enum_declaration .)
    BREAK           reduce using rule 174 (block_statement -> enum_declaration .)
    CONTINUE        reduce using rule 174 (block_statement -> enum_declaration .)
    RETURN          reduce using rule 174 (block_statement -> enum_declaration .)
    SYNCHRONIZED    reduce using rule 174 (block_statement -> enum_declaration .)
    THROW           reduce using rule 174 (block_statement -> enum_declaration .)
    TRY             reduce using rule 174 (block_statement -> enum_declaration .)
    NAME            reduce using rule 174 (block_statement -> enum_declaration .)
    @               reduce using rule 174 (block_statement -> enum_declaration .)
    BOOLEAN         reduce using rule 174 (block_statement -> enum_declaration .)
    VOID            reduce using rule 174 (block_statement -> enum_declaration .)
    BYTE            reduce using rule 174 (block_statement -> enum_declaration .)
    SHORT           reduce using rule 174 (block_statement -> enum_declaration .)
    INT             reduce using rule 174 (block_statement -> enum_declaration .)
    LONG            reduce using rule 174 (block_statement -> enum_declaration .)
    CHAR            reduce using rule 174 (block_statement -> enum_declaration .)
    FLOAT           reduce using rule 174 (block_statement -> enum_declaration .)
    DOUBLE          reduce using rule 174 (block_statement -> enum_declaration .)
    PUBLIC          reduce using rule 174 (block_statement -> enum_declaration .)
    PROTECTED       reduce using rule 174 (block_statement -> enum_declaration .)
    PRIVATE         reduce using rule 174 (block_statement -> enum_declaration .)
    STATIC          reduce using rule 174 (block_statement -> enum_declaration .)
    ABSTRACT        reduce using rule 174 (block_statement -> enum_declaration .)
    FINAL           reduce using rule 174 (block_statement -> enum_declaration .)
    NATIVE          reduce using rule 174 (block_statement -> enum_declaration .)
    TRANSIENT       reduce using rule 174 (block_statement -> enum_declaration .)
    VOLATILE        reduce using rule 174 (block_statement -> enum_declaration .)
    STRICTFP        reduce using rule 174 (block_statement -> enum_declaration .)
    THIS            reduce using rule 174 (block_statement -> enum_declaration .)
    SUPER           reduce using rule 174 (block_statement -> enum_declaration .)
    PLUSPLUS        reduce using rule 174 (block_statement -> enum_declaration .)
    MINUSMINUS      reduce using rule 174 (block_statement -> enum_declaration .)
    NEW             reduce using rule 174 (block_statement -> enum_declaration .)
    <               reduce using rule 174 (block_statement -> enum_declaration .)
    (               reduce using rule 174 (block_statement -> enum_declaration .)
    NUM             reduce using rule 174 (block_statement -> enum_declaration .)
    CHAR_LITERAL    reduce using rule 174 (block_statement -> enum_declaration .)
    STRING_LITERAL  reduce using rule 174 (block_statement -> enum_declaration .)
    TRUE            reduce using rule 174 (block_statement -> enum_declaration .)
    FALSE           reduce using rule 174 (block_statement -> enum_declaration .)
    NULL            reduce using rule 174 (block_statement -> enum_declaration .)
    ENUM            reduce using rule 174 (block_statement -> enum_declaration .)
    CLASS           reduce using rule 174 (block_statement -> enum_declaration .)
    INTERFACE       reduce using rule 174 (block_statement -> enum_declaration .)
    }               reduce using rule 174 (block_statement -> enum_declaration .)
    CASE            reduce using rule 174 (block_statement -> enum_declaration .)
    DEFAULT         reduce using rule 174 (block_statement -> enum_declaration .)
    $end            reduce using rule 174 (block_statement -> enum_declaration .)


state 130

    (195) statement_without_trailing_substatement -> empty_statement .

    $end            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    IF              reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    WHILE           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    FOR             reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    {               reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    ASSERT          reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    ;               reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    SWITCH          reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    DO              reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    BREAK           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    CONTINUE        reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    RETURN          reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    SYNCHRONIZED    reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    THROW           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    TRY             reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    NAME            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    @               reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    BOOLEAN         reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    VOID            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    BYTE            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    SHORT           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    INT             reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    LONG            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    CHAR            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    FLOAT           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    DOUBLE          reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    PUBLIC          reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    PROTECTED       reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    PRIVATE         reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    STATIC          reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    ABSTRACT        reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    FINAL           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    NATIVE          reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    TRANSIENT       reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    VOLATILE        reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    STRICTFP        reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    THIS            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    SUPER           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    PLUSPLUS        reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    MINUSMINUS      reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    NEW             reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    <               reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    (               reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    NUM             reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    CHAR_LITERAL    reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    STRING_LITERAL  reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    TRUE            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    FALSE           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    NULL            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    ENUM            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    CLASS           reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    INTERFACE       reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    }               reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    CASE            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    DEFAULT         reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)
    ELSE            reduce using rule 195 (statement_without_trailing_substatement -> empty_statement .)


state 131

    (277) break_statement -> BREAK . ;
    (278) break_statement -> BREAK . NAME ;

    ;               shift and go to state 348
    NAME            shift and go to state 349


state 132

    (373) primitive_type -> INT .

    .               reduce using rule 373 (primitive_type -> INT .)
    [               reduce using rule 373 (primitive_type -> INT .)
    NAME            reduce using rule 373 (primitive_type -> INT .)
    )               reduce using rule 373 (primitive_type -> INT .)
    |               reduce using rule 373 (primitive_type -> INT .)
    ELLIPSIS        reduce using rule 373 (primitive_type -> INT .)


state 133

    (369) primitive_type -> BOOLEAN .

    .               reduce using rule 369 (primitive_type -> BOOLEAN .)
    [               reduce using rule 369 (primitive_type -> BOOLEAN .)
    NAME            reduce using rule 369 (primitive_type -> BOOLEAN .)
    )               reduce using rule 369 (primitive_type -> BOOLEAN .)
    |               reduce using rule 369 (primitive_type -> BOOLEAN .)
    ELLIPSIS        reduce using rule 369 (primitive_type -> BOOLEAN .)


state 134

    (175) local_variable_declaration_statement -> local_variable_declaration . ;

    ;               shift and go to state 350


state 135

    (173) block_statement -> annotation_type_declaration .

    IF              reduce using rule 173 (block_statement -> annotation_type_declaration .)
    WHILE           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    FOR             reduce using rule 173 (block_statement -> annotation_type_declaration .)
    {               reduce using rule 173 (block_statement -> annotation_type_declaration .)
    ASSERT          reduce using rule 173 (block_statement -> annotation_type_declaration .)
    ;               reduce using rule 173 (block_statement -> annotation_type_declaration .)
    SWITCH          reduce using rule 173 (block_statement -> annotation_type_declaration .)
    DO              reduce using rule 173 (block_statement -> annotation_type_declaration .)
    BREAK           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    CONTINUE        reduce using rule 173 (block_statement -> annotation_type_declaration .)
    RETURN          reduce using rule 173 (block_statement -> annotation_type_declaration .)
    SYNCHRONIZED    reduce using rule 173 (block_statement -> annotation_type_declaration .)
    THROW           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    TRY             reduce using rule 173 (block_statement -> annotation_type_declaration .)
    NAME            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    @               reduce using rule 173 (block_statement -> annotation_type_declaration .)
    BOOLEAN         reduce using rule 173 (block_statement -> annotation_type_declaration .)
    VOID            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    BYTE            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    SHORT           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    INT             reduce using rule 173 (block_statement -> annotation_type_declaration .)
    LONG            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    CHAR            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    FLOAT           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    DOUBLE          reduce using rule 173 (block_statement -> annotation_type_declaration .)
    PUBLIC          reduce using rule 173 (block_statement -> annotation_type_declaration .)
    PROTECTED       reduce using rule 173 (block_statement -> annotation_type_declaration .)
    PRIVATE         reduce using rule 173 (block_statement -> annotation_type_declaration .)
    STATIC          reduce using rule 173 (block_statement -> annotation_type_declaration .)
    ABSTRACT        reduce using rule 173 (block_statement -> annotation_type_declaration .)
    FINAL           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    NATIVE          reduce using rule 173 (block_statement -> annotation_type_declaration .)
    TRANSIENT       reduce using rule 173 (block_statement -> annotation_type_declaration .)
    VOLATILE        reduce using rule 173 (block_statement -> annotation_type_declaration .)
    STRICTFP        reduce using rule 173 (block_statement -> annotation_type_declaration .)
    THIS            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    SUPER           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    PLUSPLUS        reduce using rule 173 (block_statement -> annotation_type_declaration .)
    MINUSMINUS      reduce using rule 173 (block_statement -> annotation_type_declaration .)
    NEW             reduce using rule 173 (block_statement -> annotation_type_declaration .)
    <               reduce using rule 173 (block_statement -> annotation_type_declaration .)
    (               reduce using rule 173 (block_statement -> annotation_type_declaration .)
    NUM             reduce using rule 173 (block_statement -> annotation_type_declaration .)
    CHAR_LITERAL    reduce using rule 173 (block_statement -> annotation_type_declaration .)
    STRING_LITERAL  reduce using rule 173 (block_statement -> annotation_type_declaration .)
    TRUE            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    FALSE           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    NULL            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    ENUM            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    CLASS           reduce using rule 173 (block_statement -> annotation_type_declaration .)
    INTERFACE       reduce using rule 173 (block_statement -> annotation_type_declaration .)
    }               reduce using rule 173 (block_statement -> annotation_type_declaration .)
    CASE            reduce using rule 173 (block_statement -> annotation_type_declaration .)
    DEFAULT         reduce using rule 173 (block_statement -> annotation_type_declaration .)
    $end            reduce using rule 173 (block_statement -> annotation_type_declaration .)


state 136

    (276) do_statement -> DO . statement WHILE ( expression ) ;
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    array_access                   shift and go to state 90
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 92
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 351
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    literal                        shift and go to state 146
    statement_without_trailing_substatement shift and go to state 99
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    labeled_statement              shift and go to state 77
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    block                          shift and go to state 107
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    if_then_else_statement         shift and go to state 108

state 137

    (376) primitive_type -> FLOAT .

    .               reduce using rule 376 (primitive_type -> FLOAT .)
    [               reduce using rule 376 (primitive_type -> FLOAT .)
    NAME            reduce using rule 376 (primitive_type -> FLOAT .)
    )               reduce using rule 376 (primitive_type -> FLOAT .)
    |               reduce using rule 376 (primitive_type -> FLOAT .)
    ELLIPSIS        reduce using rule 376 (primitive_type -> FLOAT .)


state 138

    (191) statement -> enhanced_for_statement .

    IF              reduce using rule 191 (statement -> enhanced_for_statement .)
    WHILE           reduce using rule 191 (statement -> enhanced_for_statement .)
    FOR             reduce using rule 191 (statement -> enhanced_for_statement .)
    {               reduce using rule 191 (statement -> enhanced_for_statement .)
    ASSERT          reduce using rule 191 (statement -> enhanced_for_statement .)
    ;               reduce using rule 191 (statement -> enhanced_for_statement .)
    SWITCH          reduce using rule 191 (statement -> enhanced_for_statement .)
    DO              reduce using rule 191 (statement -> enhanced_for_statement .)
    BREAK           reduce using rule 191 (statement -> enhanced_for_statement .)
    CONTINUE        reduce using rule 191 (statement -> enhanced_for_statement .)
    RETURN          reduce using rule 191 (statement -> enhanced_for_statement .)
    SYNCHRONIZED    reduce using rule 191 (statement -> enhanced_for_statement .)
    THROW           reduce using rule 191 (statement -> enhanced_for_statement .)
    TRY             reduce using rule 191 (statement -> enhanced_for_statement .)
    NAME            reduce using rule 191 (statement -> enhanced_for_statement .)
    @               reduce using rule 191 (statement -> enhanced_for_statement .)
    BOOLEAN         reduce using rule 191 (statement -> enhanced_for_statement .)
    VOID            reduce using rule 191 (statement -> enhanced_for_statement .)
    BYTE            reduce using rule 191 (statement -> enhanced_for_statement .)
    SHORT           reduce using rule 191 (statement -> enhanced_for_statement .)
    INT             reduce using rule 191 (statement -> enhanced_for_statement .)
    LONG            reduce using rule 191 (statement -> enhanced_for_statement .)
    CHAR            reduce using rule 191 (statement -> enhanced_for_statement .)
    FLOAT           reduce using rule 191 (statement -> enhanced_for_statement .)
    DOUBLE          reduce using rule 191 (statement -> enhanced_for_statement .)
    PUBLIC          reduce using rule 191 (statement -> enhanced_for_statement .)
    PROTECTED       reduce using rule 191 (statement -> enhanced_for_statement .)
    PRIVATE         reduce using rule 191 (statement -> enhanced_for_statement .)
    STATIC          reduce using rule 191 (statement -> enhanced_for_statement .)
    ABSTRACT        reduce using rule 191 (statement -> enhanced_for_statement .)
    FINAL           reduce using rule 191 (statement -> enhanced_for_statement .)
    NATIVE          reduce using rule 191 (statement -> enhanced_for_statement .)
    TRANSIENT       reduce using rule 191 (statement -> enhanced_for_statement .)
    VOLATILE        reduce using rule 191 (statement -> enhanced_for_statement .)
    STRICTFP        reduce using rule 191 (statement -> enhanced_for_statement .)
    THIS            reduce using rule 191 (statement -> enhanced_for_statement .)
    SUPER           reduce using rule 191 (statement -> enhanced_for_statement .)
    PLUSPLUS        reduce using rule 191 (statement -> enhanced_for_statement .)
    MINUSMINUS      reduce using rule 191 (statement -> enhanced_for_statement .)
    NEW             reduce using rule 191 (statement -> enhanced_for_statement .)
    <               reduce using rule 191 (statement -> enhanced_for_statement .)
    (               reduce using rule 191 (statement -> enhanced_for_statement .)
    NUM             reduce using rule 191 (statement -> enhanced_for_statement .)
    CHAR_LITERAL    reduce using rule 191 (statement -> enhanced_for_statement .)
    STRING_LITERAL  reduce using rule 191 (statement -> enhanced_for_statement .)
    TRUE            reduce using rule 191 (statement -> enhanced_for_statement .)
    FALSE           reduce using rule 191 (statement -> enhanced_for_statement .)
    NULL            reduce using rule 191 (statement -> enhanced_for_statement .)
    ENUM            reduce using rule 191 (statement -> enhanced_for_statement .)
    CLASS           reduce using rule 191 (statement -> enhanced_for_statement .)
    INTERFACE       reduce using rule 191 (statement -> enhanced_for_statement .)
    }               reduce using rule 191 (statement -> enhanced_for_statement .)
    $end            reduce using rule 191 (statement -> enhanced_for_statement .)
    CASE            reduce using rule 191 (statement -> enhanced_for_statement .)
    DEFAULT         reduce using rule 191 (statement -> enhanced_for_statement .)


state 139

    (260) assert_statement -> ASSERT . expression ;
    (261) assert_statement -> ASSERT . expression : expression ;
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 352
    conditional_and_expression     shift and go to state 161

state 140

    (350) literal -> NULL .

    [               reduce using rule 350 (literal -> NULL .)
    .               reduce using rule 350 (literal -> NULL .)
    PLUSPLUS        reduce using rule 350 (literal -> NULL .)
    MINUSMINUS      reduce using rule 350 (literal -> NULL .)
    =               reduce using rule 350 (literal -> NULL .)
    TIMES_ASSIGN    reduce using rule 350 (literal -> NULL .)
    DIVIDE_ASSIGN   reduce using rule 350 (literal -> NULL .)
    REMAINDER_ASSIGN reduce using rule 350 (literal -> NULL .)
    PLUS_ASSIGN     reduce using rule 350 (literal -> NULL .)
    MINUS_ASSIGN    reduce using rule 350 (literal -> NULL .)
    LSHIFT_ASSIGN   reduce using rule 350 (literal -> NULL .)
    RSHIFT_ASSIGN   reduce using rule 350 (literal -> NULL .)
    RRSHIFT_ASSIGN  reduce using rule 350 (literal -> NULL .)
    AND_ASSIGN      reduce using rule 350 (literal -> NULL .)
    OR_ASSIGN       reduce using rule 350 (literal -> NULL .)
    XOR_ASSIGN      reduce using rule 350 (literal -> NULL .)
    *               reduce using rule 350 (literal -> NULL .)
    /               reduce using rule 350 (literal -> NULL .)
    %               reduce using rule 350 (literal -> NULL .)
    +               reduce using rule 350 (literal -> NULL .)
    -               reduce using rule 350 (literal -> NULL .)
    LSHIFT          reduce using rule 350 (literal -> NULL .)
    RSHIFT          reduce using rule 350 (literal -> NULL .)
    RRSHIFT         reduce using rule 350 (literal -> NULL .)
    >               reduce using rule 350 (literal -> NULL .)
    <               reduce using rule 350 (literal -> NULL .)
    GTEQ            reduce using rule 350 (literal -> NULL .)
    LTEQ            reduce using rule 350 (literal -> NULL .)
    INSTANCEOF      reduce using rule 350 (literal -> NULL .)
    EQ              reduce using rule 350 (literal -> NULL .)
    NEQ             reduce using rule 350 (literal -> NULL .)
    &               reduce using rule 350 (literal -> NULL .)
    ^               reduce using rule 350 (literal -> NULL .)
    |               reduce using rule 350 (literal -> NULL .)
    AND             reduce using rule 350 (literal -> NULL .)
    ?               reduce using rule 350 (literal -> NULL .)
    OR              reduce using rule 350 (literal -> NULL .)
    $end            reduce using rule 350 (literal -> NULL .)
    ,               reduce using rule 350 (literal -> NULL .)
    )               reduce using rule 350 (literal -> NULL .)
    }               reduce using rule 350 (literal -> NULL .)
    ;               reduce using rule 350 (literal -> NULL .)
    :               reduce using rule 350 (literal -> NULL .)
    ]               reduce using rule 350 (literal -> NULL .)


state 141

    (342) name -> qualified_name .

    .               reduce using rule 342 (name -> qualified_name .)
    [               reduce using rule 342 (name -> qualified_name .)
    PLUSPLUS        reduce using rule 342 (name -> qualified_name .)
    MINUSMINUS      reduce using rule 342 (name -> qualified_name .)
    =               reduce using rule 342 (name -> qualified_name .)
    TIMES_ASSIGN    reduce using rule 342 (name -> qualified_name .)
    DIVIDE_ASSIGN   reduce using rule 342 (name -> qualified_name .)
    REMAINDER_ASSIGN reduce using rule 342 (name -> qualified_name .)
    PLUS_ASSIGN     reduce using rule 342 (name -> qualified_name .)
    MINUS_ASSIGN    reduce using rule 342 (name -> qualified_name .)
    LSHIFT_ASSIGN   reduce using rule 342 (name -> qualified_name .)
    RSHIFT_ASSIGN   reduce using rule 342 (name -> qualified_name .)
    RRSHIFT_ASSIGN  reduce using rule 342 (name -> qualified_name .)
    AND_ASSIGN      reduce using rule 342 (name -> qualified_name .)
    OR_ASSIGN       reduce using rule 342 (name -> qualified_name .)
    XOR_ASSIGN      reduce using rule 342 (name -> qualified_name .)
    *               reduce using rule 342 (name -> qualified_name .)
    /               reduce using rule 342 (name -> qualified_name .)
    %               reduce using rule 342 (name -> qualified_name .)
    +               reduce using rule 342 (name -> qualified_name .)
    -               reduce using rule 342 (name -> qualified_name .)
    LSHIFT          reduce using rule 342 (name -> qualified_name .)
    RSHIFT          reduce using rule 342 (name -> qualified_name .)
    RRSHIFT         reduce using rule 342 (name -> qualified_name .)
    >               reduce using rule 342 (name -> qualified_name .)
    <               reduce using rule 342 (name -> qualified_name .)
    GTEQ            reduce using rule 342 (name -> qualified_name .)
    LTEQ            reduce using rule 342 (name -> qualified_name .)
    INSTANCEOF      reduce using rule 342 (name -> qualified_name .)
    EQ              reduce using rule 342 (name -> qualified_name .)
    NEQ             reduce using rule 342 (name -> qualified_name .)
    &               reduce using rule 342 (name -> qualified_name .)
    ^               reduce using rule 342 (name -> qualified_name .)
    |               reduce using rule 342 (name -> qualified_name .)
    AND             reduce using rule 342 (name -> qualified_name .)
    ?               reduce using rule 342 (name -> qualified_name .)
    OR              reduce using rule 342 (name -> qualified_name .)
    ;               reduce using rule 342 (name -> qualified_name .)
    :               reduce using rule 342 (name -> qualified_name .)
    ,               reduce using rule 342 (name -> qualified_name .)
    )               reduce using rule 342 (name -> qualified_name .)
    $end            reduce using rule 342 (name -> qualified_name .)
    ]               reduce using rule 342 (name -> qualified_name .)
    }               reduce using rule 342 (name -> qualified_name .)
    IMPLEMENTS      reduce using rule 342 (name -> qualified_name .)
    {               reduce using rule 342 (name -> qualified_name .)
    NAME            reduce using rule 342 (name -> qualified_name .)
    (               reduce using rule 342 (name -> qualified_name .)
    PACKAGE         reduce using rule 342 (name -> qualified_name .)
    @               reduce using rule 342 (name -> qualified_name .)
    PUBLIC          reduce using rule 342 (name -> qualified_name .)
    PROTECTED       reduce using rule 342 (name -> qualified_name .)
    PRIVATE         reduce using rule 342 (name -> qualified_name .)
    STATIC          reduce using rule 342 (name -> qualified_name .)
    ABSTRACT        reduce using rule 342 (name -> qualified_name .)
    FINAL           reduce using rule 342 (name -> qualified_name .)
    NATIVE          reduce using rule 342 (name -> qualified_name .)
    SYNCHRONIZED    reduce using rule 342 (name -> qualified_name .)
    TRANSIENT       reduce using rule 342 (name -> qualified_name .)
    VOLATILE        reduce using rule 342 (name -> qualified_name .)
    STRICTFP        reduce using rule 342 (name -> qualified_name .)
    ENUM            reduce using rule 342 (name -> qualified_name .)
    CLASS           reduce using rule 342 (name -> qualified_name .)
    INTERFACE       reduce using rule 342 (name -> qualified_name .)
    BOOLEAN         reduce using rule 342 (name -> qualified_name .)
    VOID            reduce using rule 342 (name -> qualified_name .)
    BYTE            reduce using rule 342 (name -> qualified_name .)
    SHORT           reduce using rule 342 (name -> qualified_name .)
    INT             reduce using rule 342 (name -> qualified_name .)
    LONG            reduce using rule 342 (name -> qualified_name .)
    CHAR            reduce using rule 342 (name -> qualified_name .)
    FLOAT           reduce using rule 342 (name -> qualified_name .)
    DOUBLE          reduce using rule 342 (name -> qualified_name .)
    ELLIPSIS        reduce using rule 342 (name -> qualified_name .)


state 142

    (200) statement_without_trailing_substatement -> return_statement .

    $end            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    IF              reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    WHILE           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    FOR             reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    {               reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    ASSERT          reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    ;               reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    SWITCH          reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    DO              reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    BREAK           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    CONTINUE        reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    RETURN          reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    SYNCHRONIZED    reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    THROW           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    TRY             reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    NAME            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    @               reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    BOOLEAN         reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    VOID            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    BYTE            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    SHORT           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    INT             reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    LONG            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    CHAR            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    FLOAT           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    DOUBLE          reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    PUBLIC          reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    PROTECTED       reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    PRIVATE         reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    STATIC          reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    ABSTRACT        reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    FINAL           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    NATIVE          reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    TRANSIENT       reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    VOLATILE        reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    STRICTFP        reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    THIS            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    SUPER           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    PLUSPLUS        reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    MINUSMINUS      reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    NEW             reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    <               reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    (               reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    NUM             reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    CHAR_LITERAL    reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    STRING_LITERAL  reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    TRUE            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    FALSE           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    NULL            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    ENUM            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    CLASS           reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    INTERFACE       reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    }               reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    CASE            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    DEFAULT         reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)
    ELSE            reduce using rule 200 (statement_without_trailing_substatement -> return_statement .)


state 143

    (197) statement_without_trailing_substatement -> do_statement .

    $end            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    IF              reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    WHILE           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    FOR             reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    {               reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    ASSERT          reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    ;               reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    SWITCH          reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    DO              reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    BREAK           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    CONTINUE        reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    RETURN          reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    SYNCHRONIZED    reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    THROW           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    TRY             reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    NAME            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    @               reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    BOOLEAN         reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    VOID            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    BYTE            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    SHORT           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    INT             reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    LONG            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    CHAR            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    FLOAT           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    DOUBLE          reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    PUBLIC          reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    PROTECTED       reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    PRIVATE         reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    STATIC          reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    ABSTRACT        reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    FINAL           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    NATIVE          reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    TRANSIENT       reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    VOLATILE        reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    STRICTFP        reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    THIS            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    SUPER           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    PLUSPLUS        reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    MINUSMINUS      reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    NEW             reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    <               reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    (               reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    NUM             reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    CHAR_LITERAL    reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    STRING_LITERAL  reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    TRUE            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    FALSE           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    NULL            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    ENUM            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    CLASS           reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    INTERFACE       reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    }               reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    CASE            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    DEFAULT         reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)
    ELSE            reduce using rule 197 (statement_without_trailing_substatement -> do_statement .)


state 144

    (380) class_or_interface_type -> class_or_interface .
    (385) generic_type -> class_or_interface . type_arguments
    (386) generic_type -> class_or_interface . < >
    (391) type_arguments -> . < type_argument_list1

    ,               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    {               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    NAME            reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    (               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    INSTANCEOF      reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    EQ              reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    NEQ             reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    &               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    ^               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    |               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    AND             reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    ?               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    OR              reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    )               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    }               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    ;               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    $end            reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    :               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    ]               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    [               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    ELLIPSIS        reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    IMPLEMENTS      reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    <               shift and go to state 354

    type_arguments                 shift and go to state 353

state 145

    (207) statement_expression -> assignment .

    ;               reduce using rule 207 (statement_expression -> assignment .)
    ,               reduce using rule 207 (statement_expression -> assignment .)
    )               reduce using rule 207 (statement_expression -> assignment .)


state 146

    (139) primary_no_new_array -> literal .

    [               reduce using rule 139 (primary_no_new_array -> literal .)
    .               reduce using rule 139 (primary_no_new_array -> literal .)
    PLUSPLUS        reduce using rule 139 (primary_no_new_array -> literal .)
    MINUSMINUS      reduce using rule 139 (primary_no_new_array -> literal .)
    ;               reduce using rule 139 (primary_no_new_array -> literal .)
    *               reduce using rule 139 (primary_no_new_array -> literal .)
    /               reduce using rule 139 (primary_no_new_array -> literal .)
    %               reduce using rule 139 (primary_no_new_array -> literal .)
    +               reduce using rule 139 (primary_no_new_array -> literal .)
    -               reduce using rule 139 (primary_no_new_array -> literal .)
    LSHIFT          reduce using rule 139 (primary_no_new_array -> literal .)
    RSHIFT          reduce using rule 139 (primary_no_new_array -> literal .)
    RRSHIFT         reduce using rule 139 (primary_no_new_array -> literal .)
    >               reduce using rule 139 (primary_no_new_array -> literal .)
    <               reduce using rule 139 (primary_no_new_array -> literal .)
    GTEQ            reduce using rule 139 (primary_no_new_array -> literal .)
    LTEQ            reduce using rule 139 (primary_no_new_array -> literal .)
    INSTANCEOF      reduce using rule 139 (primary_no_new_array -> literal .)
    EQ              reduce using rule 139 (primary_no_new_array -> literal .)
    NEQ             reduce using rule 139 (primary_no_new_array -> literal .)
    &               reduce using rule 139 (primary_no_new_array -> literal .)
    ^               reduce using rule 139 (primary_no_new_array -> literal .)
    |               reduce using rule 139 (primary_no_new_array -> literal .)
    AND             reduce using rule 139 (primary_no_new_array -> literal .)
    ?               reduce using rule 139 (primary_no_new_array -> literal .)
    OR              reduce using rule 139 (primary_no_new_array -> literal .)
    $end            reduce using rule 139 (primary_no_new_array -> literal .)
    )               reduce using rule 139 (primary_no_new_array -> literal .)
    :               reduce using rule 139 (primary_no_new_array -> literal .)
    ]               reduce using rule 139 (primary_no_new_array -> literal .)
    ,               reduce using rule 139 (primary_no_new_array -> literal .)
    }               reduce using rule 139 (primary_no_new_array -> literal .)
    =               reduce using rule 139 (primary_no_new_array -> literal .)
    TIMES_ASSIGN    reduce using rule 139 (primary_no_new_array -> literal .)
    DIVIDE_ASSIGN   reduce using rule 139 (primary_no_new_array -> literal .)
    REMAINDER_ASSIGN reduce using rule 139 (primary_no_new_array -> literal .)
    PLUS_ASSIGN     reduce using rule 139 (primary_no_new_array -> literal .)
    MINUS_ASSIGN    reduce using rule 139 (primary_no_new_array -> literal .)
    LSHIFT_ASSIGN   reduce using rule 139 (primary_no_new_array -> literal .)
    RSHIFT_ASSIGN   reduce using rule 139 (primary_no_new_array -> literal .)
    RRSHIFT_ASSIGN  reduce using rule 139 (primary_no_new_array -> literal .)
    AND_ASSIGN      reduce using rule 139 (primary_no_new_array -> literal .)
    OR_ASSIGN       reduce using rule 139 (primary_no_new_array -> literal .)
    XOR_ASSIGN      reduce using rule 139 (primary_no_new_array -> literal .)


state 147

    (118) pre_decrement_expression -> MINUSMINUS . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 355
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 148

    (231) if_then_statement -> IF . ( expression ) statement
    (232) if_then_else_statement -> IF . ( expression ) statement_no_short_if ELSE statement

    (               shift and go to state 356


state 149

    (347) literal -> STRING_LITERAL .

    [               reduce using rule 347 (literal -> STRING_LITERAL .)
    .               reduce using rule 347 (literal -> STRING_LITERAL .)
    PLUSPLUS        reduce using rule 347 (literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 347 (literal -> STRING_LITERAL .)
    =               reduce using rule 347 (literal -> STRING_LITERAL .)
    TIMES_ASSIGN    reduce using rule 347 (literal -> STRING_LITERAL .)
    DIVIDE_ASSIGN   reduce using rule 347 (literal -> STRING_LITERAL .)
    REMAINDER_ASSIGN reduce using rule 347 (literal -> STRING_LITERAL .)
    PLUS_ASSIGN     reduce using rule 347 (literal -> STRING_LITERAL .)
    MINUS_ASSIGN    reduce using rule 347 (literal -> STRING_LITERAL .)
    LSHIFT_ASSIGN   reduce using rule 347 (literal -> STRING_LITERAL .)
    RSHIFT_ASSIGN   reduce using rule 347 (literal -> STRING_LITERAL .)
    RRSHIFT_ASSIGN  reduce using rule 347 (literal -> STRING_LITERAL .)
    AND_ASSIGN      reduce using rule 347 (literal -> STRING_LITERAL .)
    OR_ASSIGN       reduce using rule 347 (literal -> STRING_LITERAL .)
    XOR_ASSIGN      reduce using rule 347 (literal -> STRING_LITERAL .)
    *               reduce using rule 347 (literal -> STRING_LITERAL .)
    /               reduce using rule 347 (literal -> STRING_LITERAL .)
    %               reduce using rule 347 (literal -> STRING_LITERAL .)
    +               reduce using rule 347 (literal -> STRING_LITERAL .)
    -               reduce using rule 347 (literal -> STRING_LITERAL .)
    LSHIFT          reduce using rule 347 (literal -> STRING_LITERAL .)
    RSHIFT          reduce using rule 347 (literal -> STRING_LITERAL .)
    RRSHIFT         reduce using rule 347 (literal -> STRING_LITERAL .)
    >               reduce using rule 347 (literal -> STRING_LITERAL .)
    <               reduce using rule 347 (literal -> STRING_LITERAL .)
    GTEQ            reduce using rule 347 (literal -> STRING_LITERAL .)
    LTEQ            reduce using rule 347 (literal -> STRING_LITERAL .)
    INSTANCEOF      reduce using rule 347 (literal -> STRING_LITERAL .)
    EQ              reduce using rule 347 (literal -> STRING_LITERAL .)
    NEQ             reduce using rule 347 (literal -> STRING_LITERAL .)
    &               reduce using rule 347 (literal -> STRING_LITERAL .)
    ^               reduce using rule 347 (literal -> STRING_LITERAL .)
    |               reduce using rule 347 (literal -> STRING_LITERAL .)
    AND             reduce using rule 347 (literal -> STRING_LITERAL .)
    ?               reduce using rule 347 (literal -> STRING_LITERAL .)
    OR              reduce using rule 347 (literal -> STRING_LITERAL .)
    $end            reduce using rule 347 (literal -> STRING_LITERAL .)
    ,               reduce using rule 347 (literal -> STRING_LITERAL .)
    )               reduce using rule 347 (literal -> STRING_LITERAL .)
    }               reduce using rule 347 (literal -> STRING_LITERAL .)
    ;               reduce using rule 347 (literal -> STRING_LITERAL .)
    :               reduce using rule 347 (literal -> STRING_LITERAL .)
    ]               reduce using rule 347 (literal -> STRING_LITERAL .)


state 150

    (308) explicit_constructor_invocation -> SUPER . ( argument_list_opt ) ;
    (224) method_invocation -> SUPER . . type_arguments NAME ( argument_list_opt )
    (227) method_invocation -> SUPER . . NAME ( argument_list_opt )
    (329) field_access -> SUPER . . NAME

    (               shift and go to state 357
    .               shift and go to state 358


state 151

    (171) block_statement -> class_declaration .

    IF              reduce using rule 171 (block_statement -> class_declaration .)
    WHILE           reduce using rule 171 (block_statement -> class_declaration .)
    FOR             reduce using rule 171 (block_statement -> class_declaration .)
    {               reduce using rule 171 (block_statement -> class_declaration .)
    ASSERT          reduce using rule 171 (block_statement -> class_declaration .)
    ;               reduce using rule 171 (block_statement -> class_declaration .)
    SWITCH          reduce using rule 171 (block_statement -> class_declaration .)
    DO              reduce using rule 171 (block_statement -> class_declaration .)
    BREAK           reduce using rule 171 (block_statement -> class_declaration .)
    CONTINUE        reduce using rule 171 (block_statement -> class_declaration .)
    RETURN          reduce using rule 171 (block_statement -> class_declaration .)
    SYNCHRONIZED    reduce using rule 171 (block_statement -> class_declaration .)
    THROW           reduce using rule 171 (block_statement -> class_declaration .)
    TRY             reduce using rule 171 (block_statement -> class_declaration .)
    NAME            reduce using rule 171 (block_statement -> class_declaration .)
    @               reduce using rule 171 (block_statement -> class_declaration .)
    BOOLEAN         reduce using rule 171 (block_statement -> class_declaration .)
    VOID            reduce using rule 171 (block_statement -> class_declaration .)
    BYTE            reduce using rule 171 (block_statement -> class_declaration .)
    SHORT           reduce using rule 171 (block_statement -> class_declaration .)
    INT             reduce using rule 171 (block_statement -> class_declaration .)
    LONG            reduce using rule 171 (block_statement -> class_declaration .)
    CHAR            reduce using rule 171 (block_statement -> class_declaration .)
    FLOAT           reduce using rule 171 (block_statement -> class_declaration .)
    DOUBLE          reduce using rule 171 (block_statement -> class_declaration .)
    PUBLIC          reduce using rule 171 (block_statement -> class_declaration .)
    PROTECTED       reduce using rule 171 (block_statement -> class_declaration .)
    PRIVATE         reduce using rule 171 (block_statement -> class_declaration .)
    STATIC          reduce using rule 171 (block_statement -> class_declaration .)
    ABSTRACT        reduce using rule 171 (block_statement -> class_declaration .)
    FINAL           reduce using rule 171 (block_statement -> class_declaration .)
    NATIVE          reduce using rule 171 (block_statement -> class_declaration .)
    TRANSIENT       reduce using rule 171 (block_statement -> class_declaration .)
    VOLATILE        reduce using rule 171 (block_statement -> class_declaration .)
    STRICTFP        reduce using rule 171 (block_statement -> class_declaration .)
    THIS            reduce using rule 171 (block_statement -> class_declaration .)
    SUPER           reduce using rule 171 (block_statement -> class_declaration .)
    PLUSPLUS        reduce using rule 171 (block_statement -> class_declaration .)
    MINUSMINUS      reduce using rule 171 (block_statement -> class_declaration .)
    NEW             reduce using rule 171 (block_statement -> class_declaration .)
    <               reduce using rule 171 (block_statement -> class_declaration .)
    (               reduce using rule 171 (block_statement -> class_declaration .)
    NUM             reduce using rule 171 (block_statement -> class_declaration .)
    CHAR_LITERAL    reduce using rule 171 (block_statement -> class_declaration .)
    STRING_LITERAL  reduce using rule 171 (block_statement -> class_declaration .)
    TRUE            reduce using rule 171 (block_statement -> class_declaration .)
    FALSE           reduce using rule 171 (block_statement -> class_declaration .)
    NULL            reduce using rule 171 (block_statement -> class_declaration .)
    ENUM            reduce using rule 171 (block_statement -> class_declaration .)
    CLASS           reduce using rule 171 (block_statement -> class_declaration .)
    INTERFACE       reduce using rule 171 (block_statement -> class_declaration .)
    }               reduce using rule 171 (block_statement -> class_declaration .)
    CASE            reduce using rule 171 (block_statement -> class_declaration .)
    DEFAULT         reduce using rule 171 (block_statement -> class_declaration .)
    $end            reduce using rule 171 (block_statement -> class_declaration .)


state 152

    (283) throw_statement -> THROW . expression ;
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 359
    conditional_and_expression     shift and go to state 161

state 153

    (130) postfix_expression -> post_decrement_expression .

    PLUSPLUS        reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    MINUSMINUS      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    *               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    /               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    %               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    +               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    -               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    LSHIFT          reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    RSHIFT          reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    RRSHIFT         reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    INSTANCEOF      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    EQ              reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    NEQ             reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    &               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    ^               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    |               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    AND             reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    ?               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    OR              reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    )               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    ,               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    }               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    ;               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    =               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    TIMES_ASSIGN    reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    DIVIDE_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    REMAINDER_ASSIGN reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    PLUS_ASSIGN     reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    MINUS_ASSIGN    reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    LSHIFT_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    RSHIFT_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    RRSHIFT_ASSIGN  reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    AND_ASSIGN      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    OR_ASSIGN       reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    XOR_ASSIGN      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    >               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    <               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    GTEQ            reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    LTEQ            reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    $end            reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    :               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    ]               reduce using rule 130 (postfix_expression -> post_decrement_expression .)


state 154

    (30) conditional_and_expression -> inclusive_or_expression .
    (36) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    ?               reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    :               reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    )               reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    $end            reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    }               reduce using rule 30 (conditional_and_expression -> inclusive_or_expression .)
    |               shift and go to state 360


state 155

    (145) primary_no_new_array -> ( . name )
    (146) primary_no_new_array -> ( . expression_not_name )
    (159) cast_expression -> ( . primitive_type dims_opt ) unary_expression
    (160) cast_expression -> ( . name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> ( . name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> ( . name ) unary_expression_not_plus_minus
    (163) cast_expression -> ( . name dims ) unary_expression_not_plus_minus
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (2) expression_not_name -> . assignment_expression_not_name
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (5) assignment_expression_not_name -> . assignment
    (6) assignment_expression_not_name -> . conditional_expression_not_name
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name ? expression : conditional_expression
    (24) conditional_expression_not_name -> . name ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name OR conditional_and_expression
    (29) conditional_or_expression_not_name -> . name OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name AND inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (37) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (38) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name | exclusive_or_expression
    (39) inclusive_or_expression_not_name -> . name | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (42) exclusive_or_expression_not_name -> . and_expression_not_name
    (43) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name ^ and_expression
    (44) exclusive_or_expression_not_name -> . name ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (47) and_expression_not_name -> . equality_expression_not_name
    (48) and_expression_not_name -> . and_expression_not_name & equality_expression
    (49) and_expression_not_name -> . name & equality_expression
    (53) equality_expression_not_name -> . instanceof_expression_not_name
    (54) equality_expression_not_name -> . equality_expression_not_name EQ instanceof_expression
    (55) equality_expression_not_name -> . name EQ instanceof_expression
    (56) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (57) equality_expression_not_name -> . name NEQ instanceof_expression
    (60) instanceof_expression_not_name -> . relational_expression_not_name
    (61) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (62) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (68) relational_expression_not_name -> . shift_expression_not_name
    (69) relational_expression_not_name -> . shift_expression_not_name < shift_expression
    (70) relational_expression_not_name -> . name < shift_expression
    (71) relational_expression_not_name -> . shift_expression_not_name > shift_expression
    (72) relational_expression_not_name -> . name > shift_expression
    (73) relational_expression_not_name -> . shift_expression_not_name GTEQ shift_expression
    (74) relational_expression_not_name -> . name GTEQ shift_expression
    (75) relational_expression_not_name -> . shift_expression_not_name LTEQ shift_expression
    (76) relational_expression_not_name -> . name LTEQ shift_expression
    (81) shift_expression_not_name -> . additive_expression_not_name
    (82) shift_expression_not_name -> . shift_expression_not_name LSHIFT additive_expression
    (83) shift_expression_not_name -> . name LSHIFT additive_expression
    (84) shift_expression_not_name -> . shift_expression_not_name RSHIFT additive_expression
    (85) shift_expression_not_name -> . name RSHIFT additive_expression
    (86) shift_expression_not_name -> . shift_expression_not_name RRSHIFT additive_expression
    (87) shift_expression_not_name -> . name RRSHIFT additive_expression
    (91) additive_expression_not_name -> . multiplicative_expression_not_name
    (92) additive_expression_not_name -> . additive_expression_not_name + multiplicative_expression
    (93) additive_expression_not_name -> . name + multiplicative_expression
    (94) additive_expression_not_name -> . additive_expression_not_name - multiplicative_expression
    (95) additive_expression_not_name -> . name - multiplicative_expression
    (100) multiplicative_expression_not_name -> . unary_expression_not_name
    (101) multiplicative_expression_not_name -> . multiplicative_expression_not_name * unary_expression
    (102) multiplicative_expression_not_name -> . name * unary_expression
    (103) multiplicative_expression_not_name -> . multiplicative_expression_not_name / unary_expression
    (104) multiplicative_expression_not_name -> . name / unary_expression
    (105) multiplicative_expression_not_name -> . multiplicative_expression_not_name % unary_expression
    (106) multiplicative_expression_not_name -> . name % unary_expression
    (112) unary_expression_not_name -> . pre_increment_expression
    (113) unary_expression_not_name -> . pre_decrement_expression
    (114) unary_expression_not_name -> . + unary_expression
    (115) unary_expression_not_name -> . - unary_expression
    (116) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (123) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (124) unary_expression_not_plus_minus_not_name -> . ~ unary_expression
    (125) unary_expression_not_plus_minus_not_name -> . ! unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . cast_expression
    (131) postfix_expression_not_name -> . primary
    (132) postfix_expression_not_name -> . post_increment_expression
    (133) postfix_expression_not_name -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 179
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    +               shift and go to state 264
    -               shift and go to state 278
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 267
    !               shift and go to state 277

    relational_expression_not_name shift and go to state 262
    primary                        shift and go to state 268
    assignment_expression_not_name shift and go to state 263
    exclusive_or_expression_not_name shift and go to state 254
    inclusive_or_expression_not_name shift and go to state 269
    simple_name                    shift and go to state 64
    primitive_type                 shift and go to state 362
    postfix_expression_not_name    shift and go to state 265
    post_decrement_expression      shift and go to state 255
    pre_increment_expression       shift and go to state 266
    postfix_expression             shift and go to state 59
    class_instance_creation_expression shift and go to state 156
    conditional_expression_not_name shift and go to state 279
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    method_invocation              shift and go to state 176
    shift_expression_not_name      shift and go to state 256
    array_creation_without_array_initializer shift and go to state 95
    equality_expression_not_name   shift and go to state 281
    field_access                   shift and go to state 96
    unary_expression_not_plus_minus_not_name shift and go to state 257
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 282
    multiplicative_expression_not_name shift and go to state 276
    conditional_and_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    cast_expression                shift and go to state 270
    and_expression_not_name        shift and go to state 271
    primary_no_new_array           shift and go to state 87
    unary_expression_not_name      shift and go to state 280
    name                           shift and go to state 361
    expression_not_name            shift and go to state 275
    conditional_or_expression_not_name shift and go to state 272
    instanceof_expression_not_name shift and go to state 273
    post_increment_expression      shift and go to state 260
    pre_decrement_expression       shift and go to state 261
    additive_expression_not_name   shift and go to state 274

state 156

    (141) primary_no_new_array -> class_instance_creation_expression .

    [               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    .               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    PLUSPLUS        reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    MINUSMINUS      reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    ;               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    *               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    /               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    %               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    +               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    -               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    LSHIFT          reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    RSHIFT          reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    RRSHIFT         reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    >               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    <               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    GTEQ            reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    LTEQ            reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    INSTANCEOF      reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    EQ              reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    NEQ             reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    &               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    ^               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    |               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    AND             reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    ?               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    OR              reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    $end            reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    )               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    :               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    ]               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    ,               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    }               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    =               reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    TIMES_ASSIGN    reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    DIVIDE_ASSIGN   reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    REMAINDER_ASSIGN reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    PLUS_ASSIGN     reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    MINUS_ASSIGN    reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    LSHIFT_ASSIGN   reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    RSHIFT_ASSIGN   reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    RRSHIFT_ASSIGN  reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    AND_ASSIGN      reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    OR_ASSIGN       reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)
    XOR_ASSIGN      reduce using rule 141 (primary_no_new_array -> class_instance_creation_expression .)


state 157

    (128) postfix_expression -> name .
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (344) qualified_name -> name . . simple_name
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (330) array_access -> name . [ expression ]
    (325) class_instance_creation_expression_name -> name . .
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    *               reduce using rule 128 (postfix_expression -> name .)
    /               reduce using rule 128 (postfix_expression -> name .)
    %               reduce using rule 128 (postfix_expression -> name .)
    +               reduce using rule 128 (postfix_expression -> name .)
    -               reduce using rule 128 (postfix_expression -> name .)
    LSHIFT          reduce using rule 128 (postfix_expression -> name .)
    RSHIFT          reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT         reduce using rule 128 (postfix_expression -> name .)
    INSTANCEOF      reduce using rule 128 (postfix_expression -> name .)
    EQ              reduce using rule 128 (postfix_expression -> name .)
    NEQ             reduce using rule 128 (postfix_expression -> name .)
    &               reduce using rule 128 (postfix_expression -> name .)
    ^               reduce using rule 128 (postfix_expression -> name .)
    |               reduce using rule 128 (postfix_expression -> name .)
    AND             reduce using rule 128 (postfix_expression -> name .)
    ?               reduce using rule 128 (postfix_expression -> name .)
    OR              reduce using rule 128 (postfix_expression -> name .)
    )               reduce using rule 128 (postfix_expression -> name .)
    ,               reduce using rule 128 (postfix_expression -> name .)
    }               reduce using rule 128 (postfix_expression -> name .)
    ;               reduce using rule 128 (postfix_expression -> name .)
    =               reduce using rule 128 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 128 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    LSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT_ASSIGN  reduce using rule 128 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    >               reduce using rule 128 (postfix_expression -> name .)
    <               reduce using rule 128 (postfix_expression -> name .)
    GTEQ            reduce using rule 128 (postfix_expression -> name .)
    LTEQ            reduce using rule 128 (postfix_expression -> name .)
    $end            reduce using rule 128 (postfix_expression -> name .)
    :               reduce using rule 128 (postfix_expression -> name .)
    ]               reduce using rule 128 (postfix_expression -> name .)
    .               shift and go to state 363
    [               shift and go to state 301

    dims                           shift and go to state 364
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 158

    (140) primary_no_new_array -> THIS .

    [               reduce using rule 140 (primary_no_new_array -> THIS .)
    .               reduce using rule 140 (primary_no_new_array -> THIS .)
    PLUSPLUS        reduce using rule 140 (primary_no_new_array -> THIS .)
    MINUSMINUS      reduce using rule 140 (primary_no_new_array -> THIS .)
    ;               reduce using rule 140 (primary_no_new_array -> THIS .)
    *               reduce using rule 140 (primary_no_new_array -> THIS .)
    /               reduce using rule 140 (primary_no_new_array -> THIS .)
    %               reduce using rule 140 (primary_no_new_array -> THIS .)
    +               reduce using rule 140 (primary_no_new_array -> THIS .)
    -               reduce using rule 140 (primary_no_new_array -> THIS .)
    LSHIFT          reduce using rule 140 (primary_no_new_array -> THIS .)
    RSHIFT          reduce using rule 140 (primary_no_new_array -> THIS .)
    RRSHIFT         reduce using rule 140 (primary_no_new_array -> THIS .)
    >               reduce using rule 140 (primary_no_new_array -> THIS .)
    <               reduce using rule 140 (primary_no_new_array -> THIS .)
    GTEQ            reduce using rule 140 (primary_no_new_array -> THIS .)
    LTEQ            reduce using rule 140 (primary_no_new_array -> THIS .)
    INSTANCEOF      reduce using rule 140 (primary_no_new_array -> THIS .)
    EQ              reduce using rule 140 (primary_no_new_array -> THIS .)
    NEQ             reduce using rule 140 (primary_no_new_array -> THIS .)
    &               reduce using rule 140 (primary_no_new_array -> THIS .)
    ^               reduce using rule 140 (primary_no_new_array -> THIS .)
    |               reduce using rule 140 (primary_no_new_array -> THIS .)
    AND             reduce using rule 140 (primary_no_new_array -> THIS .)
    ?               reduce using rule 140 (primary_no_new_array -> THIS .)
    OR              reduce using rule 140 (primary_no_new_array -> THIS .)
    $end            reduce using rule 140 (primary_no_new_array -> THIS .)
    )               reduce using rule 140 (primary_no_new_array -> THIS .)
    :               reduce using rule 140 (primary_no_new_array -> THIS .)
    ]               reduce using rule 140 (primary_no_new_array -> THIS .)
    ,               reduce using rule 140 (primary_no_new_array -> THIS .)
    }               reduce using rule 140 (primary_no_new_array -> THIS .)
    =               reduce using rule 140 (primary_no_new_array -> THIS .)
    TIMES_ASSIGN    reduce using rule 140 (primary_no_new_array -> THIS .)
    DIVIDE_ASSIGN   reduce using rule 140 (primary_no_new_array -> THIS .)
    REMAINDER_ASSIGN reduce using rule 140 (primary_no_new_array -> THIS .)
    PLUS_ASSIGN     reduce using rule 140 (primary_no_new_array -> THIS .)
    MINUS_ASSIGN    reduce using rule 140 (primary_no_new_array -> THIS .)
    LSHIFT_ASSIGN   reduce using rule 140 (primary_no_new_array -> THIS .)
    RSHIFT_ASSIGN   reduce using rule 140 (primary_no_new_array -> THIS .)
    RRSHIFT_ASSIGN  reduce using rule 140 (primary_no_new_array -> THIS .)
    AND_ASSIGN      reduce using rule 140 (primary_no_new_array -> THIS .)
    OR_ASSIGN       reduce using rule 140 (primary_no_new_array -> THIS .)
    XOR_ASSIGN      reduce using rule 140 (primary_no_new_array -> THIS .)


state 159

    (129) postfix_expression -> post_increment_expression .

    PLUSPLUS        reduce using rule 129 (postfix_expression -> post_increment_expression .)
    MINUSMINUS      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    *               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    /               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    %               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    +               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    -               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    LSHIFT          reduce using rule 129 (postfix_expression -> post_increment_expression .)
    RSHIFT          reduce using rule 129 (postfix_expression -> post_increment_expression .)
    RRSHIFT         reduce using rule 129 (postfix_expression -> post_increment_expression .)
    INSTANCEOF      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    EQ              reduce using rule 129 (postfix_expression -> post_increment_expression .)
    NEQ             reduce using rule 129 (postfix_expression -> post_increment_expression .)
    &               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    ^               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    |               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    AND             reduce using rule 129 (postfix_expression -> post_increment_expression .)
    ?               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    OR              reduce using rule 129 (postfix_expression -> post_increment_expression .)
    )               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    ,               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    }               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    ;               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    =               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    TIMES_ASSIGN    reduce using rule 129 (postfix_expression -> post_increment_expression .)
    DIVIDE_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    REMAINDER_ASSIGN reduce using rule 129 (postfix_expression -> post_increment_expression .)
    PLUS_ASSIGN     reduce using rule 129 (postfix_expression -> post_increment_expression .)
    MINUS_ASSIGN    reduce using rule 129 (postfix_expression -> post_increment_expression .)
    LSHIFT_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    RSHIFT_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    RRSHIFT_ASSIGN  reduce using rule 129 (postfix_expression -> post_increment_expression .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> post_increment_expression .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    >               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    <               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    GTEQ            reduce using rule 129 (postfix_expression -> post_increment_expression .)
    LTEQ            reduce using rule 129 (postfix_expression -> post_increment_expression .)
    $end            reduce using rule 129 (postfix_expression -> post_increment_expression .)
    :               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    ]               reduce using rule 129 (postfix_expression -> post_increment_expression .)


state 160

    (108) unary_expression -> pre_decrement_expression .

    ;               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    *               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    /               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    %               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    +               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    -               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    LSHIFT          reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    RSHIFT          reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    RRSHIFT         reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    >               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    <               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    GTEQ            reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    LTEQ            reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    INSTANCEOF      reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    EQ              reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    NEQ             reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    &               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    ^               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    |               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    AND             reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    ?               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    OR              reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    $end            reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    )               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    :               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    ]               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    ,               reduce using rule 108 (unary_expression -> pre_decrement_expression .)
    }               reduce using rule 108 (unary_expression -> pre_decrement_expression .)


state 161

    (25) conditional_or_expression -> conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    ?               reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    OR              reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    ,               reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    )               reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    ]               reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    ;               reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    $end            reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    :               reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    }               reduce using rule 25 (conditional_or_expression -> conditional_and_expression .)
    AND             shift and go to state 365


state 162

    (96) multiplicative_expression -> unary_expression .

    *               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    /               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    %               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 96 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 96 (multiplicative_expression -> unary_expression .)
    RRSHIFT         reduce using rule 96 (multiplicative_expression -> unary_expression .)
    INSTANCEOF      reduce using rule 96 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 96 (multiplicative_expression -> unary_expression .)
    NEQ             reduce using rule 96 (multiplicative_expression -> unary_expression .)
    &               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    ^               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    |               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 96 (multiplicative_expression -> unary_expression .)
    ?               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 96 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    }               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    ;               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    >               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    <               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    GTEQ            reduce using rule 96 (multiplicative_expression -> unary_expression .)
    LTEQ            reduce using rule 96 (multiplicative_expression -> unary_expression .)
    $end            reduce using rule 96 (multiplicative_expression -> unary_expression .)
    :               reduce using rule 96 (multiplicative_expression -> unary_expression .)
    ]               reduce using rule 96 (multiplicative_expression -> unary_expression .)


state 163

    (111) unary_expression -> unary_expression_not_plus_minus .

    ;               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    *               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    /               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    %               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    +               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    -               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    RRSHIFT         reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    >               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    <               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    GTEQ            reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    LTEQ            reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    EQ              reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    NEQ             reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    &               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    ^               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    |               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    AND             reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    ?               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    OR              reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    $end            reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    )               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    :               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    ]               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    ,               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)
    }               reduce using rule 111 (unary_expression -> unary_expression_not_plus_minus .)


state 164

    (109) unary_expression -> + . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 366
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 165

    (20) conditional_expression -> conditional_or_expression .
    (21) conditional_expression -> conditional_or_expression . ? expression : conditional_expression
    (26) conditional_or_expression -> conditional_or_expression . OR conditional_and_expression

    ,               reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    )               reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    ;               reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    ]               reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    $end            reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    :               reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    }               reduce using rule 20 (conditional_expression -> conditional_or_expression .)
    ?               shift and go to state 368
    OR              shift and go to state 367


state 166

    (88) additive_expression -> multiplicative_expression .
    (97) multiplicative_expression -> multiplicative_expression . * unary_expression
    (98) multiplicative_expression -> multiplicative_expression . / unary_expression
    (99) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 88 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 88 (additive_expression -> multiplicative_expression .)
    RRSHIFT         reduce using rule 88 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    GTEQ            reduce using rule 88 (additive_expression -> multiplicative_expression .)
    LTEQ            reduce using rule 88 (additive_expression -> multiplicative_expression .)
    INSTANCEOF      reduce using rule 88 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 88 (additive_expression -> multiplicative_expression .)
    NEQ             reduce using rule 88 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    ^               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 88 (additive_expression -> multiplicative_expression .)
    ?               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 88 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    }               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 88 (additive_expression -> multiplicative_expression .)
    :               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 88 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 369
    /               shift and go to state 371
    %               shift and go to state 370


state 167

    (63) relational_expression -> shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    >               reduce using rule 63 (relational_expression -> shift_expression .)
    <               reduce using rule 63 (relational_expression -> shift_expression .)
    GTEQ            reduce using rule 63 (relational_expression -> shift_expression .)
    LTEQ            reduce using rule 63 (relational_expression -> shift_expression .)
    INSTANCEOF      reduce using rule 63 (relational_expression -> shift_expression .)
    EQ              reduce using rule 63 (relational_expression -> shift_expression .)
    NEQ             reduce using rule 63 (relational_expression -> shift_expression .)
    &               reduce using rule 63 (relational_expression -> shift_expression .)
    ^               reduce using rule 63 (relational_expression -> shift_expression .)
    |               reduce using rule 63 (relational_expression -> shift_expression .)
    AND             reduce using rule 63 (relational_expression -> shift_expression .)
    ?               reduce using rule 63 (relational_expression -> shift_expression .)
    OR              reduce using rule 63 (relational_expression -> shift_expression .)
    )               reduce using rule 63 (relational_expression -> shift_expression .)
    ;               reduce using rule 63 (relational_expression -> shift_expression .)
    ,               reduce using rule 63 (relational_expression -> shift_expression .)
    }               reduce using rule 63 (relational_expression -> shift_expression .)
    $end            reduce using rule 63 (relational_expression -> shift_expression .)
    :               reduce using rule 63 (relational_expression -> shift_expression .)
    ]               reduce using rule 63 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 168

    (107) unary_expression -> pre_increment_expression .

    ;               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    *               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    /               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    %               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    +               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    -               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    LSHIFT          reduce using rule 107 (unary_expression -> pre_increment_expression .)
    RSHIFT          reduce using rule 107 (unary_expression -> pre_increment_expression .)
    RRSHIFT         reduce using rule 107 (unary_expression -> pre_increment_expression .)
    >               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    <               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    GTEQ            reduce using rule 107 (unary_expression -> pre_increment_expression .)
    LTEQ            reduce using rule 107 (unary_expression -> pre_increment_expression .)
    INSTANCEOF      reduce using rule 107 (unary_expression -> pre_increment_expression .)
    EQ              reduce using rule 107 (unary_expression -> pre_increment_expression .)
    NEQ             reduce using rule 107 (unary_expression -> pre_increment_expression .)
    &               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    ^               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    |               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    AND             reduce using rule 107 (unary_expression -> pre_increment_expression .)
    ?               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    OR              reduce using rule 107 (unary_expression -> pre_increment_expression .)
    $end            reduce using rule 107 (unary_expression -> pre_increment_expression .)
    )               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    :               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    ]               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    ,               reduce using rule 107 (unary_expression -> pre_increment_expression .)
    }               reduce using rule 107 (unary_expression -> pre_increment_expression .)


state 169

    (621) goal -> MINUSMINUS expression .

    $end            reduce using rule 621 (goal -> MINUSMINUS expression .)


state 170

    (35) inclusive_or_expression -> exclusive_or_expression .
    (41) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    AND             reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    ?               reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    OR              reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    ,               reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    )               reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    :               reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    }               reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    ;               reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    ]               reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    $end            reduce using rule 35 (inclusive_or_expression -> exclusive_or_expression .)
    ^               shift and go to state 375


state 171

    (127) postfix_expression -> primary .
    (321) class_instance_creation_expression -> primary . . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . . NEW class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> primary . . NAME
    (223) method_invocation -> primary . . type_arguments NAME ( argument_list_opt )
    (226) method_invocation -> primary . . NAME ( argument_list_opt )

    PLUSPLUS        reduce using rule 127 (postfix_expression -> primary .)
    MINUSMINUS      reduce using rule 127 (postfix_expression -> primary .)
    *               reduce using rule 127 (postfix_expression -> primary .)
    /               reduce using rule 127 (postfix_expression -> primary .)
    %               reduce using rule 127 (postfix_expression -> primary .)
    +               reduce using rule 127 (postfix_expression -> primary .)
    -               reduce using rule 127 (postfix_expression -> primary .)
    LSHIFT          reduce using rule 127 (postfix_expression -> primary .)
    RSHIFT          reduce using rule 127 (postfix_expression -> primary .)
    RRSHIFT         reduce using rule 127 (postfix_expression -> primary .)
    INSTANCEOF      reduce using rule 127 (postfix_expression -> primary .)
    EQ              reduce using rule 127 (postfix_expression -> primary .)
    NEQ             reduce using rule 127 (postfix_expression -> primary .)
    &               reduce using rule 127 (postfix_expression -> primary .)
    ^               reduce using rule 127 (postfix_expression -> primary .)
    |               reduce using rule 127 (postfix_expression -> primary .)
    AND             reduce using rule 127 (postfix_expression -> primary .)
    ?               reduce using rule 127 (postfix_expression -> primary .)
    OR              reduce using rule 127 (postfix_expression -> primary .)
    )               reduce using rule 127 (postfix_expression -> primary .)
    ,               reduce using rule 127 (postfix_expression -> primary .)
    }               reduce using rule 127 (postfix_expression -> primary .)
    ;               reduce using rule 127 (postfix_expression -> primary .)
    =               reduce using rule 127 (postfix_expression -> primary .)
    TIMES_ASSIGN    reduce using rule 127 (postfix_expression -> primary .)
    DIVIDE_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    REMAINDER_ASSIGN reduce using rule 127 (postfix_expression -> primary .)
    PLUS_ASSIGN     reduce using rule 127 (postfix_expression -> primary .)
    MINUS_ASSIGN    reduce using rule 127 (postfix_expression -> primary .)
    LSHIFT_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    RSHIFT_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    RRSHIFT_ASSIGN  reduce using rule 127 (postfix_expression -> primary .)
    AND_ASSIGN      reduce using rule 127 (postfix_expression -> primary .)
    OR_ASSIGN       reduce using rule 127 (postfix_expression -> primary .)
    XOR_ASSIGN      reduce using rule 127 (postfix_expression -> primary .)
    >               reduce using rule 127 (postfix_expression -> primary .)
    <               reduce using rule 127 (postfix_expression -> primary .)
    GTEQ            reduce using rule 127 (postfix_expression -> primary .)
    LTEQ            reduce using rule 127 (postfix_expression -> primary .)
    $end            reduce using rule 127 (postfix_expression -> primary .)
    :               reduce using rule 127 (postfix_expression -> primary .)
    ]               reduce using rule 127 (postfix_expression -> primary .)
    .               shift and go to state 376


state 172

    (333) array_creation_with_array_initializer -> NEW . primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> NEW . class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> NEW . primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> NEW . class_or_interface_type dim_with_or_without_exprs
    (319) class_instance_creation_expression -> NEW . type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> NEW . class_type ( argument_list_opt ) class_body_opt
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (391) type_arguments -> . < type_argument_list1
    (382) class_type -> . class_or_interface_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    <               shift and go to state 67
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type                     shift and go to state 334
    class_or_interface             shift and go to state 144
    name                           shift and go to state 335
    type_arguments                 shift and go to state 330
    primitive_type                 shift and go to state 333
    generic_type                   shift and go to state 331
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 332

state 173

    (77) shift_expression -> additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    LSHIFT          reduce using rule 77 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 77 (shift_expression -> additive_expression .)
    RRSHIFT         reduce using rule 77 (shift_expression -> additive_expression .)
    >               reduce using rule 77 (shift_expression -> additive_expression .)
    <               reduce using rule 77 (shift_expression -> additive_expression .)
    GTEQ            reduce using rule 77 (shift_expression -> additive_expression .)
    LTEQ            reduce using rule 77 (shift_expression -> additive_expression .)
    INSTANCEOF      reduce using rule 77 (shift_expression -> additive_expression .)
    EQ              reduce using rule 77 (shift_expression -> additive_expression .)
    NEQ             reduce using rule 77 (shift_expression -> additive_expression .)
    &               reduce using rule 77 (shift_expression -> additive_expression .)
    ^               reduce using rule 77 (shift_expression -> additive_expression .)
    |               reduce using rule 77 (shift_expression -> additive_expression .)
    AND             reduce using rule 77 (shift_expression -> additive_expression .)
    ?               reduce using rule 77 (shift_expression -> additive_expression .)
    OR              reduce using rule 77 (shift_expression -> additive_expression .)
    ,               reduce using rule 77 (shift_expression -> additive_expression .)
    )               reduce using rule 77 (shift_expression -> additive_expression .)
    ;               reduce using rule 77 (shift_expression -> additive_expression .)
    $end            reduce using rule 77 (shift_expression -> additive_expression .)
    :               reduce using rule 77 (shift_expression -> additive_expression .)
    ]               reduce using rule 77 (shift_expression -> additive_expression .)
    }               reduce using rule 77 (shift_expression -> additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 174

    (151) primary_no_new_array -> primitive_type . dims . CLASS
    (152) primary_no_new_array -> primitive_type . . CLASS
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               shift and go to state 336
    [               shift and go to state 238

    dims                           shift and go to state 379
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 175

    (58) instanceof_expression -> relational_expression .
    (64) relational_expression -> relational_expression . > shift_expression
    (65) relational_expression -> relational_expression . < shift_expression
    (66) relational_expression -> relational_expression . GTEQ shift_expression
    (67) relational_expression -> relational_expression . LTEQ shift_expression

    INSTANCEOF      reduce using rule 58 (instanceof_expression -> relational_expression .)
    EQ              reduce using rule 58 (instanceof_expression -> relational_expression .)
    NEQ             reduce using rule 58 (instanceof_expression -> relational_expression .)
    &               reduce using rule 58 (instanceof_expression -> relational_expression .)
    ^               reduce using rule 58 (instanceof_expression -> relational_expression .)
    |               reduce using rule 58 (instanceof_expression -> relational_expression .)
    AND             reduce using rule 58 (instanceof_expression -> relational_expression .)
    ?               reduce using rule 58 (instanceof_expression -> relational_expression .)
    OR              reduce using rule 58 (instanceof_expression -> relational_expression .)
    )               reduce using rule 58 (instanceof_expression -> relational_expression .)
    ,               reduce using rule 58 (instanceof_expression -> relational_expression .)
    }               reduce using rule 58 (instanceof_expression -> relational_expression .)
    ;               reduce using rule 58 (instanceof_expression -> relational_expression .)
    ]               reduce using rule 58 (instanceof_expression -> relational_expression .)
    $end            reduce using rule 58 (instanceof_expression -> relational_expression .)
    :               reduce using rule 58 (instanceof_expression -> relational_expression .)
    >               shift and go to state 383
    <               shift and go to state 382
    GTEQ            shift and go to state 380
    LTEQ            shift and go to state 381


state 176

    (143) primary_no_new_array -> method_invocation .

    [               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    .               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    PLUSPLUS        reduce using rule 143 (primary_no_new_array -> method_invocation .)
    MINUSMINUS      reduce using rule 143 (primary_no_new_array -> method_invocation .)
    ;               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    *               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    /               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    %               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    +               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    -               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    LSHIFT          reduce using rule 143 (primary_no_new_array -> method_invocation .)
    RSHIFT          reduce using rule 143 (primary_no_new_array -> method_invocation .)
    RRSHIFT         reduce using rule 143 (primary_no_new_array -> method_invocation .)
    >               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    <               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    GTEQ            reduce using rule 143 (primary_no_new_array -> method_invocation .)
    LTEQ            reduce using rule 143 (primary_no_new_array -> method_invocation .)
    INSTANCEOF      reduce using rule 143 (primary_no_new_array -> method_invocation .)
    EQ              reduce using rule 143 (primary_no_new_array -> method_invocation .)
    NEQ             reduce using rule 143 (primary_no_new_array -> method_invocation .)
    &               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    ^               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    |               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    AND             reduce using rule 143 (primary_no_new_array -> method_invocation .)
    ?               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    OR              reduce using rule 143 (primary_no_new_array -> method_invocation .)
    $end            reduce using rule 143 (primary_no_new_array -> method_invocation .)
    )               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    :               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    ]               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    ,               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    }               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    =               reduce using rule 143 (primary_no_new_array -> method_invocation .)
    TIMES_ASSIGN    reduce using rule 143 (primary_no_new_array -> method_invocation .)
    DIVIDE_ASSIGN   reduce using rule 143 (primary_no_new_array -> method_invocation .)
    REMAINDER_ASSIGN reduce using rule 143 (primary_no_new_array -> method_invocation .)
    PLUS_ASSIGN     reduce using rule 143 (primary_no_new_array -> method_invocation .)
    MINUS_ASSIGN    reduce using rule 143 (primary_no_new_array -> method_invocation .)
    LSHIFT_ASSIGN   reduce using rule 143 (primary_no_new_array -> method_invocation .)
    RSHIFT_ASSIGN   reduce using rule 143 (primary_no_new_array -> method_invocation .)
    RRSHIFT_ASSIGN  reduce using rule 143 (primary_no_new_array -> method_invocation .)
    AND_ASSIGN      reduce using rule 143 (primary_no_new_array -> method_invocation .)
    OR_ASSIGN       reduce using rule 143 (primary_no_new_array -> method_invocation .)
    XOR_ASSIGN      reduce using rule 143 (primary_no_new_array -> method_invocation .)


state 177

    (122) unary_expression_not_plus_minus -> cast_expression .

    *               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    /               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    %               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    +               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    -               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    <               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    >               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    GTEQ            reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    LTEQ            reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    LSHIFT          reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    RSHIFT          reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    RRSHIFT         reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    INSTANCEOF      reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    EQ              reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    NEQ             reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    &               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    ^               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    |               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    AND             reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    ?               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    OR              reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    )               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    ,               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    }               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    ;               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    $end            reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    :               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)
    ]               reduce using rule 122 (unary_expression_not_plus_minus -> cast_expression .)


state 178

    (45) and_expression -> equality_expression .
    (51) equality_expression -> equality_expression . EQ instanceof_expression
    (52) equality_expression -> equality_expression . NEQ instanceof_expression

    &               reduce using rule 45 (and_expression -> equality_expression .)
    ^               reduce using rule 45 (and_expression -> equality_expression .)
    |               reduce using rule 45 (and_expression -> equality_expression .)
    AND             reduce using rule 45 (and_expression -> equality_expression .)
    ?               reduce using rule 45 (and_expression -> equality_expression .)
    OR              reduce using rule 45 (and_expression -> equality_expression .)
    )               reduce using rule 45 (and_expression -> equality_expression .)
    ,               reduce using rule 45 (and_expression -> equality_expression .)
    }               reduce using rule 45 (and_expression -> equality_expression .)
    ;               reduce using rule 45 (and_expression -> equality_expression .)
    ]               reduce using rule 45 (and_expression -> equality_expression .)
    :               reduce using rule 45 (and_expression -> equality_expression .)
    $end            reduce using rule 45 (and_expression -> equality_expression .)
    EQ              shift and go to state 384
    NEQ             shift and go to state 385


state 179

    (343) simple_name -> NAME .
    (221) method_invocation -> NAME . ( argument_list_opt )

    .               reduce using rule 343 (simple_name -> NAME .)
    [               reduce using rule 343 (simple_name -> NAME .)
    PLUSPLUS        reduce using rule 343 (simple_name -> NAME .)
    MINUSMINUS      reduce using rule 343 (simple_name -> NAME .)
    *               reduce using rule 343 (simple_name -> NAME .)
    /               reduce using rule 343 (simple_name -> NAME .)
    %               reduce using rule 343 (simple_name -> NAME .)
    +               reduce using rule 343 (simple_name -> NAME .)
    -               reduce using rule 343 (simple_name -> NAME .)
    <               reduce using rule 343 (simple_name -> NAME .)
    >               reduce using rule 343 (simple_name -> NAME .)
    GTEQ            reduce using rule 343 (simple_name -> NAME .)
    LTEQ            reduce using rule 343 (simple_name -> NAME .)
    LSHIFT          reduce using rule 343 (simple_name -> NAME .)
    RSHIFT          reduce using rule 343 (simple_name -> NAME .)
    RRSHIFT         reduce using rule 343 (simple_name -> NAME .)
    INSTANCEOF      reduce using rule 343 (simple_name -> NAME .)
    EQ              reduce using rule 343 (simple_name -> NAME .)
    NEQ             reduce using rule 343 (simple_name -> NAME .)
    &               reduce using rule 343 (simple_name -> NAME .)
    ^               reduce using rule 343 (simple_name -> NAME .)
    |               reduce using rule 343 (simple_name -> NAME .)
    AND             reduce using rule 343 (simple_name -> NAME .)
    ?               reduce using rule 343 (simple_name -> NAME .)
    OR              reduce using rule 343 (simple_name -> NAME .)
    )               reduce using rule 343 (simple_name -> NAME .)
    ,               reduce using rule 343 (simple_name -> NAME .)
    }               reduce using rule 343 (simple_name -> NAME .)
    ;               reduce using rule 343 (simple_name -> NAME .)
    $end            reduce using rule 343 (simple_name -> NAME .)
    :               reduce using rule 343 (simple_name -> NAME .)
    ]               reduce using rule 343 (simple_name -> NAME .)
    =               reduce using rule 343 (simple_name -> NAME .)
    TIMES_ASSIGN    reduce using rule 343 (simple_name -> NAME .)
    DIVIDE_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    REMAINDER_ASSIGN reduce using rule 343 (simple_name -> NAME .)
    PLUS_ASSIGN     reduce using rule 343 (simple_name -> NAME .)
    MINUS_ASSIGN    reduce using rule 343 (simple_name -> NAME .)
    LSHIFT_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    RSHIFT_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    RRSHIFT_ASSIGN  reduce using rule 343 (simple_name -> NAME .)
    AND_ASSIGN      reduce using rule 343 (simple_name -> NAME .)
    OR_ASSIGN       reduce using rule 343 (simple_name -> NAME .)
    XOR_ASSIGN      reduce using rule 343 (simple_name -> NAME .)
    (               shift and go to state 343


state 180

    (50) equality_expression -> instanceof_expression .
    (59) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQ              reduce using rule 50 (equality_expression -> instanceof_expression .)
    NEQ             reduce using rule 50 (equality_expression -> instanceof_expression .)
    &               reduce using rule 50 (equality_expression -> instanceof_expression .)
    ^               reduce using rule 50 (equality_expression -> instanceof_expression .)
    |               reduce using rule 50 (equality_expression -> instanceof_expression .)
    AND             reduce using rule 50 (equality_expression -> instanceof_expression .)
    ?               reduce using rule 50 (equality_expression -> instanceof_expression .)
    OR              reduce using rule 50 (equality_expression -> instanceof_expression .)
    )               reduce using rule 50 (equality_expression -> instanceof_expression .)
    ,               reduce using rule 50 (equality_expression -> instanceof_expression .)
    $end            reduce using rule 50 (equality_expression -> instanceof_expression .)
    :               reduce using rule 50 (equality_expression -> instanceof_expression .)
    }               reduce using rule 50 (equality_expression -> instanceof_expression .)
    ;               reduce using rule 50 (equality_expression -> instanceof_expression .)
    ]               reduce using rule 50 (equality_expression -> instanceof_expression .)
    INSTANCEOF      shift and go to state 386


state 181

    (120) unary_expression_not_plus_minus -> ~ . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 387
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 182

    (40) exclusive_or_expression -> and_expression .
    (46) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    |               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    AND             reduce using rule 40 (exclusive_or_expression -> and_expression .)
    ?               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 40 (exclusive_or_expression -> and_expression .)
    )               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    ,               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    ;               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    :               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    $end            reduce using rule 40 (exclusive_or_expression -> and_expression .)
    }               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    ]               reduce using rule 40 (exclusive_or_expression -> and_expression .)
    &               shift and go to state 388


state 183

    (121) unary_expression_not_plus_minus -> ! . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 389
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 184

    (110) unary_expression -> - . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 390
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 185

    (7) assignment -> postfix_expression . assignment_operator assignment_expression
    (134) post_increment_expression -> postfix_expression . PLUSPLUS
    (135) post_decrement_expression -> postfix_expression . MINUSMINUS
    (119) unary_expression_not_plus_minus -> postfix_expression .
    (8) assignment_operator -> . =
    (9) assignment_operator -> . TIMES_ASSIGN
    (10) assignment_operator -> . DIVIDE_ASSIGN
    (11) assignment_operator -> . REMAINDER_ASSIGN
    (12) assignment_operator -> . PLUS_ASSIGN
    (13) assignment_operator -> . MINUS_ASSIGN
    (14) assignment_operator -> . LSHIFT_ASSIGN
    (15) assignment_operator -> . RSHIFT_ASSIGN
    (16) assignment_operator -> . RRSHIFT_ASSIGN
    (17) assignment_operator -> . AND_ASSIGN
    (18) assignment_operator -> . OR_ASSIGN
    (19) assignment_operator -> . XOR_ASSIGN

    PLUSPLUS        shift and go to state 242
    MINUSMINUS      shift and go to state 251
    *               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    /               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    %               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    +               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    -               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    LSHIFT          reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    RSHIFT          reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    RRSHIFT         reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    >               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    <               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    GTEQ            reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    LTEQ            reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    INSTANCEOF      reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    EQ              reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    NEQ             reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    &               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ^               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    |               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    AND             reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ?               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    OR              reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    $end            reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ;               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    )               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ,               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ]               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    :               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    }               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    =               shift and go to state 252
    TIMES_ASSIGN    shift and go to state 239
    DIVIDE_ASSIGN   shift and go to state 248
    REMAINDER_ASSIGN shift and go to state 244
    PLUS_ASSIGN     shift and go to state 250
    MINUS_ASSIGN    shift and go to state 246
    LSHIFT_ASSIGN   shift and go to state 241
    RSHIFT_ASSIGN   shift and go to state 240
    RRSHIFT_ASSIGN  shift and go to state 243
    AND_ASSIGN      shift and go to state 247
    OR_ASSIGN       shift and go to state 245
    XOR_ASSIGN      shift and go to state 253

    assignment_operator            shift and go to state 249

state 186

    (1) expression -> assignment_expression .

    )               reduce using rule 1 (expression -> assignment_expression .)
    ,               reduce using rule 1 (expression -> assignment_expression .)
    ;               reduce using rule 1 (expression -> assignment_expression .)
    }               reduce using rule 1 (expression -> assignment_expression .)
    :               reduce using rule 1 (expression -> assignment_expression .)
    ]               reduce using rule 1 (expression -> assignment_expression .)
    $end            reduce using rule 1 (expression -> assignment_expression .)


state 187

    (3) assignment_expression -> assignment .

    }               reduce using rule 3 (assignment_expression -> assignment .)
    ,               reduce using rule 3 (assignment_expression -> assignment .)
    )               reduce using rule 3 (assignment_expression -> assignment .)
    ;               reduce using rule 3 (assignment_expression -> assignment .)
    ]               reduce using rule 3 (assignment_expression -> assignment .)
    $end            reduce using rule 3 (assignment_expression -> assignment .)
    :               reduce using rule 3 (assignment_expression -> assignment .)


state 188

    (4) assignment_expression -> conditional_expression .

    }               reduce using rule 4 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 4 (assignment_expression -> conditional_expression .)
    )               reduce using rule 4 (assignment_expression -> conditional_expression .)
    ;               reduce using rule 4 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 4 (assignment_expression -> conditional_expression .)
    $end            reduce using rule 4 (assignment_expression -> conditional_expression .)
    :               reduce using rule 4 (assignment_expression -> conditional_expression .)


state 189

    (329) field_access -> SUPER . . NAME
    (224) method_invocation -> SUPER . . type_arguments NAME ( argument_list_opt )
    (227) method_invocation -> SUPER . . NAME ( argument_list_opt )

    .               shift and go to state 391


state 190

    (457) class_header_extends_opt -> class_header_extends .

    IMPLEMENTS      reduce using rule 457 (class_header_extends_opt -> class_header_extends .)
    {               reduce using rule 457 (class_header_extends_opt -> class_header_extends .)


state 191

    (453) class_header -> class_header_name class_header_extends_opt . class_header_implements_opt
    (460) class_header_implements_opt -> . class_header_implements
    (461) class_header_implements_opt -> . empty
    (462) class_header_implements -> . IMPLEMENTS interface_type_list
    (623) empty -> .

    IMPLEMENTS      shift and go to state 229
    {               reduce using rule 623 (empty -> .)

    class_header_implements_opt    shift and go to state 392
    class_header_implements        shift and go to state 230
    empty                          shift and go to state 231

state 192

    (459) class_header_extends -> EXTENDS . class_type
    (382) class_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type                     shift and go to state 393
    class_or_interface             shift and go to state 144
    generic_type                   shift and go to state 331
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 394
    name                           shift and go to state 335

state 193

    (458) class_header_extends_opt -> empty .

    IMPLEMENTS      reduce using rule 458 (class_header_extends_opt -> empty .)
    {               reduce using rule 458 (class_header_extends_opt -> empty .)


state 194

    (529) enum_declaration -> enum_header enum_body .

    ;               reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    @               reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    PUBLIC          reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    PROTECTED       reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    PRIVATE         reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    STATIC          reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    ABSTRACT        reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    FINAL           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    NATIVE          reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    SYNCHRONIZED    reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    TRANSIENT       reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    VOLATILE        reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    STRICTFP        reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    NAME            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    ENUM            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    CLASS           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    INTERFACE       reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    <               reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    BOOLEAN         reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    VOID            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    BYTE            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    SHORT           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    INT             reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    LONG            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    CHAR            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    FLOAT           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    DOUBLE          reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    }               reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    IF              reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    WHILE           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    FOR             reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    {               reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    ASSERT          reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    SWITCH          reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    DO              reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    BREAK           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    CONTINUE        reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    RETURN          reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    THROW           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    TRY             reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    THIS            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    SUPER           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    PLUSPLUS        reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    MINUSMINUS      reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    NEW             reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    (               reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    NUM             reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    CHAR_LITERAL    reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    STRING_LITERAL  reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    TRUE            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    FALSE           reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    NULL            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    CASE            reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    DEFAULT         reduce using rule 529 (enum_declaration -> enum_header enum_body .)
    $end            reduce using rule 529 (enum_declaration -> enum_header enum_body .)


state 195

    (533) enum_body -> { . enum_body_declarations_opt }
    (534) enum_body -> { . , enum_body_declarations_opt }
    (535) enum_body -> { . enum_constants , enum_body_declarations_opt }
    (536) enum_body -> { . enum_constants enum_body_declarations_opt }
    (550) enum_body_declarations_opt -> . enum_declarations
    (551) enum_body_declarations_opt -> . empty
    (537) enum_constants -> . enum_constant
    (538) enum_constants -> . enum_constants , enum_constant
    (552) enum_declarations -> . ; class_body_declarations_opt
    (623) empty -> .
    (539) enum_constant -> . enum_constant_header class_body
    (540) enum_constant -> . enum_constant_header
    (541) enum_constant_header -> . enum_constant_header_name arguments_opt
    (542) enum_constant_header_name -> . modifiers_opt NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    ,               shift and go to state 399
    ;               shift and go to state 400
    }               reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 402

    annotation_name                shift and go to state 38
    enum_constant_header           shift and go to state 405
    enum_constants                 shift and go to state 398
    enum_constant_header_name      shift and go to state 403
    enum_constant                  shift and go to state 404
    marker_annotation              shift and go to state 22
    single_member_annotation       shift and go to state 18
    enum_declarations              shift and go to state 396
    enum_body_declarations_opt     shift and go to state 397
    modifiers                      shift and go to state 406
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 51
    annotation                     shift and go to state 10
    empty                          shift and go to state 401
    modifiers_opt                  shift and go to state 395

state 196

    (454) class_header_name -> class_header_name1 type_parameters .

    EXTENDS         reduce using rule 454 (class_header_name -> class_header_name1 type_parameters .)
    IMPLEMENTS      reduce using rule 454 (class_header_name -> class_header_name1 type_parameters .)
    {               reduce using rule 454 (class_header_name -> class_header_name1 type_parameters .)


state 197

    (430) type_parameters -> < . type_parameter_list1
    (439) type_parameter_list1 -> . type_parameter1
    (440) type_parameter_list1 -> . type_parameter_list , type_parameter1
    (441) type_parameter1 -> . type_parameter_header >
    (442) type_parameter1 -> . type_parameter_header EXTENDS reference_type1
    (443) type_parameter1 -> . type_parameter_header EXTENDS reference_type additional_bound_list1
    (431) type_parameter_list -> . type_parameter
    (432) type_parameter_list -> . type_parameter_list , type_parameter
    (429) type_parameter_header -> . NAME
    (433) type_parameter -> . type_parameter_header
    (434) type_parameter -> . type_parameter_header EXTENDS reference_type
    (435) type_parameter -> . type_parameter_header EXTENDS reference_type additional_bound_list

    NAME            shift and go to state 408

    type_parameter_list            shift and go to state 407
    type_parameter_header          shift and go to state 409
    type_parameter1                shift and go to state 410
    type_parameter_list1           shift and go to state 411
    type_parameter                 shift and go to state 412

state 198

    (513) interface_header_extends_opt -> interface_header_extends .

    {               reduce using rule 513 (interface_header_extends_opt -> interface_header_extends .)


state 199

    (515) interface_header_extends -> EXTENDS . interface_type_list
    (463) interface_type_list -> . interface_type
    (464) interface_type_list -> . interface_type_list , interface_type
    (465) interface_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 335
    class_or_interface             shift and go to state 144
    interface_type                 shift and go to state 413
    generic_type                   shift and go to state 331
    interface_type_list            shift and go to state 414
    class_or_interface_type        shift and go to state 415
    simple_name                    shift and go to state 64

state 200

    (514) interface_header_extends_opt -> empty .

    {               reduce using rule 514 (interface_header_extends_opt -> empty .)


state 201

    (509) interface_header -> interface_header_name interface_header_extends_opt .

    {               reduce using rule 509 (interface_header -> interface_header_name interface_header_extends_opt .)


state 202

    (559) annotation_type_body -> { . annotation_type_member_declarations_opt }
    (560) annotation_type_member_declarations_opt -> . annotation_type_member_declarations
    (561) annotation_type_member_declarations_opt -> . empty
    (562) annotation_type_member_declarations -> . annotation_type_member_declaration
    (563) annotation_type_member_declarations -> . annotation_type_member_declarations annotation_type_member_declaration
    (623) empty -> .
    (564) annotation_type_member_declaration -> . annotation_method_header ;
    (565) annotation_type_member_declaration -> . constant_declaration
    (566) annotation_type_member_declaration -> . constructor_declaration
    (567) annotation_type_member_declaration -> . type_declaration
    (568) annotation_method_header -> . annotation_method_header_name formal_parameter_list_opt ) method_header_extended_dims annotation_method_header_default_value_opt
    (528) constant_declaration -> . field_declaration
    (484) constructor_declaration -> . constructor_header method_body
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (569) annotation_method_header_name -> . modifiers_opt type_parameters type NAME (
    (570) annotation_method_header_name -> . modifiers_opt type NAME (
    (482) field_declaration -> . modifiers_opt type variable_declarators ;
    (485) constructor_header -> . constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (486) constructor_header_name -> . modifiers_opt type_parameters NAME (
    (487) constructor_header_name -> . modifiers_opt NAME (
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    }               reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    ;               shift and go to state 28
    @               shift and go to state 30
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    annotation_type_member_declarations_opt shift and go to state 416
    constructor_header_name        shift and go to state 417
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 418
    marker_annotation              shift and go to state 22
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 419
    annotation_method_header       shift and go to state 420
    annotation_method_header_name  shift and go to state 421
    constructor_declaration        shift and go to state 422
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    constant_declaration           shift and go to state 423
    annotation_type_member_declarations shift and go to state 425
    empty                          shift and go to state 424
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    interface_header_name          shift and go to state 14
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 426
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    annotation_type_member_declaration shift and go to state 427
    constructor_header             shift and go to state 428
    class_declaration              shift and go to state 46
    field_declaration              shift and go to state 429
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 203

    (553) annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .

    ;               reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    STATIC          reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    {               reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    @               reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    PUBLIC          reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    PROTECTED       reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    PRIVATE         reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    ABSTRACT        reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    FINAL           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    NATIVE          reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    SYNCHRONIZED    reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    TRANSIENT       reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    VOLATILE        reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    STRICTFP        reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    NAME            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    ENUM            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    CLASS           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    INTERFACE       reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    <               reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    BOOLEAN         reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    VOID            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    BYTE            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    SHORT           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    INT             reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    LONG            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    CHAR            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    FLOAT           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    DOUBLE          reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    }               reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    IF              reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    WHILE           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    FOR             reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    ASSERT          reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    SWITCH          reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    DO              reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    BREAK           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    CONTINUE        reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    RETURN          reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    THROW           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    TRY             reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    THIS            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    SUPER           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    PLUSPLUS        reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    MINUSMINUS      reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    NEW             reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    (               reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    NUM             reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    CHAR_LITERAL    reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    STRING_LITERAL  reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    TRUE            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    FALSE           reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    NULL            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    CASE            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    DEFAULT         reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)
    $end            reduce using rule 553 (annotation_type_declaration -> annotation_type_declaration_header annotation_type_body .)


state 204

    (619) type_declarations -> type_declarations type_declaration .

    ;               reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    @               reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    PUBLIC          reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    PROTECTED       reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    PRIVATE         reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    STATIC          reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    ABSTRACT        reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    FINAL           reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    NATIVE          reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    SYNCHRONIZED    reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    TRANSIENT       reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    VOLATILE        reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    STRICTFP        reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    ENUM            reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    CLASS           reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    INTERFACE       reduce using rule 619 (type_declarations -> type_declarations type_declaration .)
    $end            reduce using rule 619 (type_declarations -> type_declarations type_declaration .)


state 205

    (555) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME type_parameters
    (351) modifiers_opt -> modifiers .
    (354) modifiers -> modifiers . modifier
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    @               shift and go to state 223
    ENUM            reduce using rule 351 (modifiers_opt -> modifiers .)
    CLASS           reduce using rule 351 (modifiers_opt -> modifiers .)
    INTERFACE       reduce using rule 351 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    annotation_name                shift and go to state 38
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 225
    annotation                     shift and go to state 10

state 206

    (600) compilation_unit -> package_declaration type_declarations .
    (619) type_declarations -> type_declarations . type_declaration
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    $end            reduce using rule 600 (compilation_unit -> package_declaration type_declarations .)
    ;               shift and go to state 28
    @               shift and go to state 30
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 204
    marker_annotation              shift and go to state 22
    interface_header_name          shift and go to state 14
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 26
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    empty                          shift and go to state 121
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 205
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 46
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 207

    (598) compilation_unit -> package_declaration import_declarations .
    (599) compilation_unit -> package_declaration import_declarations . type_declarations
    (609) import_declarations -> import_declarations . import_declaration
    (618) type_declarations -> . type_declaration
    (619) type_declarations -> . type_declarations type_declaration
    (610) import_declaration -> . single_type_import_declaration
    (611) import_declaration -> . type_import_on_demand_declaration
    (612) import_declaration -> . single_static_import_declaration
    (613) import_declaration -> . static_import_on_demand_declaration
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (614) single_type_import_declaration -> . IMPORT name ;
    (615) type_import_on_demand_declaration -> . IMPORT name . * ;
    (616) single_static_import_declaration -> . IMPORT STATIC name ;
    (617) static_import_on_demand_declaration -> . IMPORT STATIC name . * ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    $end            reduce using rule 598 (compilation_unit -> package_declaration import_declarations .)
    ;               shift and go to state 28
    IMPORT          shift and go to state 27
    @               shift and go to state 30
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 11
    marker_annotation              shift and go to state 22
    interface_header_name          shift and go to state 14
    static_import_on_demand_declaration shift and go to state 15
    annotation_type_declaration_header shift and go to state 16
    normal_annotation              shift and go to state 50
    modifiers_opt                  shift and go to state 26
    type_declarations              shift and go to state 430
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    single_static_import_declaration shift and go to state 37
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    import_declaration             shift and go to state 215
    single_type_import_declaration shift and go to state 35
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    type_import_on_demand_declaration shift and go to state 39
    modifiers                      shift and go to state 205
    interface_header_name1         shift and go to state 42
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 46
    empty                          shift and go to state 121
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 208

    (531) enum_header_name -> modifiers_opt ENUM . NAME
    (532) enum_header_name -> modifiers_opt ENUM . NAME type_parameters

    NAME            shift and go to state 431


state 209

    (512) interface_header_name1 -> modifiers_opt INTERFACE . NAME

    NAME            shift and go to state 432


state 210

    (456) class_header_name1 -> modifiers_opt CLASS . NAME

    NAME            shift and go to state 433


state 211

    (614) single_type_import_declaration -> IMPORT name . ;
    (615) type_import_on_demand_declaration -> IMPORT name . . * ;
    (344) qualified_name -> name . . simple_name

    ;               shift and go to state 435
    .               shift and go to state 434


state 212

    (343) simple_name -> NAME .

    .               reduce using rule 343 (simple_name -> NAME .)
    <               reduce using rule 343 (simple_name -> NAME .)
    (               reduce using rule 343 (simple_name -> NAME .)
    ;               reduce using rule 343 (simple_name -> NAME .)
    ,               reduce using rule 343 (simple_name -> NAME .)
    {               reduce using rule 343 (simple_name -> NAME .)
    [               reduce using rule 343 (simple_name -> NAME .)
    >               reduce using rule 343 (simple_name -> NAME .)
    RSHIFT          reduce using rule 343 (simple_name -> NAME .)
    NAME            reduce using rule 343 (simple_name -> NAME .)
    INSTANCEOF      reduce using rule 343 (simple_name -> NAME .)
    EQ              reduce using rule 343 (simple_name -> NAME .)
    NEQ             reduce using rule 343 (simple_name -> NAME .)
    &               reduce using rule 343 (simple_name -> NAME .)
    ^               reduce using rule 343 (simple_name -> NAME .)
    |               reduce using rule 343 (simple_name -> NAME .)
    AND             reduce using rule 343 (simple_name -> NAME .)
    ?               reduce using rule 343 (simple_name -> NAME .)
    OR              reduce using rule 343 (simple_name -> NAME .)
    $end            reduce using rule 343 (simple_name -> NAME .)
    :               reduce using rule 343 (simple_name -> NAME .)
    )               reduce using rule 343 (simple_name -> NAME .)
    ]               reduce using rule 343 (simple_name -> NAME .)
    }               reduce using rule 343 (simple_name -> NAME .)
    ELLIPSIS        reduce using rule 343 (simple_name -> NAME .)
    PACKAGE         reduce using rule 343 (simple_name -> NAME .)
    @               reduce using rule 343 (simple_name -> NAME .)
    PUBLIC          reduce using rule 343 (simple_name -> NAME .)
    PROTECTED       reduce using rule 343 (simple_name -> NAME .)
    PRIVATE         reduce using rule 343 (simple_name -> NAME .)
    STATIC          reduce using rule 343 (simple_name -> NAME .)
    ABSTRACT        reduce using rule 343 (simple_name -> NAME .)
    FINAL           reduce using rule 343 (simple_name -> NAME .)
    NATIVE          reduce using rule 343 (simple_name -> NAME .)
    SYNCHRONIZED    reduce using rule 343 (simple_name -> NAME .)
    TRANSIENT       reduce using rule 343 (simple_name -> NAME .)
    VOLATILE        reduce using rule 343 (simple_name -> NAME .)
    STRICTFP        reduce using rule 343 (simple_name -> NAME .)
    ENUM            reduce using rule 343 (simple_name -> NAME .)
    CLASS           reduce using rule 343 (simple_name -> NAME .)
    INTERFACE       reduce using rule 343 (simple_name -> NAME .)
    BOOLEAN         reduce using rule 343 (simple_name -> NAME .)
    VOID            reduce using rule 343 (simple_name -> NAME .)
    BYTE            reduce using rule 343 (simple_name -> NAME .)
    SHORT           reduce using rule 343 (simple_name -> NAME .)
    INT             reduce using rule 343 (simple_name -> NAME .)
    LONG            reduce using rule 343 (simple_name -> NAME .)
    CHAR            reduce using rule 343 (simple_name -> NAME .)
    FLOAT           reduce using rule 343 (simple_name -> NAME .)
    DOUBLE          reduce using rule 343 (simple_name -> NAME .)
    IMPLEMENTS      reduce using rule 343 (simple_name -> NAME .)
    RRSHIFT         reduce using rule 343 (simple_name -> NAME .)
    =               reduce using rule 343 (simple_name -> NAME .)


state 213

    (616) single_static_import_declaration -> IMPORT STATIC . name ;
    (617) static_import_on_demand_declaration -> IMPORT STATIC . name . * ;
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    name                           shift and go to state 436
    qualified_name                 shift and go to state 141
    simple_name                    shift and go to state 64

state 214

    (603) compilation_unit -> import_declarations type_declarations .
    (619) type_declarations -> type_declarations . type_declaration
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    $end            reduce using rule 603 (compilation_unit -> import_declarations type_declarations .)
    ;               shift and go to state 28
    @               shift and go to state 30
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 204
    marker_annotation              shift and go to state 22
    interface_header_name          shift and go to state 14
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 26
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 205
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 46
    empty                          shift and go to state 121
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 215

    (609) import_declarations -> import_declarations import_declaration .

    ;               reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    IMPORT          reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    @               reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    PUBLIC          reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    PROTECTED       reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    PRIVATE         reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    STATIC          reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    ABSTRACT        reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    FINAL           reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    NATIVE          reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    SYNCHRONIZED    reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    TRANSIENT       reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    VOLATILE        reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    STRICTFP        reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    ENUM            reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    CLASS           reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    INTERFACE       reduce using rule 609 (import_declarations -> import_declarations import_declaration .)
    $end            reduce using rule 609 (import_declarations -> import_declarations import_declaration .)


state 216

    (588) annotation_name -> @ name .
    (344) qualified_name -> name . . simple_name

    (               reduce using rule 588 (annotation_name -> @ name .)
    @               reduce using rule 588 (annotation_name -> @ name .)
    PUBLIC          reduce using rule 588 (annotation_name -> @ name .)
    PROTECTED       reduce using rule 588 (annotation_name -> @ name .)
    PRIVATE         reduce using rule 588 (annotation_name -> @ name .)
    STATIC          reduce using rule 588 (annotation_name -> @ name .)
    ABSTRACT        reduce using rule 588 (annotation_name -> @ name .)
    FINAL           reduce using rule 588 (annotation_name -> @ name .)
    NATIVE          reduce using rule 588 (annotation_name -> @ name .)
    SYNCHRONIZED    reduce using rule 588 (annotation_name -> @ name .)
    TRANSIENT       reduce using rule 588 (annotation_name -> @ name .)
    VOLATILE        reduce using rule 588 (annotation_name -> @ name .)
    STRICTFP        reduce using rule 588 (annotation_name -> @ name .)
    BOOLEAN         reduce using rule 588 (annotation_name -> @ name .)
    VOID            reduce using rule 588 (annotation_name -> @ name .)
    BYTE            reduce using rule 588 (annotation_name -> @ name .)
    SHORT           reduce using rule 588 (annotation_name -> @ name .)
    INT             reduce using rule 588 (annotation_name -> @ name .)
    LONG            reduce using rule 588 (annotation_name -> @ name .)
    CHAR            reduce using rule 588 (annotation_name -> @ name .)
    FLOAT           reduce using rule 588 (annotation_name -> @ name .)
    DOUBLE          reduce using rule 588 (annotation_name -> @ name .)
    NAME            reduce using rule 588 (annotation_name -> @ name .)
    ENUM            reduce using rule 588 (annotation_name -> @ name .)
    CLASS           reduce using rule 588 (annotation_name -> @ name .)
    INTERFACE       reduce using rule 588 (annotation_name -> @ name .)
    <               reduce using rule 588 (annotation_name -> @ name .)
    ,               reduce using rule 588 (annotation_name -> @ name .)
    )               reduce using rule 588 (annotation_name -> @ name .)
    }               reduce using rule 588 (annotation_name -> @ name .)
    PACKAGE         reduce using rule 588 (annotation_name -> @ name .)
    ;               reduce using rule 588 (annotation_name -> @ name .)
    .               shift and go to state 437


state 217

    (557) annotation_type_declaration_header_name -> @ INTERFACE . NAME type_parameters
    (558) annotation_type_declaration_header_name -> @ INTERFACE . NAME

    NAME            shift and go to state 438


state 218

    (554) annotation_type_declaration_header -> annotation_type_declaration_header_name class_header_extends_opt . class_header_implements_opt
    (460) class_header_implements_opt -> . class_header_implements
    (461) class_header_implements_opt -> . empty
    (462) class_header_implements -> . IMPLEMENTS interface_type_list
    (623) empty -> .

    IMPLEMENTS      shift and go to state 229
    {               reduce using rule 623 (empty -> .)

    class_header_implements_opt    shift and go to state 439
    class_header_implements        shift and go to state 230
    empty                          shift and go to state 231

state 219

    (607) package_declaration_name -> PACKAGE name .
    (344) qualified_name -> name . . simple_name

    ;               reduce using rule 607 (package_declaration_name -> PACKAGE name .)
    .               shift and go to state 437


state 220

    (466) class_body -> { . class_body_declarations_opt }
    (467) class_body_declarations_opt -> . class_body_declarations
    (468) class_body_declarations_opt -> . empty
    (469) class_body_declarations -> . class_body_declaration
    (470) class_body_declarations -> . class_body_declarations class_body_declaration
    (623) empty -> .
    (471) class_body_declaration -> . class_member_declaration
    (472) class_body_declaration -> . static_initializer
    (473) class_body_declaration -> . constructor_declaration
    (474) class_body_declaration -> . block
    (475) class_member_declaration -> . field_declaration
    (476) class_member_declaration -> . class_declaration
    (477) class_member_declaration -> . method_declaration
    (478) class_member_declaration -> . interface_declaration
    (479) class_member_declaration -> . enum_declaration
    (480) class_member_declaration -> . annotation_type_declaration
    (481) class_member_declaration -> . ;
    (483) static_initializer -> . STATIC block
    (484) constructor_declaration -> . constructor_header method_body
    (164) block -> . { block_statements_opt }
    (482) field_declaration -> . modifiers_opt type variable_declarators ;
    (452) class_declaration -> . class_header class_body
    (501) method_declaration -> . abstract_method_declaration
    (502) method_declaration -> . method_header method_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (485) constructor_header -> . constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (503) abstract_method_declaration -> . method_header ;
    (504) method_header -> . method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (486) constructor_header_name -> . modifiers_opt type_parameters NAME (
    (487) constructor_header_name -> . modifiers_opt NAME (
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (505) method_header_name -> . modifiers_opt type_parameters type NAME (
    (506) method_header_name -> . modifiers_opt type NAME (
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    }               reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    ;               shift and go to state 447
    STATIC          shift and go to state 442
    {               shift and go to state 106
    @               shift and go to state 30
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    class_body_declarations        shift and go to state 440
    interface_declaration          shift and go to state 441
    enum_header                    shift and go to state 7
    constructor_header_name        shift and go to state 417
    class_header_name1             shift and go to state 8
    marker_annotation              shift and go to state 22
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 443
    constructor_declaration        shift and go to state 444
    class_header_name              shift and go to state 5
    method_declaration             shift and go to state 445
    annotation                     shift and go to state 10
    class_body_declaration         shift and go to state 446
    empty                          shift and go to state 448
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    interface_header_name          shift and go to state 14
    method_header_name             shift and go to state 449
    abstract_method_declaration    shift and go to state 450
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    static_initializer             shift and go to state 451
    modifiers                      shift and go to state 426
    class_member_declaration       shift and go to state 452
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 453
    interface_header               shift and go to state 45
    method_header                  shift and go to state 454
    constructor_header             shift and go to state 428
    class_declaration              shift and go to state 455
    field_declaration              shift and go to state 456
    class_body_declarations_opt    shift and go to state 457
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 458
    block                          shift and go to state 459

state 221

    (452) class_declaration -> class_header class_body .

    IF              reduce using rule 452 (class_declaration -> class_header class_body .)
    WHILE           reduce using rule 452 (class_declaration -> class_header class_body .)
    FOR             reduce using rule 452 (class_declaration -> class_header class_body .)
    {               reduce using rule 452 (class_declaration -> class_header class_body .)
    ASSERT          reduce using rule 452 (class_declaration -> class_header class_body .)
    ;               reduce using rule 452 (class_declaration -> class_header class_body .)
    SWITCH          reduce using rule 452 (class_declaration -> class_header class_body .)
    DO              reduce using rule 452 (class_declaration -> class_header class_body .)
    BREAK           reduce using rule 452 (class_declaration -> class_header class_body .)
    CONTINUE        reduce using rule 452 (class_declaration -> class_header class_body .)
    RETURN          reduce using rule 452 (class_declaration -> class_header class_body .)
    SYNCHRONIZED    reduce using rule 452 (class_declaration -> class_header class_body .)
    THROW           reduce using rule 452 (class_declaration -> class_header class_body .)
    TRY             reduce using rule 452 (class_declaration -> class_header class_body .)
    NAME            reduce using rule 452 (class_declaration -> class_header class_body .)
    @               reduce using rule 452 (class_declaration -> class_header class_body .)
    BOOLEAN         reduce using rule 452 (class_declaration -> class_header class_body .)
    VOID            reduce using rule 452 (class_declaration -> class_header class_body .)
    BYTE            reduce using rule 452 (class_declaration -> class_header class_body .)
    SHORT           reduce using rule 452 (class_declaration -> class_header class_body .)
    INT             reduce using rule 452 (class_declaration -> class_header class_body .)
    LONG            reduce using rule 452 (class_declaration -> class_header class_body .)
    CHAR            reduce using rule 452 (class_declaration -> class_header class_body .)
    FLOAT           reduce using rule 452 (class_declaration -> class_header class_body .)
    DOUBLE          reduce using rule 452 (class_declaration -> class_header class_body .)
    PUBLIC          reduce using rule 452 (class_declaration -> class_header class_body .)
    PROTECTED       reduce using rule 452 (class_declaration -> class_header class_body .)
    PRIVATE         reduce using rule 452 (class_declaration -> class_header class_body .)
    STATIC          reduce using rule 452 (class_declaration -> class_header class_body .)
    ABSTRACT        reduce using rule 452 (class_declaration -> class_header class_body .)
    FINAL           reduce using rule 452 (class_declaration -> class_header class_body .)
    NATIVE          reduce using rule 452 (class_declaration -> class_header class_body .)
    TRANSIENT       reduce using rule 452 (class_declaration -> class_header class_body .)
    VOLATILE        reduce using rule 452 (class_declaration -> class_header class_body .)
    STRICTFP        reduce using rule 452 (class_declaration -> class_header class_body .)
    THIS            reduce using rule 452 (class_declaration -> class_header class_body .)
    SUPER           reduce using rule 452 (class_declaration -> class_header class_body .)
    PLUSPLUS        reduce using rule 452 (class_declaration -> class_header class_body .)
    MINUSMINUS      reduce using rule 452 (class_declaration -> class_header class_body .)
    NEW             reduce using rule 452 (class_declaration -> class_header class_body .)
    <               reduce using rule 452 (class_declaration -> class_header class_body .)
    (               reduce using rule 452 (class_declaration -> class_header class_body .)
    NUM             reduce using rule 452 (class_declaration -> class_header class_body .)
    CHAR_LITERAL    reduce using rule 452 (class_declaration -> class_header class_body .)
    STRING_LITERAL  reduce using rule 452 (class_declaration -> class_header class_body .)
    TRUE            reduce using rule 452 (class_declaration -> class_header class_body .)
    FALSE           reduce using rule 452 (class_declaration -> class_header class_body .)
    NULL            reduce using rule 452 (class_declaration -> class_header class_body .)
    ENUM            reduce using rule 452 (class_declaration -> class_header class_body .)
    CLASS           reduce using rule 452 (class_declaration -> class_header class_body .)
    INTERFACE       reduce using rule 452 (class_declaration -> class_header class_body .)
    }               reduce using rule 452 (class_declaration -> class_header class_body .)
    CASE            reduce using rule 452 (class_declaration -> class_header class_body .)
    DEFAULT         reduce using rule 452 (class_declaration -> class_header class_body .)
    $end            reduce using rule 452 (class_declaration -> class_header class_body .)


state 222

    (587) normal_annotation -> annotation_name ( . member_value_pairs_opt )
    (595) single_member_annotation -> annotation_name ( . single_member_annotation_member_value )
    (589) member_value_pairs_opt -> . member_value_pairs
    (590) member_value_pairs_opt -> . empty
    (596) single_member_annotation_member_value -> . member_value
    (591) member_value_pairs -> . member_value_pair
    (592) member_value_pairs -> . member_value_pairs , member_value_pair
    (623) empty -> .
    (574) member_value -> . conditional_expression_not_name
    (575) member_value -> . name
    (576) member_value -> . annotation
    (577) member_value -> . member_value_array_initializer
    (593) member_value_pair -> . simple_name = member_value
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name ? expression : conditional_expression
    (24) conditional_expression_not_name -> . name ? expression : conditional_expression
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (578) member_value_array_initializer -> . { member_values , }
    (579) member_value_array_initializer -> . { member_values }
    (580) member_value_array_initializer -> . { , }
    (581) member_value_array_initializer -> . { }
    (343) simple_name -> . NAME
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name OR conditional_and_expression
    (29) conditional_or_expression_not_name -> . name OR conditional_and_expression
    (344) qualified_name -> . name . simple_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name AND inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name AND inclusive_or_expression
    (588) annotation_name -> . @ name
    (37) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (38) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name | exclusive_or_expression
    (39) inclusive_or_expression_not_name -> . name | exclusive_or_expression
    (42) exclusive_or_expression_not_name -> . and_expression_not_name
    (43) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name ^ and_expression
    (44) exclusive_or_expression_not_name -> . name ^ and_expression
    (47) and_expression_not_name -> . equality_expression_not_name
    (48) and_expression_not_name -> . and_expression_not_name & equality_expression
    (49) and_expression_not_name -> . name & equality_expression
    (53) equality_expression_not_name -> . instanceof_expression_not_name
    (54) equality_expression_not_name -> . equality_expression_not_name EQ instanceof_expression
    (55) equality_expression_not_name -> . name EQ instanceof_expression
    (56) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (57) equality_expression_not_name -> . name NEQ instanceof_expression
    (60) instanceof_expression_not_name -> . relational_expression_not_name
    (61) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (62) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (68) relational_expression_not_name -> . shift_expression_not_name
    (69) relational_expression_not_name -> . shift_expression_not_name < shift_expression
    (70) relational_expression_not_name -> . name < shift_expression
    (71) relational_expression_not_name -> . shift_expression_not_name > shift_expression
    (72) relational_expression_not_name -> . name > shift_expression
    (73) relational_expression_not_name -> . shift_expression_not_name GTEQ shift_expression
    (74) relational_expression_not_name -> . name GTEQ shift_expression
    (75) relational_expression_not_name -> . shift_expression_not_name LTEQ shift_expression
    (76) relational_expression_not_name -> . name LTEQ shift_expression
    (81) shift_expression_not_name -> . additive_expression_not_name
    (82) shift_expression_not_name -> . shift_expression_not_name LSHIFT additive_expression
    (83) shift_expression_not_name -> . name LSHIFT additive_expression
    (84) shift_expression_not_name -> . shift_expression_not_name RSHIFT additive_expression
    (85) shift_expression_not_name -> . name RSHIFT additive_expression
    (86) shift_expression_not_name -> . shift_expression_not_name RRSHIFT additive_expression
    (87) shift_expression_not_name -> . name RRSHIFT additive_expression
    (91) additive_expression_not_name -> . multiplicative_expression_not_name
    (92) additive_expression_not_name -> . additive_expression_not_name + multiplicative_expression
    (93) additive_expression_not_name -> . name + multiplicative_expression
    (94) additive_expression_not_name -> . additive_expression_not_name - multiplicative_expression
    (95) additive_expression_not_name -> . name - multiplicative_expression
    (100) multiplicative_expression_not_name -> . unary_expression_not_name
    (101) multiplicative_expression_not_name -> . multiplicative_expression_not_name * unary_expression
    (102) multiplicative_expression_not_name -> . name * unary_expression
    (103) multiplicative_expression_not_name -> . multiplicative_expression_not_name / unary_expression
    (104) multiplicative_expression_not_name -> . name / unary_expression
    (105) multiplicative_expression_not_name -> . multiplicative_expression_not_name % unary_expression
    (106) multiplicative_expression_not_name -> . name % unary_expression
    (112) unary_expression_not_name -> . pre_increment_expression
    (113) unary_expression_not_name -> . pre_decrement_expression
    (114) unary_expression_not_name -> . + unary_expression
    (115) unary_expression_not_name -> . - unary_expression
    (116) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (123) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (124) unary_expression_not_plus_minus_not_name -> . ~ unary_expression
    (125) unary_expression_not_plus_minus_not_name -> . ! unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . cast_expression
    (131) postfix_expression_not_name -> . primary
    (132) postfix_expression_not_name -> . post_increment_expression
    (133) postfix_expression_not_name -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    )               reduce using rule 623 (empty -> .)
    {               shift and go to state 467
    NAME            shift and go to state 179
    @               shift and go to state 402
    +               shift and go to state 264
    -               shift and go to state 278
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 267
    !               shift and go to state 277
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    array_creation_without_array_initializer shift and go to state 95
    relational_expression_not_name shift and go to state 262
    array_access                   shift and go to state 90
    primary                        shift and go to state 468
    marker_annotation              shift and go to state 22
    inclusive_or_expression_not_name shift and go to state 269
    member_value_pair              shift and go to state 469
    multiplicative_expression_not_name shift and go to state 276
    simple_name                    shift and go to state 470
    primitive_type                 shift and go to state 174
    postfix_expression_not_name    shift and go to state 265
    member_value                   shift and go to state 465
    post_decrement_expression      shift and go to state 460
    pre_increment_expression       shift and go to state 266
    postfix_expression             shift and go to state 472
    conditional_expression_not_name shift and go to state 473
    literal                        shift and go to state 146
    instanceof_expression_not_name shift and go to state 273
    member_value_pairs             shift and go to state 466
    cast_expression                shift and go to state 270
    shift_expression_not_name      shift and go to state 256
    unary_expression_not_name      shift and go to state 280
    empty                          shift and go to state 471
    equality_expression_not_name   shift and go to state 281
    primary_no_new_array           shift and go to state 87
    field_access                   shift and go to state 96
    unary_expression_not_plus_minus_not_name shift and go to state 257
    pre_decrement_expression       shift and go to state 261
    qualified_name                 shift and go to state 141
    single_member_annotation       shift and go to state 18
    conditional_and_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 122
    member_value_array_initializer shift and go to state 474
    single_member_annotation_member_value shift and go to state 461
    array_creation_with_array_initializer shift and go to state 101
    method_invocation              shift and go to state 176
    normal_annotation              shift and go to state 50
    and_expression_not_name        shift and go to state 271
    annotation                     shift and go to state 475
    annotation_name                shift and go to state 38
    name                           shift and go to state 462
    conditional_or_expression_not_name shift and go to state 272
    exclusive_or_expression_not_name shift and go to state 254
    post_increment_expression      shift and go to state 463
    member_value_pairs_opt         shift and go to state 464
    class_instance_creation_expression shift and go to state 156
    additive_expression_not_name   shift and go to state 274

state 223

    (555) annotation_type_declaration_header_name -> modifiers @ . INTERFACE NAME
    (556) annotation_type_declaration_header_name -> modifiers @ . INTERFACE NAME type_parameters
    (588) annotation_name -> @ . name
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    INTERFACE       shift and go to state 476
    NAME            shift and go to state 212

    name                           shift and go to state 216
    qualified_name                 shift and go to state 141
    simple_name                    shift and go to state 64

state 224

    (606) package_declaration_name -> modifiers PACKAGE . name
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    name                           shift and go to state 477
    qualified_name                 shift and go to state 141
    simple_name                    shift and go to state 64

state 225

    (354) modifiers -> modifiers modifier .

    @               reduce using rule 354 (modifiers -> modifiers modifier .)
    PUBLIC          reduce using rule 354 (modifiers -> modifiers modifier .)
    PROTECTED       reduce using rule 354 (modifiers -> modifiers modifier .)
    PRIVATE         reduce using rule 354 (modifiers -> modifiers modifier .)
    STATIC          reduce using rule 354 (modifiers -> modifiers modifier .)
    ABSTRACT        reduce using rule 354 (modifiers -> modifiers modifier .)
    FINAL           reduce using rule 354 (modifiers -> modifiers modifier .)
    NATIVE          reduce using rule 354 (modifiers -> modifiers modifier .)
    SYNCHRONIZED    reduce using rule 354 (modifiers -> modifiers modifier .)
    TRANSIENT       reduce using rule 354 (modifiers -> modifiers modifier .)
    VOLATILE        reduce using rule 354 (modifiers -> modifiers modifier .)
    STRICTFP        reduce using rule 354 (modifiers -> modifiers modifier .)
    BOOLEAN         reduce using rule 354 (modifiers -> modifiers modifier .)
    VOID            reduce using rule 354 (modifiers -> modifiers modifier .)
    BYTE            reduce using rule 354 (modifiers -> modifiers modifier .)
    SHORT           reduce using rule 354 (modifiers -> modifiers modifier .)
    INT             reduce using rule 354 (modifiers -> modifiers modifier .)
    LONG            reduce using rule 354 (modifiers -> modifiers modifier .)
    CHAR            reduce using rule 354 (modifiers -> modifiers modifier .)
    FLOAT           reduce using rule 354 (modifiers -> modifiers modifier .)
    DOUBLE          reduce using rule 354 (modifiers -> modifiers modifier .)
    NAME            reduce using rule 354 (modifiers -> modifiers modifier .)
    ENUM            reduce using rule 354 (modifiers -> modifiers modifier .)
    CLASS           reduce using rule 354 (modifiers -> modifiers modifier .)
    INTERFACE       reduce using rule 354 (modifiers -> modifiers modifier .)
    <               reduce using rule 354 (modifiers -> modifiers modifier .)
    PACKAGE         reduce using rule 354 (modifiers -> modifiers modifier .)


state 226

    (605) package_declaration -> package_declaration_name ; .

    ;               reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    IMPORT          reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    @               reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    PUBLIC          reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    PROTECTED       reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    PRIVATE         reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    STATIC          reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    ABSTRACT        reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    FINAL           reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    NATIVE          reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    SYNCHRONIZED    reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    TRANSIENT       reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    VOLATILE        reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    STRICTFP        reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    ENUM            reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    CLASS           reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    INTERFACE       reduce using rule 605 (package_declaration -> package_declaration_name ; .)
    $end            reduce using rule 605 (package_declaration -> package_declaration_name ; .)


state 227

    (510) interface_header_name -> interface_header_name1 type_parameters .

    EXTENDS         reduce using rule 510 (interface_header_name -> interface_header_name1 type_parameters .)
    {               reduce using rule 510 (interface_header_name -> interface_header_name1 type_parameters .)


state 228

    (530) enum_header -> enum_header_name class_header_implements_opt .

    {               reduce using rule 530 (enum_header -> enum_header_name class_header_implements_opt .)


state 229

    (462) class_header_implements -> IMPLEMENTS . interface_type_list
    (463) interface_type_list -> . interface_type
    (464) interface_type_list -> . interface_type_list , interface_type
    (465) interface_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 335
    class_or_interface             shift and go to state 144
    interface_type                 shift and go to state 413
    generic_type                   shift and go to state 331
    interface_type_list            shift and go to state 478
    class_or_interface_type        shift and go to state 415
    simple_name                    shift and go to state 64

state 230

    (460) class_header_implements_opt -> class_header_implements .

    {               reduce using rule 460 (class_header_implements_opt -> class_header_implements .)


state 231

    (461) class_header_implements_opt -> empty .

    {               reduce using rule 461 (class_header_implements_opt -> empty .)


state 232

    (516) interface_body -> { . interface_member_declarations_opt }
    (517) interface_member_declarations_opt -> . interface_member_declarations
    (518) interface_member_declarations_opt -> . empty
    (519) interface_member_declarations -> . interface_member_declaration
    (520) interface_member_declarations -> . interface_member_declarations interface_member_declaration
    (623) empty -> .
    (521) interface_member_declaration -> . constant_declaration
    (522) interface_member_declaration -> . abstract_method_declaration
    (523) interface_member_declaration -> . class_declaration
    (524) interface_member_declaration -> . interface_declaration
    (525) interface_member_declaration -> . enum_declaration
    (526) interface_member_declaration -> . annotation_type_declaration
    (527) interface_member_declaration -> . ;
    (528) constant_declaration -> . field_declaration
    (503) abstract_method_declaration -> . method_header ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (482) field_declaration -> . modifiers_opt type variable_declarators ;
    (504) method_header -> . method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (505) method_header_name -> . modifiers_opt type_parameters type NAME (
    (506) method_header_name -> . modifiers_opt type NAME (
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    }               reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    ;               shift and go to state 485
    @               shift and go to state 30
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 479
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    interface_member_declarations  shift and go to state 480
    interface_header_name          shift and go to state 14
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 481
    interface_member_declaration   shift and go to state 482
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    interface_member_declarations_opt shift and go to state 483
    constant_declaration           shift and go to state 484
    empty                          shift and go to state 486
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    method_header_name             shift and go to state 449
    abstract_method_declaration    shift and go to state 487
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 488
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 489
    interface_header               shift and go to state 45
    method_header                  shift and go to state 490
    class_declaration              shift and go to state 491
    marker_annotation              shift and go to state 22
    field_declaration              shift and go to state 429
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 492

state 233

    (508) interface_declaration -> interface_header interface_body .

    IF              reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    WHILE           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    FOR             reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    {               reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    ASSERT          reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    ;               reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    SWITCH          reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    DO              reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    BREAK           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    CONTINUE        reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    RETURN          reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    SYNCHRONIZED    reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    THROW           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    TRY             reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    NAME            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    @               reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    BOOLEAN         reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    VOID            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    BYTE            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    SHORT           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    INT             reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    LONG            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    CHAR            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    FLOAT           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    DOUBLE          reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    PUBLIC          reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    PROTECTED       reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    PRIVATE         reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    STATIC          reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    ABSTRACT        reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    FINAL           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    NATIVE          reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    TRANSIENT       reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    VOLATILE        reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    STRICTFP        reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    THIS            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    SUPER           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    PLUSPLUS        reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    MINUSMINUS      reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    NEW             reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    <               reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    (               reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    NUM             reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    CHAR_LITERAL    reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    STRING_LITERAL  reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    TRUE            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    FALSE           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    NULL            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    ENUM            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    CLASS           reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    INTERFACE       reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    }               reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    $end            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    CASE            reduce using rule 508 (interface_declaration -> interface_header interface_body .)
    DEFAULT         reduce using rule 508 (interface_declaration -> interface_header interface_body .)


state 234

    (390) array_type -> generic_type . . name dims
    (384) class_or_interface -> generic_type . . name
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 493
    simple_name                    shift and go to state 64

state 235

    (389) array_type -> generic_type dims .

    >               reduce using rule 389 (array_type -> generic_type dims .)
    ,               reduce using rule 389 (array_type -> generic_type dims .)
    RRSHIFT         reduce using rule 389 (array_type -> generic_type dims .)
    RSHIFT          reduce using rule 389 (array_type -> generic_type dims .)
    NAME            reduce using rule 389 (array_type -> generic_type dims .)
    |               reduce using rule 389 (array_type -> generic_type dims .)
    &               reduce using rule 389 (array_type -> generic_type dims .)
    INSTANCEOF      reduce using rule 389 (array_type -> generic_type dims .)
    EQ              reduce using rule 389 (array_type -> generic_type dims .)
    NEQ             reduce using rule 389 (array_type -> generic_type dims .)
    ^               reduce using rule 389 (array_type -> generic_type dims .)
    AND             reduce using rule 389 (array_type -> generic_type dims .)
    ?               reduce using rule 389 (array_type -> generic_type dims .)
    OR              reduce using rule 389 (array_type -> generic_type dims .)
    )               reduce using rule 389 (array_type -> generic_type dims .)
    }               reduce using rule 389 (array_type -> generic_type dims .)
    ;               reduce using rule 389 (array_type -> generic_type dims .)
    $end            reduce using rule 389 (array_type -> generic_type dims .)
    :               reduce using rule 389 (array_type -> generic_type dims .)
    ]               reduce using rule 389 (array_type -> generic_type dims .)
    ELLIPSIS        reduce using rule 389 (array_type -> generic_type dims .)


state 236

    (155) dims -> dims_loop .
    (157) dims_loop -> dims_loop . one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               reduce using rule 155 (dims -> dims_loop .)
    NAME            reduce using rule 155 (dims -> dims_loop .)
    INSTANCEOF      reduce using rule 155 (dims -> dims_loop .)
    EQ              reduce using rule 155 (dims -> dims_loop .)
    NEQ             reduce using rule 155 (dims -> dims_loop .)
    &               reduce using rule 155 (dims -> dims_loop .)
    ^               reduce using rule 155 (dims -> dims_loop .)
    |               reduce using rule 155 (dims -> dims_loop .)
    AND             reduce using rule 155 (dims -> dims_loop .)
    ?               reduce using rule 155 (dims -> dims_loop .)
    OR              reduce using rule 155 (dims -> dims_loop .)
    $end            reduce using rule 155 (dims -> dims_loop .)
    ;               reduce using rule 155 (dims -> dims_loop .)
    :               reduce using rule 155 (dims -> dims_loop .)
    )               reduce using rule 155 (dims -> dims_loop .)
    ]               reduce using rule 155 (dims -> dims_loop .)
    ,               reduce using rule 155 (dims -> dims_loop .)
    }               reduce using rule 155 (dims -> dims_loop .)
    ELLIPSIS        reduce using rule 155 (dims -> dims_loop .)
    >               reduce using rule 155 (dims -> dims_loop .)
    RSHIFT          reduce using rule 155 (dims -> dims_loop .)
    RRSHIFT         reduce using rule 155 (dims -> dims_loop .)
    =               reduce using rule 155 (dims -> dims_loop .)
    THROWS          reduce using rule 155 (dims -> dims_loop .)
    {               reduce using rule 155 (dims -> dims_loop .)
    DEFAULT         reduce using rule 155 (dims -> dims_loop .)
    [               shift and go to state 238

    one_dim_loop                   shift and go to state 494

state 237

    (156) dims_loop -> one_dim_loop .

    [               reduce using rule 156 (dims_loop -> one_dim_loop .)
    NAME            reduce using rule 156 (dims_loop -> one_dim_loop .)
    ELLIPSIS        reduce using rule 156 (dims_loop -> one_dim_loop .)
    |               reduce using rule 156 (dims_loop -> one_dim_loop .)
    )               reduce using rule 156 (dims_loop -> one_dim_loop .)
    .               reduce using rule 156 (dims_loop -> one_dim_loop .)
    >               reduce using rule 156 (dims_loop -> one_dim_loop .)
    ,               reduce using rule 156 (dims_loop -> one_dim_loop .)
    INSTANCEOF      reduce using rule 156 (dims_loop -> one_dim_loop .)
    EQ              reduce using rule 156 (dims_loop -> one_dim_loop .)
    NEQ             reduce using rule 156 (dims_loop -> one_dim_loop .)
    &               reduce using rule 156 (dims_loop -> one_dim_loop .)
    ^               reduce using rule 156 (dims_loop -> one_dim_loop .)
    AND             reduce using rule 156 (dims_loop -> one_dim_loop .)
    ?               reduce using rule 156 (dims_loop -> one_dim_loop .)
    OR              reduce using rule 156 (dims_loop -> one_dim_loop .)
    $end            reduce using rule 156 (dims_loop -> one_dim_loop .)
    ;               reduce using rule 156 (dims_loop -> one_dim_loop .)
    :               reduce using rule 156 (dims_loop -> one_dim_loop .)
    ]               reduce using rule 156 (dims_loop -> one_dim_loop .)
    }               reduce using rule 156 (dims_loop -> one_dim_loop .)
    RSHIFT          reduce using rule 156 (dims_loop -> one_dim_loop .)
    RRSHIFT         reduce using rule 156 (dims_loop -> one_dim_loop .)
    =               reduce using rule 156 (dims_loop -> one_dim_loop .)
    DEFAULT         reduce using rule 156 (dims_loop -> one_dim_loop .)
    THROWS          reduce using rule 156 (dims_loop -> one_dim_loop .)
    {               reduce using rule 156 (dims_loop -> one_dim_loop .)


state 238

    (158) one_dim_loop -> [ . ]

    ]               shift and go to state 495


state 239

    (9) assignment_operator -> TIMES_ASSIGN .

    THIS            reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    (               reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    NEW             reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    NAME            reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    NUM             reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    CHAR_LITERAL    reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    STRING_LITERAL  reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    TRUE            reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    FALSE           reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    NULL            reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    SUPER           reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    BOOLEAN         reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    VOID            reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    BYTE            reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    SHORT           reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    INT             reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    LONG            reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    CHAR            reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    FLOAT           reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    DOUBLE          reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    +               reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    -               reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    PLUSPLUS        reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    MINUSMINUS      reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    ~               reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)
    !               reduce using rule 9 (assignment_operator -> TIMES_ASSIGN .)


state 240

    (15) assignment_operator -> RSHIFT_ASSIGN .

    THIS            reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    (               reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    NEW             reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    NAME            reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    NUM             reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    TRUE            reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    FALSE           reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    NULL            reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    SUPER           reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    BOOLEAN         reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    VOID            reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    BYTE            reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    SHORT           reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    INT             reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    LONG            reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    CHAR            reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    FLOAT           reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    DOUBLE          reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    +               reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    -               reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    PLUSPLUS        reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    MINUSMINUS      reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    ~               reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)
    !               reduce using rule 15 (assignment_operator -> RSHIFT_ASSIGN .)


state 241

    (14) assignment_operator -> LSHIFT_ASSIGN .

    THIS            reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    (               reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    NEW             reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    NAME            reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    NUM             reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    TRUE            reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    FALSE           reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    NULL            reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    SUPER           reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    BOOLEAN         reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    VOID            reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    BYTE            reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    SHORT           reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    INT             reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    LONG            reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    CHAR            reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    FLOAT           reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    DOUBLE          reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    +               reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    -               reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    PLUSPLUS        reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    MINUSMINUS      reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    ~               reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)
    !               reduce using rule 14 (assignment_operator -> LSHIFT_ASSIGN .)


state 242

    (134) post_increment_expression -> postfix_expression PLUSPLUS .

    PLUSPLUS        reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    *               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    /               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    %               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    +               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    -               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    LSHIFT          reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    RSHIFT          reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    RRSHIFT         reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    >               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    <               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    GTEQ            reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    LTEQ            reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    INSTANCEOF      reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    NEQ             reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    &               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    ^               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    |               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    ?               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    $end            reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    ;               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    :               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    )               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    ]               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    ,               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    }               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    =               reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    TIMES_ASSIGN    reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    DIVIDE_ASSIGN   reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    REMAINDER_ASSIGN reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    PLUS_ASSIGN     reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    MINUS_ASSIGN    reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    LSHIFT_ASSIGN   reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    RSHIFT_ASSIGN   reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    RRSHIFT_ASSIGN  reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    AND_ASSIGN      reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    OR_ASSIGN       reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)
    XOR_ASSIGN      reduce using rule 134 (post_increment_expression -> postfix_expression PLUSPLUS .)


state 243

    (16) assignment_operator -> RRSHIFT_ASSIGN .

    THIS            reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    (               reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    NEW             reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    NAME            reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    NUM             reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    CHAR_LITERAL    reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    STRING_LITERAL  reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    TRUE            reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    FALSE           reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    NULL            reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    SUPER           reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    BOOLEAN         reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    VOID            reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    BYTE            reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    SHORT           reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    INT             reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    LONG            reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    CHAR            reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    FLOAT           reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    DOUBLE          reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    +               reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    -               reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    PLUSPLUS        reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    MINUSMINUS      reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    ~               reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)
    !               reduce using rule 16 (assignment_operator -> RRSHIFT_ASSIGN .)


state 244

    (11) assignment_operator -> REMAINDER_ASSIGN .

    THIS            reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    (               reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    NEW             reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    NAME            reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    NUM             reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    CHAR_LITERAL    reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    STRING_LITERAL  reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    TRUE            reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    FALSE           reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    NULL            reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    SUPER           reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    BOOLEAN         reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    VOID            reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    BYTE            reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    SHORT           reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    INT             reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    LONG            reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    CHAR            reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    FLOAT           reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    DOUBLE          reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    +               reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    -               reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    PLUSPLUS        reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    MINUSMINUS      reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    ~               reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)
    !               reduce using rule 11 (assignment_operator -> REMAINDER_ASSIGN .)


state 245

    (18) assignment_operator -> OR_ASSIGN .

    THIS            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    (               reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    NEW             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    NAME            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    NUM             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    CHAR_LITERAL    reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    STRING_LITERAL  reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    TRUE            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    FALSE           reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    NULL            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    SUPER           reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    BOOLEAN         reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    VOID            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    BYTE            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    SHORT           reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    INT             reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    LONG            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    CHAR            reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    FLOAT           reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    DOUBLE          reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    +               reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    -               reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    PLUSPLUS        reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    MINUSMINUS      reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    ~               reduce using rule 18 (assignment_operator -> OR_ASSIGN .)
    !               reduce using rule 18 (assignment_operator -> OR_ASSIGN .)


state 246

    (13) assignment_operator -> MINUS_ASSIGN .

    THIS            reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    (               reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    NEW             reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    NAME            reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    NUM             reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    CHAR_LITERAL    reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    STRING_LITERAL  reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    TRUE            reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    FALSE           reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    NULL            reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    SUPER           reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    BOOLEAN         reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    VOID            reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    BYTE            reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    SHORT           reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    INT             reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    LONG            reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    CHAR            reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    FLOAT           reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    DOUBLE          reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    +               reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    -               reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    PLUSPLUS        reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    MINUSMINUS      reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    ~               reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)
    !               reduce using rule 13 (assignment_operator -> MINUS_ASSIGN .)


state 247

    (17) assignment_operator -> AND_ASSIGN .

    THIS            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    (               reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    NEW             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    NAME            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    NUM             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    CHAR_LITERAL    reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    STRING_LITERAL  reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    TRUE            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    FALSE           reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    NULL            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    SUPER           reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    BOOLEAN         reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    VOID            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    BYTE            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    SHORT           reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    INT             reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    LONG            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    CHAR            reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    FLOAT           reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    DOUBLE          reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    +               reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    -               reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    PLUSPLUS        reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    MINUSMINUS      reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    ~               reduce using rule 17 (assignment_operator -> AND_ASSIGN .)
    !               reduce using rule 17 (assignment_operator -> AND_ASSIGN .)


state 248

    (10) assignment_operator -> DIVIDE_ASSIGN .

    THIS            reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    (               reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    NEW             reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    NAME            reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    NUM             reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    CHAR_LITERAL    reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_LITERAL  reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    NULL            reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    SUPER           reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    BOOLEAN         reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    VOID            reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    BYTE            reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    SHORT           reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    INT             reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    LONG            reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    CHAR            reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    FLOAT           reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    DOUBLE          reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    +               reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    -               reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUSPLUS        reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUSMINUS      reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    ~               reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)
    !               reduce using rule 10 (assignment_operator -> DIVIDE_ASSIGN .)


state 249

    (7) assignment -> postfix_expression assignment_operator . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 496
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    conditional_and_expression     shift and go to state 161

state 250

    (12) assignment_operator -> PLUS_ASSIGN .

    THIS            reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    (               reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    NEW             reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    NAME            reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    NUM             reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    CHAR_LITERAL    reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    STRING_LITERAL  reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    NULL            reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    SUPER           reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    BOOLEAN         reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    VOID            reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    BYTE            reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    SHORT           reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    INT             reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    LONG            reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    CHAR            reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    FLOAT           reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    DOUBLE          reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    +               reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    -               reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    PLUSPLUS        reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    MINUSMINUS      reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    ~               reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)
    !               reduce using rule 12 (assignment_operator -> PLUS_ASSIGN .)


state 251

    (135) post_decrement_expression -> postfix_expression MINUSMINUS .

    PLUSPLUS        reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    *               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    /               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    %               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    +               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    -               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    LSHIFT          reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    RSHIFT          reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    RRSHIFT         reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    >               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    <               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    GTEQ            reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    LTEQ            reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    INSTANCEOF      reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    NEQ             reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    &               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    ^               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    |               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    ?               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    )               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    ,               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    }               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    ;               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    =               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    TIMES_ASSIGN    reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    DIVIDE_ASSIGN   reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    REMAINDER_ASSIGN reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    PLUS_ASSIGN     reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    MINUS_ASSIGN    reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    LSHIFT_ASSIGN   reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    RSHIFT_ASSIGN   reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    RRSHIFT_ASSIGN  reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    AND_ASSIGN      reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    OR_ASSIGN       reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    XOR_ASSIGN      reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    $end            reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    :               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    ]               reduce using rule 135 (post_decrement_expression -> postfix_expression MINUSMINUS .)


state 252

    (8) assignment_operator -> = .

    THIS            reduce using rule 8 (assignment_operator -> = .)
    (               reduce using rule 8 (assignment_operator -> = .)
    NEW             reduce using rule 8 (assignment_operator -> = .)
    NAME            reduce using rule 8 (assignment_operator -> = .)
    NUM             reduce using rule 8 (assignment_operator -> = .)
    CHAR_LITERAL    reduce using rule 8 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 8 (assignment_operator -> = .)
    TRUE            reduce using rule 8 (assignment_operator -> = .)
    FALSE           reduce using rule 8 (assignment_operator -> = .)
    NULL            reduce using rule 8 (assignment_operator -> = .)
    SUPER           reduce using rule 8 (assignment_operator -> = .)
    BOOLEAN         reduce using rule 8 (assignment_operator -> = .)
    VOID            reduce using rule 8 (assignment_operator -> = .)
    BYTE            reduce using rule 8 (assignment_operator -> = .)
    SHORT           reduce using rule 8 (assignment_operator -> = .)
    INT             reduce using rule 8 (assignment_operator -> = .)
    LONG            reduce using rule 8 (assignment_operator -> = .)
    CHAR            reduce using rule 8 (assignment_operator -> = .)
    FLOAT           reduce using rule 8 (assignment_operator -> = .)
    DOUBLE          reduce using rule 8 (assignment_operator -> = .)
    +               reduce using rule 8 (assignment_operator -> = .)
    -               reduce using rule 8 (assignment_operator -> = .)
    PLUSPLUS        reduce using rule 8 (assignment_operator -> = .)
    MINUSMINUS      reduce using rule 8 (assignment_operator -> = .)
    ~               reduce using rule 8 (assignment_operator -> = .)
    !               reduce using rule 8 (assignment_operator -> = .)


state 253

    (19) assignment_operator -> XOR_ASSIGN .

    THIS            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    (               reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    NEW             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    NAME            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    NUM             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    CHAR_LITERAL    reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    STRING_LITERAL  reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    TRUE            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    FALSE           reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    NULL            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    SUPER           reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    BOOLEAN         reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    VOID            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    BYTE            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    SHORT           reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    INT             reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    LONG            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    CHAR            reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    FLOAT           reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    DOUBLE          reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    +               reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    -               reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    PLUSPLUS        reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    MINUSMINUS      reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    ~               reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)
    !               reduce using rule 19 (assignment_operator -> XOR_ASSIGN .)


state 254

    (37) inclusive_or_expression_not_name -> exclusive_or_expression_not_name .
    (43) exclusive_or_expression_not_name -> exclusive_or_expression_not_name . ^ and_expression

    |               reduce using rule 37 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    AND             reduce using rule 37 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    ?               reduce using rule 37 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    OR              reduce using rule 37 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    ;               reduce using rule 37 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    ,               reduce using rule 37 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    }               reduce using rule 37 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    )               reduce using rule 37 (inclusive_or_expression_not_name -> exclusive_or_expression_not_name .)
    ^               shift and go to state 497


state 255

    (130) postfix_expression -> post_decrement_expression .
    (133) postfix_expression_not_name -> post_decrement_expression .

    PLUSPLUS        reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    MINUSMINUS      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    =               reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    TIMES_ASSIGN    reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    DIVIDE_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    REMAINDER_ASSIGN reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    PLUS_ASSIGN     reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    MINUS_ASSIGN    reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    LSHIFT_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    RSHIFT_ASSIGN   reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    RRSHIFT_ASSIGN  reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    AND_ASSIGN      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    OR_ASSIGN       reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    XOR_ASSIGN      reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    *               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    /               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    %               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    +               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    -               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    <               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    >               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    GTEQ            reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    LTEQ            reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    LSHIFT          reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    RSHIFT          reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    RRSHIFT         reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    INSTANCEOF      reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    EQ              reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    NEQ             reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    &               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    ^               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    |               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    AND             reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    ?               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    OR              reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    )               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)


state 256

    (68) relational_expression_not_name -> shift_expression_not_name .
    (69) relational_expression_not_name -> shift_expression_not_name . < shift_expression
    (71) relational_expression_not_name -> shift_expression_not_name . > shift_expression
    (73) relational_expression_not_name -> shift_expression_not_name . GTEQ shift_expression
    (75) relational_expression_not_name -> shift_expression_not_name . LTEQ shift_expression
    (82) shift_expression_not_name -> shift_expression_not_name . LSHIFT additive_expression
    (84) shift_expression_not_name -> shift_expression_not_name . RSHIFT additive_expression
    (86) shift_expression_not_name -> shift_expression_not_name . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    EQ              reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    NEQ             reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    &               reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    ^               reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    |               reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    AND             reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    ?               reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    OR              reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    ,               reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    )               reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    ;               reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    }               reduce using rule 68 (relational_expression_not_name -> shift_expression_not_name .)
    <               shift and go to state 503
    >               shift and go to state 504
    GTEQ            shift and go to state 499
    LTEQ            shift and go to state 500
    LSHIFT          shift and go to state 501
    RSHIFT          shift and go to state 498
    RRSHIFT         shift and go to state 502


state 257

    (116) unary_expression_not_name -> unary_expression_not_plus_minus_not_name .

    *               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    /               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    %               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    +               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    -               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    <               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    >               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    GTEQ            reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    LTEQ            reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    LSHIFT          reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    RSHIFT          reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    RRSHIFT         reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    INSTANCEOF      reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    EQ              reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    NEQ             reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    &               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    ^               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    |               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    AND             reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    ?               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    OR              reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    )               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    ,               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    }               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)
    ;               reduce using rule 116 (unary_expression_not_name -> unary_expression_not_plus_minus_not_name .)


state 258

    (27) conditional_or_expression_not_name -> conditional_and_expression_not_name .
    (33) conditional_and_expression_not_name -> conditional_and_expression_not_name . AND inclusive_or_expression

    ?               reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    OR              reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    )               reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    ,               reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    }               reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    ;               reduce using rule 27 (conditional_or_expression_not_name -> conditional_and_expression_not_name .)
    AND             shift and go to state 505


state 259

    (145) primary_no_new_array -> ( name . )
    (344) qualified_name -> name . . simple_name
    (24) conditional_expression_not_name -> name . ? expression : conditional_expression
    (128) postfix_expression -> name .
    (29) conditional_or_expression_not_name -> name . OR conditional_and_expression
    (34) conditional_and_expression_not_name -> name . AND inclusive_or_expression
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (39) inclusive_or_expression_not_name -> name . | exclusive_or_expression
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (330) array_access -> name . [ expression ]
    (44) exclusive_or_expression_not_name -> name . ^ and_expression
    (325) class_instance_creation_expression_name -> name . .
    (49) and_expression_not_name -> name . & equality_expression
    (55) equality_expression_not_name -> name . EQ instanceof_expression
    (57) equality_expression_not_name -> name . NEQ instanceof_expression
    (61) instanceof_expression_not_name -> name . INSTANCEOF reference_type
    (70) relational_expression_not_name -> name . < shift_expression
    (72) relational_expression_not_name -> name . > shift_expression
    (74) relational_expression_not_name -> name . GTEQ shift_expression
    (76) relational_expression_not_name -> name . LTEQ shift_expression
    (83) shift_expression_not_name -> name . LSHIFT additive_expression
    (85) shift_expression_not_name -> name . RSHIFT additive_expression
    (87) shift_expression_not_name -> name . RRSHIFT additive_expression
    (93) additive_expression_not_name -> name . + multiplicative_expression
    (95) additive_expression_not_name -> name . - multiplicative_expression
    (102) multiplicative_expression_not_name -> name . * unary_expression
    (104) multiplicative_expression_not_name -> name . / unary_expression
    (106) multiplicative_expression_not_name -> name . % unary_expression
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    )               shift and go to state 515
    .               shift and go to state 519
    ?               shift and go to state 520
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    =               reduce using rule 128 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 128 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    LSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT_ASSIGN  reduce using rule 128 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR              shift and go to state 524
    AND             shift and go to state 523
    |               shift and go to state 528
    [               shift and go to state 301
    ^               shift and go to state 510
    &               shift and go to state 514
    EQ              shift and go to state 525
    NEQ             shift and go to state 513
    INSTANCEOF      shift and go to state 522
    <               shift and go to state 509
    >               shift and go to state 521
    GTEQ            shift and go to state 507
    LTEQ            shift and go to state 526
    LSHIFT          shift and go to state 511
    RSHIFT          shift and go to state 506
    RRSHIFT         shift and go to state 527
    +               shift and go to state 516
    -               shift and go to state 508
    *               shift and go to state 517
    /               shift and go to state 518
    %               shift and go to state 512

    dims                           shift and go to state 364
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 260

    (129) postfix_expression -> post_increment_expression .
    (132) postfix_expression_not_name -> post_increment_expression .

    PLUSPLUS        reduce using rule 129 (postfix_expression -> post_increment_expression .)
    MINUSMINUS      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    =               reduce using rule 129 (postfix_expression -> post_increment_expression .)
    TIMES_ASSIGN    reduce using rule 129 (postfix_expression -> post_increment_expression .)
    DIVIDE_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    REMAINDER_ASSIGN reduce using rule 129 (postfix_expression -> post_increment_expression .)
    PLUS_ASSIGN     reduce using rule 129 (postfix_expression -> post_increment_expression .)
    MINUS_ASSIGN    reduce using rule 129 (postfix_expression -> post_increment_expression .)
    LSHIFT_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    RSHIFT_ASSIGN   reduce using rule 129 (postfix_expression -> post_increment_expression .)
    RRSHIFT_ASSIGN  reduce using rule 129 (postfix_expression -> post_increment_expression .)
    AND_ASSIGN      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    OR_ASSIGN       reduce using rule 129 (postfix_expression -> post_increment_expression .)
    XOR_ASSIGN      reduce using rule 129 (postfix_expression -> post_increment_expression .)
    *               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    /               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    %               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    +               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    -               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    <               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    >               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    GTEQ            reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    LTEQ            reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    LSHIFT          reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    RSHIFT          reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    RRSHIFT         reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    INSTANCEOF      reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    EQ              reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    NEQ             reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    &               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    ^               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    |               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    AND             reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    ?               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    OR              reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    )               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)


state 261

    (113) unary_expression_not_name -> pre_decrement_expression .

    *               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    /               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    %               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    +               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    -               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    <               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    >               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    GTEQ            reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    LTEQ            reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    LSHIFT          reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    RSHIFT          reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    RRSHIFT         reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    INSTANCEOF      reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    EQ              reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    NEQ             reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    &               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    ^               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    |               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    AND             reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    ?               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    OR              reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    )               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    ,               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    }               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)
    ;               reduce using rule 113 (unary_expression_not_name -> pre_decrement_expression .)


state 262

    (60) instanceof_expression_not_name -> relational_expression_not_name .

    INSTANCEOF      reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    EQ              reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    NEQ             reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    &               reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    ^               reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    |               reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    AND             reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    ?               reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    OR              reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    ,               reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    )               reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    }               reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)
    ;               reduce using rule 60 (instanceof_expression_not_name -> relational_expression_not_name .)


state 263

    (2) expression_not_name -> assignment_expression_not_name .

    )               reduce using rule 2 (expression_not_name -> assignment_expression_not_name .)


state 264

    (114) unary_expression_not_name -> + . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 529
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 265

    (123) unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .

    *               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    /               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    %               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    +               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    -               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    <               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    >               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    GTEQ            reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    LTEQ            reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    LSHIFT          reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    RSHIFT          reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    RRSHIFT         reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    INSTANCEOF      reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    EQ              reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    NEQ             reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    &               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    ^               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    |               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    AND             reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    ?               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    OR              reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    ,               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    }               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    )               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)
    ;               reduce using rule 123 (unary_expression_not_plus_minus_not_name -> postfix_expression_not_name .)


state 266

    (112) unary_expression_not_name -> pre_increment_expression .

    *               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    /               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    %               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    +               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    -               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    <               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    >               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    GTEQ            reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    LTEQ            reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    LSHIFT          reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    RSHIFT          reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    RRSHIFT         reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    INSTANCEOF      reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    EQ              reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    NEQ             reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    &               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    ^               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    |               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    AND             reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    ?               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    OR              reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    )               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    ,               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    }               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)
    ;               reduce using rule 112 (unary_expression_not_name -> pre_increment_expression .)


state 267

    (124) unary_expression_not_plus_minus_not_name -> ~ . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 530
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 268

    (127) postfix_expression -> primary .
    (321) class_instance_creation_expression -> primary . . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . . NEW class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> primary . . NAME
    (223) method_invocation -> primary . . type_arguments NAME ( argument_list_opt )
    (226) method_invocation -> primary . . NAME ( argument_list_opt )
    (131) postfix_expression_not_name -> primary .

    PLUSPLUS        reduce using rule 127 (postfix_expression -> primary .)
    MINUSMINUS      reduce using rule 127 (postfix_expression -> primary .)
    =               reduce using rule 127 (postfix_expression -> primary .)
    TIMES_ASSIGN    reduce using rule 127 (postfix_expression -> primary .)
    DIVIDE_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    REMAINDER_ASSIGN reduce using rule 127 (postfix_expression -> primary .)
    PLUS_ASSIGN     reduce using rule 127 (postfix_expression -> primary .)
    MINUS_ASSIGN    reduce using rule 127 (postfix_expression -> primary .)
    LSHIFT_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    RSHIFT_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    RRSHIFT_ASSIGN  reduce using rule 127 (postfix_expression -> primary .)
    AND_ASSIGN      reduce using rule 127 (postfix_expression -> primary .)
    OR_ASSIGN       reduce using rule 127 (postfix_expression -> primary .)
    XOR_ASSIGN      reduce using rule 127 (postfix_expression -> primary .)
    .               shift and go to state 376
    *               reduce using rule 131 (postfix_expression_not_name -> primary .)
    /               reduce using rule 131 (postfix_expression_not_name -> primary .)
    %               reduce using rule 131 (postfix_expression_not_name -> primary .)
    +               reduce using rule 131 (postfix_expression_not_name -> primary .)
    -               reduce using rule 131 (postfix_expression_not_name -> primary .)
    <               reduce using rule 131 (postfix_expression_not_name -> primary .)
    >               reduce using rule 131 (postfix_expression_not_name -> primary .)
    GTEQ            reduce using rule 131 (postfix_expression_not_name -> primary .)
    LTEQ            reduce using rule 131 (postfix_expression_not_name -> primary .)
    LSHIFT          reduce using rule 131 (postfix_expression_not_name -> primary .)
    RSHIFT          reduce using rule 131 (postfix_expression_not_name -> primary .)
    RRSHIFT         reduce using rule 131 (postfix_expression_not_name -> primary .)
    INSTANCEOF      reduce using rule 131 (postfix_expression_not_name -> primary .)
    EQ              reduce using rule 131 (postfix_expression_not_name -> primary .)
    NEQ             reduce using rule 131 (postfix_expression_not_name -> primary .)
    &               reduce using rule 131 (postfix_expression_not_name -> primary .)
    ^               reduce using rule 131 (postfix_expression_not_name -> primary .)
    |               reduce using rule 131 (postfix_expression_not_name -> primary .)
    AND             reduce using rule 131 (postfix_expression_not_name -> primary .)
    ?               reduce using rule 131 (postfix_expression_not_name -> primary .)
    OR              reduce using rule 131 (postfix_expression_not_name -> primary .)
    )               reduce using rule 131 (postfix_expression_not_name -> primary .)


state 269

    (32) conditional_and_expression_not_name -> inclusive_or_expression_not_name .
    (38) inclusive_or_expression_not_name -> inclusive_or_expression_not_name . | exclusive_or_expression

    AND             reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    ?               reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    OR              reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    ,               reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    }               reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    )               reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    ;               reduce using rule 32 (conditional_and_expression_not_name -> inclusive_or_expression_not_name .)
    |               shift and go to state 531


state 270

    (126) unary_expression_not_plus_minus_not_name -> cast_expression .

    *               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    /               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    %               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    +               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    -               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    <               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    >               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    GTEQ            reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    LTEQ            reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    LSHIFT          reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    RSHIFT          reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    RRSHIFT         reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    INSTANCEOF      reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    EQ              reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    NEQ             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    &               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    ^               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    |               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    AND             reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    ?               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    OR              reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    ,               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    }               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    )               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)
    ;               reduce using rule 126 (unary_expression_not_plus_minus_not_name -> cast_expression .)


state 271

    (42) exclusive_or_expression_not_name -> and_expression_not_name .
    (48) and_expression_not_name -> and_expression_not_name . & equality_expression

    ^               reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    |               reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    AND             reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    ?               reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    OR              reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    ,               reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    }               reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    ;               reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    )               reduce using rule 42 (exclusive_or_expression_not_name -> and_expression_not_name .)
    &               shift and go to state 532


state 272

    (22) conditional_expression_not_name -> conditional_or_expression_not_name .
    (23) conditional_expression_not_name -> conditional_or_expression_not_name . ? expression : conditional_expression
    (28) conditional_or_expression_not_name -> conditional_or_expression_not_name . OR conditional_and_expression

    )               reduce using rule 22 (conditional_expression_not_name -> conditional_or_expression_not_name .)
    ,               reduce using rule 22 (conditional_expression_not_name -> conditional_or_expression_not_name .)
    }               reduce using rule 22 (conditional_expression_not_name -> conditional_or_expression_not_name .)
    ;               reduce using rule 22 (conditional_expression_not_name -> conditional_or_expression_not_name .)
    ?               shift and go to state 534
    OR              shift and go to state 533


state 273

    (53) equality_expression_not_name -> instanceof_expression_not_name .
    (62) instanceof_expression_not_name -> instanceof_expression_not_name . INSTANCEOF reference_type

    EQ              reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    NEQ             reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    &               reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    ^               reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    |               reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    AND             reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    ?               reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    OR              reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    )               reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    ,               reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    ;               reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    }               reduce using rule 53 (equality_expression_not_name -> instanceof_expression_not_name .)
    INSTANCEOF      shift and go to state 535


state 274

    (81) shift_expression_not_name -> additive_expression_not_name .
    (92) additive_expression_not_name -> additive_expression_not_name . + multiplicative_expression
    (94) additive_expression_not_name -> additive_expression_not_name . - multiplicative_expression

    <               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    >               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    GTEQ            reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    LTEQ            reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    LSHIFT          reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    RSHIFT          reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    RRSHIFT         reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    INSTANCEOF      reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    EQ              reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    NEQ             reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    &               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    ^               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    |               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    AND             reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    ?               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    OR              reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    ,               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    }               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    )               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    ;               reduce using rule 81 (shift_expression_not_name -> additive_expression_not_name .)
    +               shift and go to state 536
    -               shift and go to state 537


state 275

    (146) primary_no_new_array -> ( expression_not_name . )

    )               shift and go to state 538


state 276

    (91) additive_expression_not_name -> multiplicative_expression_not_name .
    (101) multiplicative_expression_not_name -> multiplicative_expression_not_name . * unary_expression
    (103) multiplicative_expression_not_name -> multiplicative_expression_not_name . / unary_expression
    (105) multiplicative_expression_not_name -> multiplicative_expression_not_name . % unary_expression

    +               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    -               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    <               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    >               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    GTEQ            reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    LTEQ            reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    LSHIFT          reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    RSHIFT          reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    RRSHIFT         reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    INSTANCEOF      reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    EQ              reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    NEQ             reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    &               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    ^               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    |               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    AND             reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    ?               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    OR              reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    )               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    ,               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    }               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    ;               reduce using rule 91 (additive_expression_not_name -> multiplicative_expression_not_name .)
    *               shift and go to state 539
    /               shift and go to state 541
    %               shift and go to state 540


state 277

    (125) unary_expression_not_plus_minus_not_name -> ! . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 542
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 278

    (115) unary_expression_not_name -> - . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 543
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 279

    (6) assignment_expression_not_name -> conditional_expression_not_name .

    )               reduce using rule 6 (assignment_expression_not_name -> conditional_expression_not_name .)


state 280

    (100) multiplicative_expression_not_name -> unary_expression_not_name .

    *               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    /               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    %               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    +               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    -               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    <               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    >               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    GTEQ            reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    LTEQ            reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    LSHIFT          reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    RSHIFT          reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    RRSHIFT         reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    INSTANCEOF      reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    EQ              reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    NEQ             reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    &               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    ^               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    |               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    AND             reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    ?               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    OR              reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    ,               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    }               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    )               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)
    ;               reduce using rule 100 (multiplicative_expression_not_name -> unary_expression_not_name .)


state 281

    (47) and_expression_not_name -> equality_expression_not_name .
    (54) equality_expression_not_name -> equality_expression_not_name . EQ instanceof_expression
    (56) equality_expression_not_name -> equality_expression_not_name . NEQ instanceof_expression

    &               reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    ^               reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    |               reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    AND             reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    ?               reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    OR              reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    )               reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    ,               reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    }               reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    ;               reduce using rule 47 (and_expression_not_name -> equality_expression_not_name .)
    EQ              shift and go to state 545
    NEQ             shift and go to state 544


state 282

    (5) assignment_expression_not_name -> assignment .

    )               reduce using rule 5 (assignment_expression_not_name -> assignment .)


state 283

    (205) expression_statement -> statement_expression ; .

    WHILE           reduce using rule 205 (expression_statement -> statement_expression ; .)
    IF              reduce using rule 205 (expression_statement -> statement_expression ; .)
    FOR             reduce using rule 205 (expression_statement -> statement_expression ; .)
    {               reduce using rule 205 (expression_statement -> statement_expression ; .)
    ASSERT          reduce using rule 205 (expression_statement -> statement_expression ; .)
    ;               reduce using rule 205 (expression_statement -> statement_expression ; .)
    SWITCH          reduce using rule 205 (expression_statement -> statement_expression ; .)
    DO              reduce using rule 205 (expression_statement -> statement_expression ; .)
    BREAK           reduce using rule 205 (expression_statement -> statement_expression ; .)
    CONTINUE        reduce using rule 205 (expression_statement -> statement_expression ; .)
    RETURN          reduce using rule 205 (expression_statement -> statement_expression ; .)
    SYNCHRONIZED    reduce using rule 205 (expression_statement -> statement_expression ; .)
    THROW           reduce using rule 205 (expression_statement -> statement_expression ; .)
    TRY             reduce using rule 205 (expression_statement -> statement_expression ; .)
    NAME            reduce using rule 205 (expression_statement -> statement_expression ; .)
    @               reduce using rule 205 (expression_statement -> statement_expression ; .)
    BOOLEAN         reduce using rule 205 (expression_statement -> statement_expression ; .)
    VOID            reduce using rule 205 (expression_statement -> statement_expression ; .)
    BYTE            reduce using rule 205 (expression_statement -> statement_expression ; .)
    SHORT           reduce using rule 205 (expression_statement -> statement_expression ; .)
    INT             reduce using rule 205 (expression_statement -> statement_expression ; .)
    LONG            reduce using rule 205 (expression_statement -> statement_expression ; .)
    CHAR            reduce using rule 205 (expression_statement -> statement_expression ; .)
    FLOAT           reduce using rule 205 (expression_statement -> statement_expression ; .)
    DOUBLE          reduce using rule 205 (expression_statement -> statement_expression ; .)
    PUBLIC          reduce using rule 205 (expression_statement -> statement_expression ; .)
    PROTECTED       reduce using rule 205 (expression_statement -> statement_expression ; .)
    PRIVATE         reduce using rule 205 (expression_statement -> statement_expression ; .)
    STATIC          reduce using rule 205 (expression_statement -> statement_expression ; .)
    ABSTRACT        reduce using rule 205 (expression_statement -> statement_expression ; .)
    FINAL           reduce using rule 205 (expression_statement -> statement_expression ; .)
    NATIVE          reduce using rule 205 (expression_statement -> statement_expression ; .)
    TRANSIENT       reduce using rule 205 (expression_statement -> statement_expression ; .)
    VOLATILE        reduce using rule 205 (expression_statement -> statement_expression ; .)
    STRICTFP        reduce using rule 205 (expression_statement -> statement_expression ; .)
    THIS            reduce using rule 205 (expression_statement -> statement_expression ; .)
    SUPER           reduce using rule 205 (expression_statement -> statement_expression ; .)
    PLUSPLUS        reduce using rule 205 (expression_statement -> statement_expression ; .)
    MINUSMINUS      reduce using rule 205 (expression_statement -> statement_expression ; .)
    NEW             reduce using rule 205 (expression_statement -> statement_expression ; .)
    <               reduce using rule 205 (expression_statement -> statement_expression ; .)
    (               reduce using rule 205 (expression_statement -> statement_expression ; .)
    NUM             reduce using rule 205 (expression_statement -> statement_expression ; .)
    CHAR_LITERAL    reduce using rule 205 (expression_statement -> statement_expression ; .)
    STRING_LITERAL  reduce using rule 205 (expression_statement -> statement_expression ; .)
    TRUE            reduce using rule 205 (expression_statement -> statement_expression ; .)
    FALSE           reduce using rule 205 (expression_statement -> statement_expression ; .)
    NULL            reduce using rule 205 (expression_statement -> statement_expression ; .)
    ENUM            reduce using rule 205 (expression_statement -> statement_expression ; .)
    CLASS           reduce using rule 205 (expression_statement -> statement_expression ; .)
    INTERFACE       reduce using rule 205 (expression_statement -> statement_expression ; .)
    }               reduce using rule 205 (expression_statement -> statement_expression ; .)
    CASE            reduce using rule 205 (expression_statement -> statement_expression ; .)
    DEFAULT         reduce using rule 205 (expression_statement -> statement_expression ; .)
    $end            reduce using rule 205 (expression_statement -> statement_expression ; .)
    ELSE            reduce using rule 205 (expression_statement -> statement_expression ; .)


state 284

    (384) class_or_interface -> generic_type . . name
    (381) class_or_interface_type -> generic_type .
    (389) array_type -> generic_type . dims
    (390) array_type -> generic_type . . name dims
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               shift and go to state 546
    >               reduce using rule 381 (class_or_interface_type -> generic_type .)
    ,               reduce using rule 381 (class_or_interface_type -> generic_type .)
    &               reduce using rule 381 (class_or_interface_type -> generic_type .)
    RSHIFT          reduce using rule 381 (class_or_interface_type -> generic_type .)
    RRSHIFT         reduce using rule 381 (class_or_interface_type -> generic_type .)
    [               shift and go to state 238

    one_dim_loop                   shift and go to state 237
    dims                           shift and go to state 235
    dims_loop                      shift and go to state 236

state 285

    (391) type_arguments -> < type_argument_list1 .

    NAME            reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    SUPER           reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    THIS            reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    .               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    [               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    >               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    ,               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    &               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    )               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    (               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    IMPLEMENTS      reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    {               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    INSTANCEOF      reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    EQ              reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    NEQ             reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    ^               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    |               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    AND             reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    ?               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    OR              reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    $end            reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    ;               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    :               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    ]               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    }               reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    ELLIPSIS        reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    RSHIFT          reduce using rule 391 (type_arguments -> < type_argument_list1 .)
    RRSHIFT         reduce using rule 391 (type_arguments -> < type_argument_list1 .)


state 286

    (400) reference_type1 -> reference_type . >
    (396) type_argument -> reference_type .

    >               shift and go to state 547
    ,               reduce using rule 396 (type_argument -> reference_type .)


state 287

    (387) array_type -> primitive_type . dims
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    [               shift and go to state 238

    dims                           shift and go to state 548
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 288

    (417) wildcard1 -> ? . >
    (418) wildcard1 -> ? . wildcard_bounds1
    (413) wildcard -> ? .
    (414) wildcard -> ? . wildcard_bounds
    (419) wildcard_bounds1 -> . EXTENDS reference_type1
    (420) wildcard_bounds1 -> . SUPER reference_type1
    (415) wildcard_bounds -> . EXTENDS reference_type
    (416) wildcard_bounds -> . SUPER reference_type

    >               shift and go to state 553
    ,               reduce using rule 413 (wildcard -> ? .)
    EXTENDS         shift and go to state 551
    SUPER           shift and go to state 552

    wildcard_bounds                shift and go to state 549
    wildcard_bounds1               shift and go to state 550

state 289

    (399) type_argument1 -> wildcard1 .

    SUPER           reduce using rule 399 (type_argument1 -> wildcard1 .)
    THIS            reduce using rule 399 (type_argument1 -> wildcard1 .)
    NAME            reduce using rule 399 (type_argument1 -> wildcard1 .)
    .               reduce using rule 399 (type_argument1 -> wildcard1 .)
    [               reduce using rule 399 (type_argument1 -> wildcard1 .)
    >               reduce using rule 399 (type_argument1 -> wildcard1 .)
    ,               reduce using rule 399 (type_argument1 -> wildcard1 .)
    &               reduce using rule 399 (type_argument1 -> wildcard1 .)
    (               reduce using rule 399 (type_argument1 -> wildcard1 .)
    IMPLEMENTS      reduce using rule 399 (type_argument1 -> wildcard1 .)
    {               reduce using rule 399 (type_argument1 -> wildcard1 .)
    INSTANCEOF      reduce using rule 399 (type_argument1 -> wildcard1 .)
    EQ              reduce using rule 399 (type_argument1 -> wildcard1 .)
    NEQ             reduce using rule 399 (type_argument1 -> wildcard1 .)
    ^               reduce using rule 399 (type_argument1 -> wildcard1 .)
    |               reduce using rule 399 (type_argument1 -> wildcard1 .)
    AND             reduce using rule 399 (type_argument1 -> wildcard1 .)
    ?               reduce using rule 399 (type_argument1 -> wildcard1 .)
    OR              reduce using rule 399 (type_argument1 -> wildcard1 .)
    $end            reduce using rule 399 (type_argument1 -> wildcard1 .)
    ;               reduce using rule 399 (type_argument1 -> wildcard1 .)
    :               reduce using rule 399 (type_argument1 -> wildcard1 .)
    )               reduce using rule 399 (type_argument1 -> wildcard1 .)
    ]               reduce using rule 399 (type_argument1 -> wildcard1 .)
    }               reduce using rule 399 (type_argument1 -> wildcard1 .)
    ELLIPSIS        reduce using rule 399 (type_argument1 -> wildcard1 .)
    RSHIFT          reduce using rule 399 (type_argument1 -> wildcard1 .)
    RRSHIFT         reduce using rule 399 (type_argument1 -> wildcard1 .)


state 290

    (393) type_argument_list1 -> type_argument_list . , type_argument1
    (395) type_argument_list -> type_argument_list . , type_argument

    ,               shift and go to state 554


state 291

    (401) reference_type1 -> class_or_interface . < type_argument_list2
    (380) class_or_interface_type -> class_or_interface .
    (385) generic_type -> class_or_interface . type_arguments
    (386) generic_type -> class_or_interface . < >
    (391) type_arguments -> . < type_argument_list1

    <               shift and go to state 555
    >               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    ,               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    &               reduce using rule 380 (class_or_interface_type -> class_or_interface .)

    type_arguments                 shift and go to state 353

state 292

    (392) type_argument_list1 -> type_argument1 .

    .               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    [               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    )               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    >               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    ,               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    &               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    SUPER           reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    THIS            reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    NAME            reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    (               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    IMPLEMENTS      reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    {               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    INSTANCEOF      reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    EQ              reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    NEQ             reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    ^               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    |               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    AND             reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    ?               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    OR              reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    $end            reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    ;               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    :               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    ]               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    }               reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    ELLIPSIS        reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    RSHIFT          reduce using rule 392 (type_argument_list1 -> type_argument1 .)
    RRSHIFT         reduce using rule 392 (type_argument_list1 -> type_argument1 .)


state 293

    (398) type_argument1 -> reference_type1 .

    SUPER           reduce using rule 398 (type_argument1 -> reference_type1 .)
    THIS            reduce using rule 398 (type_argument1 -> reference_type1 .)
    NAME            reduce using rule 398 (type_argument1 -> reference_type1 .)
    .               reduce using rule 398 (type_argument1 -> reference_type1 .)
    [               reduce using rule 398 (type_argument1 -> reference_type1 .)
    >               reduce using rule 398 (type_argument1 -> reference_type1 .)
    ,               reduce using rule 398 (type_argument1 -> reference_type1 .)
    &               reduce using rule 398 (type_argument1 -> reference_type1 .)
    (               reduce using rule 398 (type_argument1 -> reference_type1 .)
    IMPLEMENTS      reduce using rule 398 (type_argument1 -> reference_type1 .)
    {               reduce using rule 398 (type_argument1 -> reference_type1 .)
    INSTANCEOF      reduce using rule 398 (type_argument1 -> reference_type1 .)
    EQ              reduce using rule 398 (type_argument1 -> reference_type1 .)
    NEQ             reduce using rule 398 (type_argument1 -> reference_type1 .)
    ^               reduce using rule 398 (type_argument1 -> reference_type1 .)
    |               reduce using rule 398 (type_argument1 -> reference_type1 .)
    AND             reduce using rule 398 (type_argument1 -> reference_type1 .)
    ?               reduce using rule 398 (type_argument1 -> reference_type1 .)
    OR              reduce using rule 398 (type_argument1 -> reference_type1 .)
    $end            reduce using rule 398 (type_argument1 -> reference_type1 .)
    ;               reduce using rule 398 (type_argument1 -> reference_type1 .)
    :               reduce using rule 398 (type_argument1 -> reference_type1 .)
    )               reduce using rule 398 (type_argument1 -> reference_type1 .)
    ]               reduce using rule 398 (type_argument1 -> reference_type1 .)
    }               reduce using rule 398 (type_argument1 -> reference_type1 .)
    ELLIPSIS        reduce using rule 398 (type_argument1 -> reference_type1 .)
    RSHIFT          reduce using rule 398 (type_argument1 -> reference_type1 .)
    RRSHIFT         reduce using rule 398 (type_argument1 -> reference_type1 .)


state 294

    (394) type_argument_list -> type_argument .

    ,               reduce using rule 394 (type_argument_list -> type_argument .)


state 295

    (383) class_or_interface -> name .
    (388) array_type -> name . dims
    (344) qualified_name -> name . . simple_name
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    <               reduce using rule 383 (class_or_interface -> name .)
    RRSHIFT         reduce using rule 383 (class_or_interface -> name .)
    RSHIFT          reduce using rule 383 (class_or_interface -> name .)
    >               reduce using rule 383 (class_or_interface -> name .)
    ,               reduce using rule 383 (class_or_interface -> name .)
    &               reduce using rule 383 (class_or_interface -> name .)
    .               shift and go to state 437
    [               shift and go to state 238

    one_dim_loop                   shift and go to state 237
    dims                           shift and go to state 556
    dims_loop                      shift and go to state 236

state 296

    (397) type_argument -> wildcard .

    ,               reduce using rule 397 (type_argument -> wildcard .)


state 297

    (312) explicit_constructor_invocation -> name . . SUPER ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> name . . THIS ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> name . . type_arguments SUPER ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> name . . type_arguments THIS ( argument_list_opt ) ;
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (128) postfix_expression -> name .
    (325) class_instance_creation_expression_name -> name . .
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (344) qualified_name -> name . . simple_name
    (330) array_access -> name . [ expression ]
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               shift and go to state 302
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    =               reduce using rule 128 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 128 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    LSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT_ASSIGN  reduce using rule 128 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    [               shift and go to state 301

    dims                           shift and go to state 364
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 298

    (282) synchronized_statement -> SYNCHRONIZED . ( expression ) block

    (               shift and go to state 307


state 299

    (249) enhanced_for_statement -> enhanced_for_statement_header statement .

    IF              reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    WHILE           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FOR             reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    {               reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    ASSERT          reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    ;               reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SWITCH          reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    DO              reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    BREAK           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CONTINUE        reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    RETURN          reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SYNCHRONIZED    reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    THROW           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    TRY             reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    NAME            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    @               reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    BOOLEAN         reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    VOID            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    BYTE            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SHORT           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    INT             reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    LONG            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CHAR            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FLOAT           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    DOUBLE          reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    PUBLIC          reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    PROTECTED       reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    PRIVATE         reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    STATIC          reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    ABSTRACT        reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FINAL           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    NATIVE          reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    TRANSIENT       reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    VOLATILE        reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    STRICTFP        reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    THIS            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    SUPER           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    PLUSPLUS        reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    MINUSMINUS      reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    NEW             reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    <               reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    (               reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    NUM             reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CHAR_LITERAL    reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    STRING_LITERAL  reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    TRUE            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    FALSE           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    NULL            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    ENUM            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CLASS           reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    INTERFACE       reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    }               reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    CASE            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    DEFAULT         reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)
    $end            reduce using rule 249 (enhanced_for_statement -> enhanced_for_statement_header statement .)


state 300

    (388) array_type -> name dims .
    (150) primary_no_new_array -> name dims . . CLASS

    >               reduce using rule 388 (array_type -> name dims .)
    ,               reduce using rule 388 (array_type -> name dims .)
    NAME            reduce using rule 388 (array_type -> name dims .)
    .               shift and go to state 557


state 301

    (330) array_access -> name [ . expression ]
    (158) one_dim_loop -> [ . ]
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    ]               shift and go to state 495
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 558
    conditional_and_expression     shift and go to state 161

state 302

    (312) explicit_constructor_invocation -> name . . SUPER ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> name . . THIS ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> name . . type_arguments SUPER ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> name . . type_arguments THIS ( argument_list_opt ) ;
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (325) class_instance_creation_expression_name -> name . .
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (344) qualified_name -> name . . simple_name
    (391) type_arguments -> . < type_argument_list1
    (343) simple_name -> . NAME

    SUPER           shift and go to state 562
    THIS            shift and go to state 561
    NAME            shift and go to state 564
    NEW             reduce using rule 325 (class_instance_creation_expression_name -> name . .)
    CLASS           shift and go to state 563
    <               shift and go to state 67

    simple_name                    shift and go to state 560
    type_arguments                 shift and go to state 559

state 303

    (307) explicit_constructor_invocation -> THIS ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 565
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 304

    (281) return_statement -> RETURN expression_opt . ;

    ;               shift and go to state 569


state 305

    (244) expression_opt -> expression .

    ;               reduce using rule 244 (expression_opt -> expression .)


state 306

    (245) expression_opt -> empty .

    ;               reduce using rule 245 (expression_opt -> empty .)


state 307

    (282) synchronized_statement -> SYNCHRONIZED ( . expression ) block
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    class_instance_creation_expression shift and go to state 156
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 570
    conditional_and_expression     shift and go to state 161

state 308

    (310) explicit_constructor_invocation -> type_arguments THIS . ( argument_list_opt ) ;

    (               shift and go to state 571


state 309

    (309) explicit_constructor_invocation -> type_arguments SUPER . ( argument_list_opt ) ;

    (               shift and go to state 572


state 310

    (331) array_access -> primary_no_new_array [ . expression ]
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 573
    conditional_and_expression     shift and go to state 161

state 311

    (228) labeled_statement -> label : . statement
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    array_access                   shift and go to state 90
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 92
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 574
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    literal                        shift and go to state 146
    statement_without_trailing_substatement shift and go to state 99
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    labeled_statement              shift and go to state 77
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    block                          shift and go to state 107
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    if_then_else_statement         shift and go to state 108

state 312

    (236) for_statement -> FOR ( . for_init_opt ; expression_opt ; for_update_opt ) statement
    (252) enhanced_for_statement_header_init -> FOR ( . type NAME dims_opt
    (253) enhanced_for_statement_header_init -> FOR ( . modifiers type NAME dims_opt
    (238) for_init_opt -> . for_init
    (239) for_init_opt -> . empty
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (240) for_init -> . statement_expression_list
    (241) for_init -> . local_variable_declaration
    (623) empty -> .
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (242) statement_expression_list -> . statement_expression
    (243) statement_expression_list -> . statement_expression_list , statement_expression
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    ;               reduce using rule 623 (empty -> .)
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NAME            shift and go to state 584
    SUPER           shift and go to state 586
    NEW             shift and go to state 114
    @               shift and go to state 402
    THIS            shift and go to state 158
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    for_init_opt                   shift and go to state 578
    primary                        shift and go to state 579
    for_init                       shift and go to state 580
    primary_no_new_array           shift and go to state 87
    marker_annotation              shift and go to state 22
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    post_decrement_expression      shift and go to state 60
    reference_type                 shift and go to state 91
    postfix_expression             shift and go to state 59
    class_instance_creation_expression shift and go to state 72
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    array_creation_with_array_initializer shift and go to state 101
    statement_expression           shift and go to state 575
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    type                           shift and go to state 581
    empty                          shift and go to state 582
    field_access                   shift and go to state 96
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    single_member_annotation       shift and go to state 18
    class_instance_creation_expression_name shift and go to state 122
    generic_type                   shift and go to state 58
    statement_expression_list      shift and go to state 577
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation                     shift and go to state 10
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 583
    name                           shift and go to state 576
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    local_variable_declaration     shift and go to state 585
    pre_decrement_expression       shift and go to state 79
    modifier                       shift and go to state 51

state 313

    (117) pre_increment_expression -> PLUSPLUS unary_expression .

    *               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    /               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    %               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    +               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    -               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    LSHIFT          reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    RSHIFT          reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    RRSHIFT         reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    >               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    <               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    GTEQ            reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    LTEQ            reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    INSTANCEOF      reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    NEQ             reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    &               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    ^               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    |               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    ?               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    ;               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    )               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    $end            reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    :               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    ]               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    ,               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)
    }               reduce using rule 117 (pre_increment_expression -> PLUSPLUS unary_expression .)


state 314

    (159) cast_expression -> ( . primitive_type dims_opt ) unary_expression
    (160) cast_expression -> ( . name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> ( . name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> ( . name ) unary_expression_not_plus_minus
    (163) cast_expression -> ( . name dims ) unary_expression_not_plus_minus
    (145) primary_no_new_array -> ( . name )
    (146) primary_no_new_array -> ( . expression_not_name )
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (2) expression_not_name -> . assignment_expression_not_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (5) assignment_expression_not_name -> . assignment
    (6) assignment_expression_not_name -> . conditional_expression_not_name
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name ? expression : conditional_expression
    (24) conditional_expression_not_name -> . name ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name OR conditional_and_expression
    (29) conditional_or_expression_not_name -> . name OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name AND inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (37) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (38) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name | exclusive_or_expression
    (39) inclusive_or_expression_not_name -> . name | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (42) exclusive_or_expression_not_name -> . and_expression_not_name
    (43) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name ^ and_expression
    (44) exclusive_or_expression_not_name -> . name ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (47) and_expression_not_name -> . equality_expression_not_name
    (48) and_expression_not_name -> . and_expression_not_name & equality_expression
    (49) and_expression_not_name -> . name & equality_expression
    (53) equality_expression_not_name -> . instanceof_expression_not_name
    (54) equality_expression_not_name -> . equality_expression_not_name EQ instanceof_expression
    (55) equality_expression_not_name -> . name EQ instanceof_expression
    (56) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (57) equality_expression_not_name -> . name NEQ instanceof_expression
    (60) instanceof_expression_not_name -> . relational_expression_not_name
    (61) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (62) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (68) relational_expression_not_name -> . shift_expression_not_name
    (69) relational_expression_not_name -> . shift_expression_not_name < shift_expression
    (70) relational_expression_not_name -> . name < shift_expression
    (71) relational_expression_not_name -> . shift_expression_not_name > shift_expression
    (72) relational_expression_not_name -> . name > shift_expression
    (73) relational_expression_not_name -> . shift_expression_not_name GTEQ shift_expression
    (74) relational_expression_not_name -> . name GTEQ shift_expression
    (75) relational_expression_not_name -> . shift_expression_not_name LTEQ shift_expression
    (76) relational_expression_not_name -> . name LTEQ shift_expression
    (81) shift_expression_not_name -> . additive_expression_not_name
    (82) shift_expression_not_name -> . shift_expression_not_name LSHIFT additive_expression
    (83) shift_expression_not_name -> . name LSHIFT additive_expression
    (84) shift_expression_not_name -> . shift_expression_not_name RSHIFT additive_expression
    (85) shift_expression_not_name -> . name RSHIFT additive_expression
    (86) shift_expression_not_name -> . shift_expression_not_name RRSHIFT additive_expression
    (87) shift_expression_not_name -> . name RRSHIFT additive_expression
    (91) additive_expression_not_name -> . multiplicative_expression_not_name
    (92) additive_expression_not_name -> . additive_expression_not_name + multiplicative_expression
    (93) additive_expression_not_name -> . name + multiplicative_expression
    (94) additive_expression_not_name -> . additive_expression_not_name - multiplicative_expression
    (95) additive_expression_not_name -> . name - multiplicative_expression
    (100) multiplicative_expression_not_name -> . unary_expression_not_name
    (101) multiplicative_expression_not_name -> . multiplicative_expression_not_name * unary_expression
    (102) multiplicative_expression_not_name -> . name * unary_expression
    (103) multiplicative_expression_not_name -> . multiplicative_expression_not_name / unary_expression
    (104) multiplicative_expression_not_name -> . name / unary_expression
    (105) multiplicative_expression_not_name -> . multiplicative_expression_not_name % unary_expression
    (106) multiplicative_expression_not_name -> . name % unary_expression
    (112) unary_expression_not_name -> . pre_increment_expression
    (113) unary_expression_not_name -> . pre_decrement_expression
    (114) unary_expression_not_name -> . + unary_expression
    (115) unary_expression_not_name -> . - unary_expression
    (116) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (123) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (124) unary_expression_not_plus_minus_not_name -> . ~ unary_expression
    (125) unary_expression_not_plus_minus_not_name -> . ! unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . cast_expression
    (131) postfix_expression_not_name -> . primary
    (132) postfix_expression_not_name -> . post_increment_expression
    (133) postfix_expression_not_name -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 179
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    +               shift and go to state 264
    -               shift and go to state 278
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 267
    !               shift and go to state 277

    relational_expression_not_name shift and go to state 262
    primary                        shift and go to state 268
    expression_not_name            shift and go to state 275
    assignment_expression_not_name shift and go to state 263
    exclusive_or_expression_not_name shift and go to state 254
    inclusive_or_expression_not_name shift and go to state 269
    simple_name                    shift and go to state 64
    primitive_type                 shift and go to state 362
    postfix_expression_not_name    shift and go to state 265
    post_decrement_expression      shift and go to state 255
    pre_increment_expression       shift and go to state 266
    postfix_expression             shift and go to state 59
    class_instance_creation_expression shift and go to state 156
    conditional_expression_not_name shift and go to state 279
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    method_invocation              shift and go to state 176
    shift_expression_not_name      shift and go to state 256
    array_creation_without_array_initializer shift and go to state 95
    equality_expression_not_name   shift and go to state 281
    field_access                   shift and go to state 96
    unary_expression_not_plus_minus_not_name shift and go to state 257
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 282
    multiplicative_expression_not_name shift and go to state 276
    conditional_and_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    cast_expression                shift and go to state 270
    and_expression_not_name        shift and go to state 271
    primary_no_new_array           shift and go to state 87
    unary_expression_not_name      shift and go to state 280
    name                           shift and go to state 587
    conditional_or_expression_not_name shift and go to state 272
    instanceof_expression_not_name shift and go to state 273
    post_increment_expression      shift and go to state 260
    pre_decrement_expression       shift and go to state 261
    additive_expression_not_name   shift and go to state 274

state 315

    (119) unary_expression_not_plus_minus -> postfix_expression .
    (134) post_increment_expression -> postfix_expression . PLUSPLUS
    (135) post_decrement_expression -> postfix_expression . MINUSMINUS

    *               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    /               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    %               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    +               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    -               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    <               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    >               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    GTEQ            reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    LTEQ            reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    LSHIFT          reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    RSHIFT          reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    RRSHIFT         reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    INSTANCEOF      reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    EQ              reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    NEQ             reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    &               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ^               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    |               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    AND             reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ?               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    OR              reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    )               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ,               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    }               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ;               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    $end            reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    :               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    ]               reduce using rule 119 (unary_expression_not_plus_minus -> postfix_expression .)
    PLUSPLUS        shift and go to state 242
    MINUSMINUS      shift and go to state 251


state 316

    (298) resource_specification -> ( . resources semi_opt )
    (301) resources -> . resource
    (302) resources -> . resources trailing_semicolon resource
    (304) resource -> . type variable_declarator_id = variable_initializer
    (305) resource -> . modifiers type variable_declarator_id = variable_initializer
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    NAME            shift and go to state 212
    @               shift and go to state 402

    generic_type                   shift and go to state 58
    marker_annotation              shift and go to state 22
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 91
    primitive_type                 shift and go to state 340
    type                           shift and go to state 591
    resources                      shift and go to state 588
    class_or_interface             shift and go to state 144
    single_member_annotation       shift and go to state 18
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation                     shift and go to state 10
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 589
    resource                       shift and go to state 590
    name                           shift and go to state 342
    modifier                       shift and go to state 51

state 317

    (284) try_statement -> TRY try_block . catches
    (285) try_statement -> TRY try_block . catches_opt finally
    (287) catches -> . catch_clause
    (288) catches -> . catches catch_clause
    (289) catches_opt -> . catches
    (290) catches_opt -> . empty
    (291) catch_clause -> . CATCH ( catch_formal_parameter ) block
    (623) empty -> .

    CATCH           shift and go to state 594
    FINALLY         reduce using rule 623 (empty -> .)

    catches                        shift and go to state 592
    catch_clause                   shift and go to state 593
    catches_opt                    shift and go to state 595
    empty                          shift and go to state 596

state 318

    (296) try_statement_with_resources -> TRY resource_specification . try_block catches_opt
    (297) try_statement_with_resources -> TRY resource_specification . try_block catches_opt finally
    (286) try_block -> . block
    (164) block -> . { block_statements_opt }

    {               shift and go to state 106

    try_block                      shift and go to state 597
    block                          shift and go to state 319

state 319

    (286) try_block -> block .

    CATCH           reduce using rule 286 (try_block -> block .)
    FINALLY         reduce using rule 286 (try_block -> block .)
    $end            reduce using rule 286 (try_block -> block .)
    IF              reduce using rule 286 (try_block -> block .)
    WHILE           reduce using rule 286 (try_block -> block .)
    FOR             reduce using rule 286 (try_block -> block .)
    {               reduce using rule 286 (try_block -> block .)
    ASSERT          reduce using rule 286 (try_block -> block .)
    ;               reduce using rule 286 (try_block -> block .)
    SWITCH          reduce using rule 286 (try_block -> block .)
    DO              reduce using rule 286 (try_block -> block .)
    BREAK           reduce using rule 286 (try_block -> block .)
    CONTINUE        reduce using rule 286 (try_block -> block .)
    RETURN          reduce using rule 286 (try_block -> block .)
    SYNCHRONIZED    reduce using rule 286 (try_block -> block .)
    THROW           reduce using rule 286 (try_block -> block .)
    TRY             reduce using rule 286 (try_block -> block .)
    NAME            reduce using rule 286 (try_block -> block .)
    @               reduce using rule 286 (try_block -> block .)
    BOOLEAN         reduce using rule 286 (try_block -> block .)
    VOID            reduce using rule 286 (try_block -> block .)
    BYTE            reduce using rule 286 (try_block -> block .)
    SHORT           reduce using rule 286 (try_block -> block .)
    INT             reduce using rule 286 (try_block -> block .)
    LONG            reduce using rule 286 (try_block -> block .)
    CHAR            reduce using rule 286 (try_block -> block .)
    FLOAT           reduce using rule 286 (try_block -> block .)
    DOUBLE          reduce using rule 286 (try_block -> block .)
    PUBLIC          reduce using rule 286 (try_block -> block .)
    PROTECTED       reduce using rule 286 (try_block -> block .)
    PRIVATE         reduce using rule 286 (try_block -> block .)
    STATIC          reduce using rule 286 (try_block -> block .)
    ABSTRACT        reduce using rule 286 (try_block -> block .)
    FINAL           reduce using rule 286 (try_block -> block .)
    NATIVE          reduce using rule 286 (try_block -> block .)
    TRANSIENT       reduce using rule 286 (try_block -> block .)
    VOLATILE        reduce using rule 286 (try_block -> block .)
    STRICTFP        reduce using rule 286 (try_block -> block .)
    THIS            reduce using rule 286 (try_block -> block .)
    SUPER           reduce using rule 286 (try_block -> block .)
    PLUSPLUS        reduce using rule 286 (try_block -> block .)
    MINUSMINUS      reduce using rule 286 (try_block -> block .)
    NEW             reduce using rule 286 (try_block -> block .)
    <               reduce using rule 286 (try_block -> block .)
    (               reduce using rule 286 (try_block -> block .)
    NUM             reduce using rule 286 (try_block -> block .)
    CHAR_LITERAL    reduce using rule 286 (try_block -> block .)
    STRING_LITERAL  reduce using rule 286 (try_block -> block .)
    TRUE            reduce using rule 286 (try_block -> block .)
    FALSE           reduce using rule 286 (try_block -> block .)
    NULL            reduce using rule 286 (try_block -> block .)
    ENUM            reduce using rule 286 (try_block -> block .)
    CLASS           reduce using rule 286 (try_block -> block .)
    INTERFACE       reduce using rule 286 (try_block -> block .)
    }               reduce using rule 286 (try_block -> block .)
    CASE            reduce using rule 286 (try_block -> block .)
    DEFAULT         reduce using rule 286 (try_block -> block .)
    ELSE            reduce using rule 286 (try_block -> block .)


state 320

    (332) array_access -> array_creation_with_array_initializer [ . expression ]
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 598
    conditional_and_expression     shift and go to state 161

state 321

    (279) continue_statement -> CONTINUE ; .

    IF              reduce using rule 279 (continue_statement -> CONTINUE ; .)
    WHILE           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    FOR             reduce using rule 279 (continue_statement -> CONTINUE ; .)
    {               reduce using rule 279 (continue_statement -> CONTINUE ; .)
    ASSERT          reduce using rule 279 (continue_statement -> CONTINUE ; .)
    ;               reduce using rule 279 (continue_statement -> CONTINUE ; .)
    SWITCH          reduce using rule 279 (continue_statement -> CONTINUE ; .)
    DO              reduce using rule 279 (continue_statement -> CONTINUE ; .)
    BREAK           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 279 (continue_statement -> CONTINUE ; .)
    RETURN          reduce using rule 279 (continue_statement -> CONTINUE ; .)
    SYNCHRONIZED    reduce using rule 279 (continue_statement -> CONTINUE ; .)
    THROW           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    TRY             reduce using rule 279 (continue_statement -> CONTINUE ; .)
    NAME            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    @               reduce using rule 279 (continue_statement -> CONTINUE ; .)
    BOOLEAN         reduce using rule 279 (continue_statement -> CONTINUE ; .)
    VOID            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    BYTE            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    SHORT           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    INT             reduce using rule 279 (continue_statement -> CONTINUE ; .)
    LONG            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    CHAR            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 279 (continue_statement -> CONTINUE ; .)
    PUBLIC          reduce using rule 279 (continue_statement -> CONTINUE ; .)
    PROTECTED       reduce using rule 279 (continue_statement -> CONTINUE ; .)
    PRIVATE         reduce using rule 279 (continue_statement -> CONTINUE ; .)
    STATIC          reduce using rule 279 (continue_statement -> CONTINUE ; .)
    ABSTRACT        reduce using rule 279 (continue_statement -> CONTINUE ; .)
    FINAL           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    NATIVE          reduce using rule 279 (continue_statement -> CONTINUE ; .)
    TRANSIENT       reduce using rule 279 (continue_statement -> CONTINUE ; .)
    VOLATILE        reduce using rule 279 (continue_statement -> CONTINUE ; .)
    STRICTFP        reduce using rule 279 (continue_statement -> CONTINUE ; .)
    THIS            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    SUPER           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    PLUSPLUS        reduce using rule 279 (continue_statement -> CONTINUE ; .)
    MINUSMINUS      reduce using rule 279 (continue_statement -> CONTINUE ; .)
    NEW             reduce using rule 279 (continue_statement -> CONTINUE ; .)
    <               reduce using rule 279 (continue_statement -> CONTINUE ; .)
    (               reduce using rule 279 (continue_statement -> CONTINUE ; .)
    NUM             reduce using rule 279 (continue_statement -> CONTINUE ; .)
    CHAR_LITERAL    reduce using rule 279 (continue_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 279 (continue_statement -> CONTINUE ; .)
    TRUE            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    FALSE           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    NULL            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    ENUM            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    CLASS           reduce using rule 279 (continue_statement -> CONTINUE ; .)
    INTERFACE       reduce using rule 279 (continue_statement -> CONTINUE ; .)
    }               reduce using rule 279 (continue_statement -> CONTINUE ; .)
    CASE            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    DEFAULT         reduce using rule 279 (continue_statement -> CONTINUE ; .)
    $end            reduce using rule 279 (continue_statement -> CONTINUE ; .)
    ELSE            reduce using rule 279 (continue_statement -> CONTINUE ; .)


state 322

    (280) continue_statement -> CONTINUE NAME . ;

    ;               shift and go to state 599


state 323

    (251) enhanced_for_statement_header -> enhanced_for_statement_header_init : . expression )
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    conditional_expression         shift and go to state 188
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 600
    conditional_and_expression     shift and go to state 161

state 324

    (164) block -> { block_statements_opt . }

    }               shift and go to state 601


state 325

    (167) block_statements -> block_statement .

    IF              reduce using rule 167 (block_statements -> block_statement .)
    WHILE           reduce using rule 167 (block_statements -> block_statement .)
    FOR             reduce using rule 167 (block_statements -> block_statement .)
    {               reduce using rule 167 (block_statements -> block_statement .)
    ASSERT          reduce using rule 167 (block_statements -> block_statement .)
    ;               reduce using rule 167 (block_statements -> block_statement .)
    SWITCH          reduce using rule 167 (block_statements -> block_statement .)
    DO              reduce using rule 167 (block_statements -> block_statement .)
    BREAK           reduce using rule 167 (block_statements -> block_statement .)
    CONTINUE        reduce using rule 167 (block_statements -> block_statement .)
    RETURN          reduce using rule 167 (block_statements -> block_statement .)
    SYNCHRONIZED    reduce using rule 167 (block_statements -> block_statement .)
    THROW           reduce using rule 167 (block_statements -> block_statement .)
    TRY             reduce using rule 167 (block_statements -> block_statement .)
    NAME            reduce using rule 167 (block_statements -> block_statement .)
    @               reduce using rule 167 (block_statements -> block_statement .)
    BOOLEAN         reduce using rule 167 (block_statements -> block_statement .)
    VOID            reduce using rule 167 (block_statements -> block_statement .)
    BYTE            reduce using rule 167 (block_statements -> block_statement .)
    SHORT           reduce using rule 167 (block_statements -> block_statement .)
    INT             reduce using rule 167 (block_statements -> block_statement .)
    LONG            reduce using rule 167 (block_statements -> block_statement .)
    CHAR            reduce using rule 167 (block_statements -> block_statement .)
    FLOAT           reduce using rule 167 (block_statements -> block_statement .)
    DOUBLE          reduce using rule 167 (block_statements -> block_statement .)
    PUBLIC          reduce using rule 167 (block_statements -> block_statement .)
    PROTECTED       reduce using rule 167 (block_statements -> block_statement .)
    PRIVATE         reduce using rule 167 (block_statements -> block_statement .)
    STATIC          reduce using rule 167 (block_statements -> block_statement .)
    ABSTRACT        reduce using rule 167 (block_statements -> block_statement .)
    FINAL           reduce using rule 167 (block_statements -> block_statement .)
    NATIVE          reduce using rule 167 (block_statements -> block_statement .)
    TRANSIENT       reduce using rule 167 (block_statements -> block_statement .)
    VOLATILE        reduce using rule 167 (block_statements -> block_statement .)
    STRICTFP        reduce using rule 167 (block_statements -> block_statement .)
    THIS            reduce using rule 167 (block_statements -> block_statement .)
    SUPER           reduce using rule 167 (block_statements -> block_statement .)
    PLUSPLUS        reduce using rule 167 (block_statements -> block_statement .)
    MINUSMINUS      reduce using rule 167 (block_statements -> block_statement .)
    NEW             reduce using rule 167 (block_statements -> block_statement .)
    <               reduce using rule 167 (block_statements -> block_statement .)
    (               reduce using rule 167 (block_statements -> block_statement .)
    NUM             reduce using rule 167 (block_statements -> block_statement .)
    CHAR_LITERAL    reduce using rule 167 (block_statements -> block_statement .)
    STRING_LITERAL  reduce using rule 167 (block_statements -> block_statement .)
    TRUE            reduce using rule 167 (block_statements -> block_statement .)
    FALSE           reduce using rule 167 (block_statements -> block_statement .)
    NULL            reduce using rule 167 (block_statements -> block_statement .)
    ENUM            reduce using rule 167 (block_statements -> block_statement .)
    CLASS           reduce using rule 167 (block_statements -> block_statement .)
    INTERFACE       reduce using rule 167 (block_statements -> block_statement .)
    }               reduce using rule 167 (block_statements -> block_statement .)
    CASE            reduce using rule 167 (block_statements -> block_statement .)
    DEFAULT         reduce using rule 167 (block_statements -> block_statement .)


state 326

    (166) block_statements_opt -> empty .
    (352) modifiers_opt -> empty .

    }               reduce using rule 166 (block_statements_opt -> empty .)
    ENUM            reduce using rule 352 (modifiers_opt -> empty .)
    CLASS           reduce using rule 352 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 352 (modifiers_opt -> empty .)


state 327

    (165) block_statements_opt -> block_statements .
    (168) block_statements -> block_statements . block_statement
    (169) block_statement -> . local_variable_declaration_statement
    (170) block_statement -> . statement
    (171) block_statement -> . class_declaration
    (172) block_statement -> . interface_declaration
    (173) block_statement -> . annotation_type_declaration
    (174) block_statement -> . enum_declaration
    (175) local_variable_declaration_statement -> . local_variable_declaration ;
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (529) enum_declaration -> . enum_header enum_body
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (623) empty -> .
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    }               reduce using rule 165 (block_statements_opt -> block_statements .)
    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 84
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    @               shift and go to state 30
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    expression_statement           shift and go to state 54
    enum_header                    shift and go to state 7
    explicit_constructor_invocation shift and go to state 55
    throw_statement                shift and go to state 57
    generic_type                   shift and go to state 58
    post_decrement_expression      shift and go to state 60
    assert_statement               shift and go to state 61
    statement_expression           shift and go to state 66
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    local_variable_declaration_statement shift and go to state 70
    try_statement                  shift and go to state 71
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 73
    labeled_statement              shift and go to state 77
    post_increment_expression      shift and go to state 78
    enum_header_name               shift and go to state 43
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    interface_declaration          shift and go to state 83
    type_arguments                 shift and go to state 85
    break_statement                shift and go to state 86
    class_or_interface_type        shift and go to state 88
    switch_statement               shift and go to state 89
    array_access                   shift and go to state 90
    single_member_annotation       shift and go to state 18
    reference_type                 shift and go to state 91
    label                          shift and go to state 92
    continue_statement             shift and go to state 93
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    statement_without_trailing_substatement shift and go to state 99
    array_creation_with_array_initializer shift and go to state 101
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation_name                shift and go to state 38
    interface_header_name          shift and go to state 14
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_header_init shift and go to state 105
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108
    modifiers_opt                  shift and go to state 26
    primary                        shift and go to state 109
    marker_annotation              shift and go to state 22
    block_statement                shift and go to state 602
    if_then_statement              shift and go to state 113
    array_creation_without_array_initializer shift and go to state 95
    while_statement                shift and go to state 65
    synchronized_statement         shift and go to state 115
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    statement                      shift and go to state 119
    method_invocation              shift and go to state 120
    empty                          shift and go to state 121
    annotation_type_declaration_header_name shift and go to state 31
    class_instance_creation_expression_name shift and go to state 122
    class_header                   shift and go to state 36
    modifiers                      shift and go to state 125
    type                           shift and go to state 128
    enum_declaration               shift and go to state 129
    empty_statement                shift and go to state 130
    local_variable_declaration     shift and go to state 134
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 135
    enhanced_for_statement         shift and go to state 138
    class_header_name1             shift and go to state 8
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    qualified_name                 shift and go to state 141
    class_header_name              shift and go to state 5
    postfix_expression             shift and go to state 59
    return_statement               shift and go to state 142
    do_statement                   shift and go to state 143
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    annotation                     shift and go to state 10
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 151

state 328

    (311) explicit_constructor_invocation -> primary . . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> primary . . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> primary . . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> primary . . type_arguments THIS ( argument_list_opt ) ;
    (223) method_invocation -> primary . . type_arguments NAME ( argument_list_opt )
    (226) method_invocation -> primary . . NAME ( argument_list_opt )
    (321) class_instance_creation_expression -> primary . . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . . NEW class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> primary . . NAME
    (391) type_arguments -> . < type_argument_list1

    SUPER           shift and go to state 607
    THIS            shift and go to state 605
    NAME            shift and go to state 603
    NEW             shift and go to state 606
    <               shift and go to state 67

    type_arguments                 shift and go to state 604

state 329

    (234) while_statement -> WHILE ( . expression ) statement
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 608
    conditional_and_expression     shift and go to state 161

state 330

    (319) class_instance_creation_expression -> NEW type_arguments . class_type ( argument_list_opt ) class_body_opt
    (382) class_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type                     shift and go to state 609
    class_or_interface             shift and go to state 144
    generic_type                   shift and go to state 331
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 394
    name                           shift and go to state 335

state 331

    (381) class_or_interface_type -> generic_type .
    (384) class_or_interface -> generic_type . . name

    ,               reduce using rule 381 (class_or_interface_type -> generic_type .)
    {               reduce using rule 381 (class_or_interface_type -> generic_type .)
    (               reduce using rule 381 (class_or_interface_type -> generic_type .)
    ;               reduce using rule 381 (class_or_interface_type -> generic_type .)
    [               reduce using rule 381 (class_or_interface_type -> generic_type .)
    IMPLEMENTS      reduce using rule 381 (class_or_interface_type -> generic_type .)
    )               reduce using rule 381 (class_or_interface_type -> generic_type .)
    .               shift and go to state 610


state 332

    (334) array_creation_with_array_initializer -> NEW class_or_interface_type . dim_with_or_without_exprs array_initializer
    (340) array_creation_without_array_initializer -> NEW class_or_interface_type . dim_with_or_without_exprs
    (382) class_type -> class_or_interface_type .
    (335) dim_with_or_without_exprs -> . dim_with_or_without_expr
    (336) dim_with_or_without_exprs -> . dim_with_or_without_exprs dim_with_or_without_expr
    (337) dim_with_or_without_expr -> . [ expression ]
    (338) dim_with_or_without_expr -> . [ ]

    (               reduce using rule 382 (class_type -> class_or_interface_type .)
    [               shift and go to state 613

    dim_with_or_without_expr       shift and go to state 612
    dim_with_or_without_exprs      shift and go to state 611

state 333

    (333) array_creation_with_array_initializer -> NEW primitive_type . dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> NEW primitive_type . dim_with_or_without_exprs
    (335) dim_with_or_without_exprs -> . dim_with_or_without_expr
    (336) dim_with_or_without_exprs -> . dim_with_or_without_exprs dim_with_or_without_expr
    (337) dim_with_or_without_expr -> . [ expression ]
    (338) dim_with_or_without_expr -> . [ ]

    [               shift and go to state 613

    dim_with_or_without_expr       shift and go to state 612
    dim_with_or_without_exprs      shift and go to state 614

state 334

    (320) class_instance_creation_expression -> NEW class_type . ( argument_list_opt ) class_body_opt

    (               shift and go to state 615


state 335

    (383) class_or_interface -> name .
    (344) qualified_name -> name . . simple_name

    <               reduce using rule 383 (class_or_interface -> name .)
    [               reduce using rule 383 (class_or_interface -> name .)
    )               reduce using rule 383 (class_or_interface -> name .)
    (               reduce using rule 383 (class_or_interface -> name .)
    ,               reduce using rule 383 (class_or_interface -> name .)
    {               reduce using rule 383 (class_or_interface -> name .)
    IMPLEMENTS      reduce using rule 383 (class_or_interface -> name .)
    ;               reduce using rule 383 (class_or_interface -> name .)
    .               shift and go to state 437


state 336

    (152) primary_no_new_array -> primitive_type . . CLASS

    CLASS           shift and go to state 616


state 337

    (387) array_type -> primitive_type dims .
    (151) primary_no_new_array -> primitive_type dims . . CLASS

    >               reduce using rule 387 (array_type -> primitive_type dims .)
    ,               reduce using rule 387 (array_type -> primitive_type dims .)
    NAME            reduce using rule 387 (array_type -> primitive_type dims .)
    .               shift and go to state 617


state 338

    (263) switch_statement -> SWITCH ( . expression ) switch_block
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 618
    conditional_and_expression     shift and go to state 161

state 339

    (323) class_instance_creation_expression -> class_instance_creation_expression_name NEW . class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> class_instance_creation_expression_name NEW . type_arguments class_type ( argument_list_opt ) class_body_opt
    (382) class_type -> . class_or_interface_type
    (391) type_arguments -> . < type_argument_list1
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    <               shift and go to state 67
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type                     shift and go to state 619
    class_or_interface             shift and go to state 144
    type_arguments                 shift and go to state 620
    generic_type                   shift and go to state 331
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 394
    name                           shift and go to state 335

state 340

    (367) type -> primitive_type .
    (387) array_type -> primitive_type . dims
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    |               reduce using rule 367 (type -> primitive_type .)
    NAME            reduce using rule 367 (type -> primitive_type .)
    ELLIPSIS        reduce using rule 367 (type -> primitive_type .)
    [               shift and go to state 238

    dims                           shift and go to state 548
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 341

    (177) local_variable_declaration -> modifiers type . variable_declarators
    (178) variable_declarators -> . variable_declarator
    (179) variable_declarators -> . variable_declarators , variable_declarator
    (180) variable_declarator -> . variable_declarator_id
    (181) variable_declarator -> . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 345

    variable_declarators           shift and go to state 621
    variable_declarator            shift and go to state 346
    variable_declarator_id         shift and go to state 347

state 342

    (388) array_type -> name . dims
    (383) class_or_interface -> name .
    (344) qualified_name -> name . . simple_name
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    <               reduce using rule 383 (class_or_interface -> name .)
    NAME            reduce using rule 383 (class_or_interface -> name .)
    INSTANCEOF      reduce using rule 383 (class_or_interface -> name .)
    EQ              reduce using rule 383 (class_or_interface -> name .)
    NEQ             reduce using rule 383 (class_or_interface -> name .)
    &               reduce using rule 383 (class_or_interface -> name .)
    ^               reduce using rule 383 (class_or_interface -> name .)
    |               reduce using rule 383 (class_or_interface -> name .)
    AND             reduce using rule 383 (class_or_interface -> name .)
    ?               reduce using rule 383 (class_or_interface -> name .)
    OR              reduce using rule 383 (class_or_interface -> name .)
    )               reduce using rule 383 (class_or_interface -> name .)
    ,               reduce using rule 383 (class_or_interface -> name .)
    }               reduce using rule 383 (class_or_interface -> name .)
    ;               reduce using rule 383 (class_or_interface -> name .)
    $end            reduce using rule 383 (class_or_interface -> name .)
    :               reduce using rule 383 (class_or_interface -> name .)
    ]               reduce using rule 383 (class_or_interface -> name .)
    ELLIPSIS        reduce using rule 383 (class_or_interface -> name .)
    .               shift and go to state 437
    [               shift and go to state 238

    one_dim_loop                   shift and go to state 237
    dims                           shift and go to state 556
    dims_loop                      shift and go to state 236

state 343

    (221) method_invocation -> NAME ( . argument_list_opt )
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 622
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 344

    (176) local_variable_declaration -> type variable_declarators .
    (179) variable_declarators -> variable_declarators . , variable_declarator

    ;               reduce using rule 176 (local_variable_declaration -> type variable_declarators .)
    ,               shift and go to state 623


state 345

    (182) variable_declarator_id -> NAME . dims_opt
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    =               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    )               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    one_dim_loop                   shift and go to state 237
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    dims_opt                       shift and go to state 624
    empty                          shift and go to state 626

state 346

    (178) variable_declarators -> variable_declarator .

    ,               reduce using rule 178 (variable_declarators -> variable_declarator .)
    ;               reduce using rule 178 (variable_declarators -> variable_declarator .)


state 347

    (180) variable_declarator -> variable_declarator_id .
    (181) variable_declarator -> variable_declarator_id . = variable_initializer

    ,               reduce using rule 180 (variable_declarator -> variable_declarator_id .)
    ;               reduce using rule 180 (variable_declarator -> variable_declarator_id .)
    =               shift and go to state 627


state 348

    (277) break_statement -> BREAK ; .

    $end            reduce using rule 277 (break_statement -> BREAK ; .)
    IF              reduce using rule 277 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 277 (break_statement -> BREAK ; .)
    FOR             reduce using rule 277 (break_statement -> BREAK ; .)
    {               reduce using rule 277 (break_statement -> BREAK ; .)
    ASSERT          reduce using rule 277 (break_statement -> BREAK ; .)
    ;               reduce using rule 277 (break_statement -> BREAK ; .)
    SWITCH          reduce using rule 277 (break_statement -> BREAK ; .)
    DO              reduce using rule 277 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 277 (break_statement -> BREAK ; .)
    CONTINUE        reduce using rule 277 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 277 (break_statement -> BREAK ; .)
    SYNCHRONIZED    reduce using rule 277 (break_statement -> BREAK ; .)
    THROW           reduce using rule 277 (break_statement -> BREAK ; .)
    TRY             reduce using rule 277 (break_statement -> BREAK ; .)
    NAME            reduce using rule 277 (break_statement -> BREAK ; .)
    @               reduce using rule 277 (break_statement -> BREAK ; .)
    BOOLEAN         reduce using rule 277 (break_statement -> BREAK ; .)
    VOID            reduce using rule 277 (break_statement -> BREAK ; .)
    BYTE            reduce using rule 277 (break_statement -> BREAK ; .)
    SHORT           reduce using rule 277 (break_statement -> BREAK ; .)
    INT             reduce using rule 277 (break_statement -> BREAK ; .)
    LONG            reduce using rule 277 (break_statement -> BREAK ; .)
    CHAR            reduce using rule 277 (break_statement -> BREAK ; .)
    FLOAT           reduce using rule 277 (break_statement -> BREAK ; .)
    DOUBLE          reduce using rule 277 (break_statement -> BREAK ; .)
    PUBLIC          reduce using rule 277 (break_statement -> BREAK ; .)
    PROTECTED       reduce using rule 277 (break_statement -> BREAK ; .)
    PRIVATE         reduce using rule 277 (break_statement -> BREAK ; .)
    STATIC          reduce using rule 277 (break_statement -> BREAK ; .)
    ABSTRACT        reduce using rule 277 (break_statement -> BREAK ; .)
    FINAL           reduce using rule 277 (break_statement -> BREAK ; .)
    NATIVE          reduce using rule 277 (break_statement -> BREAK ; .)
    TRANSIENT       reduce using rule 277 (break_statement -> BREAK ; .)
    VOLATILE        reduce using rule 277 (break_statement -> BREAK ; .)
    STRICTFP        reduce using rule 277 (break_statement -> BREAK ; .)
    THIS            reduce using rule 277 (break_statement -> BREAK ; .)
    SUPER           reduce using rule 277 (break_statement -> BREAK ; .)
    PLUSPLUS        reduce using rule 277 (break_statement -> BREAK ; .)
    MINUSMINUS      reduce using rule 277 (break_statement -> BREAK ; .)
    NEW             reduce using rule 277 (break_statement -> BREAK ; .)
    <               reduce using rule 277 (break_statement -> BREAK ; .)
    (               reduce using rule 277 (break_statement -> BREAK ; .)
    NUM             reduce using rule 277 (break_statement -> BREAK ; .)
    CHAR_LITERAL    reduce using rule 277 (break_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 277 (break_statement -> BREAK ; .)
    TRUE            reduce using rule 277 (break_statement -> BREAK ; .)
    FALSE           reduce using rule 277 (break_statement -> BREAK ; .)
    NULL            reduce using rule 277 (break_statement -> BREAK ; .)
    ENUM            reduce using rule 277 (break_statement -> BREAK ; .)
    CLASS           reduce using rule 277 (break_statement -> BREAK ; .)
    INTERFACE       reduce using rule 277 (break_statement -> BREAK ; .)
    }               reduce using rule 277 (break_statement -> BREAK ; .)
    CASE            reduce using rule 277 (break_statement -> BREAK ; .)
    DEFAULT         reduce using rule 277 (break_statement -> BREAK ; .)
    ELSE            reduce using rule 277 (break_statement -> BREAK ; .)


state 349

    (278) break_statement -> BREAK NAME . ;

    ;               shift and go to state 628


state 350

    (175) local_variable_declaration_statement -> local_variable_declaration ; .

    IF              reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    WHILE           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FOR             reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    {               reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    ASSERT          reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    ;               reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    SWITCH          reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    DO              reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BREAK           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CONTINUE        reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    RETURN          reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    SYNCHRONIZED    reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    THROW           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    TRY             reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NAME            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    @               reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BOOLEAN         reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    VOID            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BYTE            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    SHORT           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    INT             reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    LONG            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CHAR            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FLOAT           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    DOUBLE          reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PUBLIC          reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PROTECTED       reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PRIVATE         reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STATIC          reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    ABSTRACT        reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FINAL           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NATIVE          reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    TRANSIENT       reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    VOLATILE        reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STRICTFP        reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    THIS            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    SUPER           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PLUSPLUS        reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    MINUSMINUS      reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NEW             reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    <               reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    (               reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NUM             reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CHAR_LITERAL    reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STRING_LITERAL  reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    TRUE            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FALSE           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NULL            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    ENUM            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CLASS           reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    INTERFACE       reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    }               reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    $end            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CASE            reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)
    DEFAULT         reduce using rule 175 (local_variable_declaration_statement -> local_variable_declaration ; .)


state 351

    (276) do_statement -> DO statement . WHILE ( expression ) ;

    WHILE           shift and go to state 629


state 352

    (260) assert_statement -> ASSERT expression . ;
    (261) assert_statement -> ASSERT expression . : expression ;

    ;               shift and go to state 630
    :               shift and go to state 631


state 353

    (385) generic_type -> class_or_interface type_arguments .

    .               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    [               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    NAME            reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    >               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    ,               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    (               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    INSTANCEOF      reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    EQ              reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    NEQ             reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    &               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    ^               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    |               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    AND             reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    ?               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    OR              reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    $end            reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    ;               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    :               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    )               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    ]               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    }               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    {               reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    RSHIFT          reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    RRSHIFT         reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    IMPLEMENTS      reduce using rule 385 (generic_type -> class_or_interface type_arguments .)
    ELLIPSIS        reduce using rule 385 (generic_type -> class_or_interface type_arguments .)


state 354

    (386) generic_type -> class_or_interface < . >
    (391) type_arguments -> < . type_argument_list1
    (392) type_argument_list1 -> . type_argument1
    (393) type_argument_list1 -> . type_argument_list , type_argument1
    (398) type_argument1 -> . reference_type1
    (399) type_argument1 -> . wildcard1
    (394) type_argument_list -> . type_argument
    (395) type_argument_list -> . type_argument_list , type_argument
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (417) wildcard1 -> . ? >
    (418) wildcard1 -> . ? wildcard_bounds1
    (396) type_argument -> . reference_type
    (397) type_argument -> . wildcard
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (413) wildcard -> . ?
    (414) wildcard -> . ? wildcard_bounds
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    >               shift and go to state 632
    ?               shift and go to state 288
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    wildcard1                      shift and go to state 289
    type_argument_list             shift and go to state 290
    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 291
    type_argument1                 shift and go to state 292
    reference_type                 shift and go to state 286
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    type_argument_list1            shift and go to state 285
    wildcard                       shift and go to state 296
    reference_type1                shift and go to state 293
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 88
    type_argument                  shift and go to state 294

state 355

    (118) pre_decrement_expression -> MINUSMINUS unary_expression .

    *               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    /               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    %               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    +               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    -               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    LSHIFT          reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    RSHIFT          reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    RRSHIFT         reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    INSTANCEOF      reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    NEQ             reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    &               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    ^               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    |               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    ?               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    )               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    ,               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    }               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    ;               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    <               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    >               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    GTEQ            reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    LTEQ            reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    $end            reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    :               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    ]               reduce using rule 118 (pre_decrement_expression -> MINUSMINUS unary_expression .)


state 356

    (231) if_then_statement -> IF ( . expression ) statement
    (232) if_then_else_statement -> IF ( . expression ) statement_no_short_if ELSE statement
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    cast_expression                shift and go to state 177
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 633
    conditional_and_expression     shift and go to state 161

state 357

    (308) explicit_constructor_invocation -> SUPER ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 634
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 358

    (224) method_invocation -> SUPER . . type_arguments NAME ( argument_list_opt )
    (227) method_invocation -> SUPER . . NAME ( argument_list_opt )
    (329) field_access -> SUPER . . NAME
    (391) type_arguments -> . < type_argument_list1

    NAME            shift and go to state 635
    <               shift and go to state 67

    type_arguments                 shift and go to state 636

state 359

    (283) throw_statement -> THROW expression . ;

    ;               shift and go to state 637


state 360

    (36) inclusive_or_expression -> inclusive_or_expression | . exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 638
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 361

    (145) primary_no_new_array -> ( name . )
    (160) cast_expression -> ( name . type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> ( name . type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> ( name . ) unary_expression_not_plus_minus
    (163) cast_expression -> ( name . dims ) unary_expression_not_plus_minus
    (344) qualified_name -> name . . simple_name
    (24) conditional_expression_not_name -> name . ? expression : conditional_expression
    (128) postfix_expression -> name .
    (29) conditional_or_expression_not_name -> name . OR conditional_and_expression
    (34) conditional_and_expression_not_name -> name . AND inclusive_or_expression
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (39) inclusive_or_expression_not_name -> name . | exclusive_or_expression
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (330) array_access -> name . [ expression ]
    (44) exclusive_or_expression_not_name -> name . ^ and_expression
    (325) class_instance_creation_expression_name -> name . .
    (49) and_expression_not_name -> name . & equality_expression
    (55) equality_expression_not_name -> name . EQ instanceof_expression
    (57) equality_expression_not_name -> name . NEQ instanceof_expression
    (61) instanceof_expression_not_name -> name . INSTANCEOF reference_type
    (70) relational_expression_not_name -> name . < shift_expression
    (72) relational_expression_not_name -> name . > shift_expression
    (74) relational_expression_not_name -> name . GTEQ shift_expression
    (76) relational_expression_not_name -> name . LTEQ shift_expression
    (83) shift_expression_not_name -> name . LSHIFT additive_expression
    (85) shift_expression_not_name -> name . RSHIFT additive_expression
    (87) shift_expression_not_name -> name . RRSHIFT additive_expression
    (93) additive_expression_not_name -> name . + multiplicative_expression
    (95) additive_expression_not_name -> name . - multiplicative_expression
    (102) multiplicative_expression_not_name -> name . * unary_expression
    (104) multiplicative_expression_not_name -> name . / unary_expression
    (106) multiplicative_expression_not_name -> name . % unary_expression
    (391) type_arguments -> . < type_argument_list1
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    )               shift and go to state 641
    .               shift and go to state 519
    ?               shift and go to state 520
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    =               reduce using rule 128 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 128 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    LSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT_ASSIGN  reduce using rule 128 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR              shift and go to state 524
    AND             shift and go to state 523
    |               shift and go to state 528
    [               shift and go to state 301
    ^               shift and go to state 510
    &               shift and go to state 514
    EQ              shift and go to state 525
    NEQ             shift and go to state 513
    INSTANCEOF      shift and go to state 522
    <               shift and go to state 640
    >               shift and go to state 521
    GTEQ            shift and go to state 507
    LTEQ            shift and go to state 526
    LSHIFT          shift and go to state 511
    RSHIFT          shift and go to state 506
    RRSHIFT         shift and go to state 527
    +               shift and go to state 516
    -               shift and go to state 508
    *               shift and go to state 517
    /               shift and go to state 518
    %               shift and go to state 512

    type_arguments                 shift and go to state 639
    one_dim_loop                   shift and go to state 237
    dims                           shift and go to state 642
    dims_loop                      shift and go to state 236

state 362

    (159) cast_expression -> ( primitive_type . dims_opt ) unary_expression
    (151) primary_no_new_array -> primitive_type . dims . CLASS
    (152) primary_no_new_array -> primitive_type . . CLASS
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               shift and go to state 336
    )               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    dims_opt                       shift and go to state 643
    dims                           shift and go to state 644
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 363

    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (344) qualified_name -> name . . simple_name
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (325) class_instance_creation_expression_name -> name . .
    (343) simple_name -> . NAME
    (391) type_arguments -> . < type_argument_list1

    THIS            shift and go to state 645
    SUPER           shift and go to state 647
    CLASS           shift and go to state 563
    NAME            shift and go to state 564
    NEW             reduce using rule 325 (class_instance_creation_expression_name -> name . .)
    <               shift and go to state 67

    type_arguments                 shift and go to state 646
    simple_name                    shift and go to state 560

state 364

    (150) primary_no_new_array -> name dims . . CLASS

    .               shift and go to state 557


state 365

    (31) conditional_and_expression -> conditional_and_expression AND . inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 648
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 366

    (109) unary_expression -> + unary_expression .

    ;               reduce using rule 109 (unary_expression -> + unary_expression .)
    *               reduce using rule 109 (unary_expression -> + unary_expression .)
    /               reduce using rule 109 (unary_expression -> + unary_expression .)
    %               reduce using rule 109 (unary_expression -> + unary_expression .)
    +               reduce using rule 109 (unary_expression -> + unary_expression .)
    -               reduce using rule 109 (unary_expression -> + unary_expression .)
    LSHIFT          reduce using rule 109 (unary_expression -> + unary_expression .)
    RSHIFT          reduce using rule 109 (unary_expression -> + unary_expression .)
    RRSHIFT         reduce using rule 109 (unary_expression -> + unary_expression .)
    >               reduce using rule 109 (unary_expression -> + unary_expression .)
    <               reduce using rule 109 (unary_expression -> + unary_expression .)
    GTEQ            reduce using rule 109 (unary_expression -> + unary_expression .)
    LTEQ            reduce using rule 109 (unary_expression -> + unary_expression .)
    INSTANCEOF      reduce using rule 109 (unary_expression -> + unary_expression .)
    EQ              reduce using rule 109 (unary_expression -> + unary_expression .)
    NEQ             reduce using rule 109 (unary_expression -> + unary_expression .)
    &               reduce using rule 109 (unary_expression -> + unary_expression .)
    ^               reduce using rule 109 (unary_expression -> + unary_expression .)
    |               reduce using rule 109 (unary_expression -> + unary_expression .)
    AND             reduce using rule 109 (unary_expression -> + unary_expression .)
    ?               reduce using rule 109 (unary_expression -> + unary_expression .)
    OR              reduce using rule 109 (unary_expression -> + unary_expression .)
    $end            reduce using rule 109 (unary_expression -> + unary_expression .)
    )               reduce using rule 109 (unary_expression -> + unary_expression .)
    :               reduce using rule 109 (unary_expression -> + unary_expression .)
    ]               reduce using rule 109 (unary_expression -> + unary_expression .)
    ,               reduce using rule 109 (unary_expression -> + unary_expression .)
    }               reduce using rule 109 (unary_expression -> + unary_expression .)


state 367

    (26) conditional_or_expression -> conditional_or_expression OR . conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 154
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    conditional_and_expression     shift and go to state 649
    class_instance_creation_expression shift and go to state 156

state 368

    (21) conditional_expression -> conditional_or_expression ? . expression : conditional_expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 650
    conditional_and_expression     shift and go to state 161

state 369

    (97) multiplicative_expression -> multiplicative_expression * . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 651
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 370

    (99) multiplicative_expression -> multiplicative_expression % . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 652
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 371

    (98) multiplicative_expression -> multiplicative_expression / . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 653
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 372

    (79) shift_expression -> shift_expression RSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 654
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 373

    (78) shift_expression -> shift_expression LSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 655
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 374

    (80) shift_expression -> shift_expression RRSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 656
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 375

    (41) exclusive_or_expression -> exclusive_or_expression ^ . and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 657
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 376

    (321) class_instance_creation_expression -> primary . . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . . NEW class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> primary . . NAME
    (223) method_invocation -> primary . . type_arguments NAME ( argument_list_opt )
    (226) method_invocation -> primary . . NAME ( argument_list_opt )
    (391) type_arguments -> . < type_argument_list1

    NEW             shift and go to state 606
    NAME            shift and go to state 659
    <               shift and go to state 67

    type_arguments                 shift and go to state 658

state 377

    (89) additive_expression -> additive_expression + . multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 660
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 378

    (90) additive_expression -> additive_expression - . multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 661
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 379

    (151) primary_no_new_array -> primitive_type dims . . CLASS

    .               shift and go to state 617


state 380

    (66) relational_expression -> relational_expression GTEQ . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 662
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 381

    (67) relational_expression -> relational_expression LTEQ . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 663
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 382

    (65) relational_expression -> relational_expression < . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 664
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 383

    (64) relational_expression -> relational_expression > . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 665
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 384

    (51) equality_expression -> equality_expression EQ . instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 666
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    relational_expression          shift and go to state 175
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 385

    (52) equality_expression -> equality_expression NEQ . instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 667
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    relational_expression          shift and go to state 175
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 386

    (59) instanceof_expression -> instanceof_expression INSTANCEOF . reference_type
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 342
    class_or_interface             shift and go to state 144
    reference_type                 shift and go to state 668
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 387

    (120) unary_expression_not_plus_minus -> ~ unary_expression .

    *               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    /               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    %               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    +               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    -               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    <               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    >               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    GTEQ            reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    LTEQ            reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    LSHIFT          reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    RSHIFT          reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    RRSHIFT         reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    INSTANCEOF      reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    EQ              reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    NEQ             reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    &               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    ^               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    |               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    AND             reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    ?               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    OR              reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    )               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    ,               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    }               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    ;               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    $end            reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    :               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)
    ]               reduce using rule 120 (unary_expression_not_plus_minus -> ~ unary_expression .)


state 388

    (46) and_expression -> and_expression & . equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 669
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 389

    (121) unary_expression_not_plus_minus -> ! unary_expression .

    *               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    /               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    %               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    +               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    -               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    <               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    >               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    GTEQ            reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    LTEQ            reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    LSHIFT          reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    RSHIFT          reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    RRSHIFT         reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    INSTANCEOF      reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    EQ              reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    NEQ             reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    &               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    ^               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    |               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    AND             reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    ?               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    OR              reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    )               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    ,               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    }               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    ;               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    $end            reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    :               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)
    ]               reduce using rule 121 (unary_expression_not_plus_minus -> ! unary_expression .)


state 390

    (110) unary_expression -> - unary_expression .

    ;               reduce using rule 110 (unary_expression -> - unary_expression .)
    *               reduce using rule 110 (unary_expression -> - unary_expression .)
    /               reduce using rule 110 (unary_expression -> - unary_expression .)
    %               reduce using rule 110 (unary_expression -> - unary_expression .)
    +               reduce using rule 110 (unary_expression -> - unary_expression .)
    -               reduce using rule 110 (unary_expression -> - unary_expression .)
    LSHIFT          reduce using rule 110 (unary_expression -> - unary_expression .)
    RSHIFT          reduce using rule 110 (unary_expression -> - unary_expression .)
    RRSHIFT         reduce using rule 110 (unary_expression -> - unary_expression .)
    >               reduce using rule 110 (unary_expression -> - unary_expression .)
    <               reduce using rule 110 (unary_expression -> - unary_expression .)
    GTEQ            reduce using rule 110 (unary_expression -> - unary_expression .)
    LTEQ            reduce using rule 110 (unary_expression -> - unary_expression .)
    INSTANCEOF      reduce using rule 110 (unary_expression -> - unary_expression .)
    EQ              reduce using rule 110 (unary_expression -> - unary_expression .)
    NEQ             reduce using rule 110 (unary_expression -> - unary_expression .)
    &               reduce using rule 110 (unary_expression -> - unary_expression .)
    ^               reduce using rule 110 (unary_expression -> - unary_expression .)
    |               reduce using rule 110 (unary_expression -> - unary_expression .)
    AND             reduce using rule 110 (unary_expression -> - unary_expression .)
    ?               reduce using rule 110 (unary_expression -> - unary_expression .)
    OR              reduce using rule 110 (unary_expression -> - unary_expression .)
    $end            reduce using rule 110 (unary_expression -> - unary_expression .)
    )               reduce using rule 110 (unary_expression -> - unary_expression .)
    :               reduce using rule 110 (unary_expression -> - unary_expression .)
    ]               reduce using rule 110 (unary_expression -> - unary_expression .)
    ,               reduce using rule 110 (unary_expression -> - unary_expression .)
    }               reduce using rule 110 (unary_expression -> - unary_expression .)


state 391

    (329) field_access -> SUPER . . NAME
    (224) method_invocation -> SUPER . . type_arguments NAME ( argument_list_opt )
    (227) method_invocation -> SUPER . . NAME ( argument_list_opt )
    (391) type_arguments -> . < type_argument_list1

    NAME            shift and go to state 670
    <               shift and go to state 67

    type_arguments                 shift and go to state 636

state 392

    (453) class_header -> class_header_name class_header_extends_opt class_header_implements_opt .

    {               reduce using rule 453 (class_header -> class_header_name class_header_extends_opt class_header_implements_opt .)


state 393

    (459) class_header_extends -> EXTENDS class_type .

    IMPLEMENTS      reduce using rule 459 (class_header_extends -> EXTENDS class_type .)
    {               reduce using rule 459 (class_header_extends -> EXTENDS class_type .)


state 394

    (382) class_type -> class_or_interface_type .

    (               reduce using rule 382 (class_type -> class_or_interface_type .)
    ,               reduce using rule 382 (class_type -> class_or_interface_type .)
    {               reduce using rule 382 (class_type -> class_or_interface_type .)
    ;               reduce using rule 382 (class_type -> class_or_interface_type .)
    IMPLEMENTS      reduce using rule 382 (class_type -> class_or_interface_type .)


state 395

    (542) enum_constant_header_name -> modifiers_opt . NAME

    NAME            shift and go to state 671


state 396

    (550) enum_body_declarations_opt -> enum_declarations .

    }               reduce using rule 550 (enum_body_declarations_opt -> enum_declarations .)


state 397

    (533) enum_body -> { enum_body_declarations_opt . }

    }               shift and go to state 672


state 398

    (535) enum_body -> { enum_constants . , enum_body_declarations_opt }
    (536) enum_body -> { enum_constants . enum_body_declarations_opt }
    (538) enum_constants -> enum_constants . , enum_constant
    (550) enum_body_declarations_opt -> . enum_declarations
    (551) enum_body_declarations_opt -> . empty
    (552) enum_declarations -> . ; class_body_declarations_opt
    (623) empty -> .

    ,               shift and go to state 673
    ;               shift and go to state 400
    }               reduce using rule 623 (empty -> .)

    enum_declarations              shift and go to state 396
    enum_body_declarations_opt     shift and go to state 674
    empty                          shift and go to state 675

state 399

    (534) enum_body -> { , . enum_body_declarations_opt }
    (550) enum_body_declarations_opt -> . enum_declarations
    (551) enum_body_declarations_opt -> . empty
    (552) enum_declarations -> . ; class_body_declarations_opt
    (623) empty -> .

    ;               shift and go to state 400
    }               reduce using rule 623 (empty -> .)

    enum_body_declarations_opt     shift and go to state 676
    enum_declarations              shift and go to state 396
    empty                          shift and go to state 675

state 400

    (552) enum_declarations -> ; . class_body_declarations_opt
    (467) class_body_declarations_opt -> . class_body_declarations
    (468) class_body_declarations_opt -> . empty
    (469) class_body_declarations -> . class_body_declaration
    (470) class_body_declarations -> . class_body_declarations class_body_declaration
    (623) empty -> .
    (471) class_body_declaration -> . class_member_declaration
    (472) class_body_declaration -> . static_initializer
    (473) class_body_declaration -> . constructor_declaration
    (474) class_body_declaration -> . block
    (475) class_member_declaration -> . field_declaration
    (476) class_member_declaration -> . class_declaration
    (477) class_member_declaration -> . method_declaration
    (478) class_member_declaration -> . interface_declaration
    (479) class_member_declaration -> . enum_declaration
    (480) class_member_declaration -> . annotation_type_declaration
    (481) class_member_declaration -> . ;
    (483) static_initializer -> . STATIC block
    (484) constructor_declaration -> . constructor_header method_body
    (164) block -> . { block_statements_opt }
    (482) field_declaration -> . modifiers_opt type variable_declarators ;
    (452) class_declaration -> . class_header class_body
    (501) method_declaration -> . abstract_method_declaration
    (502) method_declaration -> . method_header method_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (485) constructor_header -> . constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (503) abstract_method_declaration -> . method_header ;
    (504) method_header -> . method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (486) constructor_header_name -> . modifiers_opt type_parameters NAME (
    (487) constructor_header_name -> . modifiers_opt NAME (
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (505) method_header_name -> . modifiers_opt type_parameters type NAME (
    (506) method_header_name -> . modifiers_opt type NAME (
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    }               reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    ;               shift and go to state 447
    STATIC          shift and go to state 442
    {               shift and go to state 106
    @               shift and go to state 30
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    class_body_declarations        shift and go to state 440
    interface_declaration          shift and go to state 441
    enum_header                    shift and go to state 7
    constructor_header_name        shift and go to state 417
    class_header_name1             shift and go to state 8
    marker_annotation              shift and go to state 22
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 443
    constructor_declaration        shift and go to state 444
    class_header_name              shift and go to state 5
    method_declaration             shift and go to state 445
    annotation                     shift and go to state 10
    class_body_declaration         shift and go to state 446
    empty                          shift and go to state 448
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    interface_header_name          shift and go to state 14
    method_header_name             shift and go to state 449
    abstract_method_declaration    shift and go to state 450
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    static_initializer             shift and go to state 451
    modifiers                      shift and go to state 426
    class_member_declaration       shift and go to state 452
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 453
    interface_header               shift and go to state 45
    method_header                  shift and go to state 454
    constructor_header             shift and go to state 428
    class_declaration              shift and go to state 455
    field_declaration              shift and go to state 456
    class_body_declarations_opt    shift and go to state 677
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 458
    block                          shift and go to state 459

state 401

    (551) enum_body_declarations_opt -> empty .
    (352) modifiers_opt -> empty .

    }               reduce using rule 551 (enum_body_declarations_opt -> empty .)
    NAME            reduce using rule 352 (modifiers_opt -> empty .)


state 402

    (588) annotation_name -> @ . name
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    name                           shift and go to state 216
    qualified_name                 shift and go to state 141
    simple_name                    shift and go to state 64

state 403

    (541) enum_constant_header -> enum_constant_header_name . arguments_opt
    (543) arguments_opt -> . arguments
    (544) arguments_opt -> . empty
    (545) arguments -> . ( argument_list_opt )
    (623) empty -> .

    (               shift and go to state 678
    {               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    }               reduce using rule 623 (empty -> .)

    arguments                      shift and go to state 679
    empty                          shift and go to state 681
    arguments_opt                  shift and go to state 680

state 404

    (537) enum_constants -> enum_constant .

    ,               reduce using rule 537 (enum_constants -> enum_constant .)
    ;               reduce using rule 537 (enum_constants -> enum_constant .)
    }               reduce using rule 537 (enum_constants -> enum_constant .)


state 405

    (539) enum_constant -> enum_constant_header . class_body
    (540) enum_constant -> enum_constant_header .
    (466) class_body -> . { class_body_declarations_opt }

    ,               reduce using rule 540 (enum_constant -> enum_constant_header .)
    ;               reduce using rule 540 (enum_constant -> enum_constant_header .)
    }               reduce using rule 540 (enum_constant -> enum_constant_header .)
    {               shift and go to state 220

    class_body                     shift and go to state 682

state 406

    (351) modifiers_opt -> modifiers .
    (354) modifiers -> modifiers . modifier
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    BOOLEAN         reduce using rule 351 (modifiers_opt -> modifiers .)
    VOID            reduce using rule 351 (modifiers_opt -> modifiers .)
    BYTE            reduce using rule 351 (modifiers_opt -> modifiers .)
    SHORT           reduce using rule 351 (modifiers_opt -> modifiers .)
    INT             reduce using rule 351 (modifiers_opt -> modifiers .)
    LONG            reduce using rule 351 (modifiers_opt -> modifiers .)
    CHAR            reduce using rule 351 (modifiers_opt -> modifiers .)
    FLOAT           reduce using rule 351 (modifiers_opt -> modifiers .)
    DOUBLE          reduce using rule 351 (modifiers_opt -> modifiers .)
    NAME            reduce using rule 351 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 402

    annotation_name                shift and go to state 38
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 225
    annotation                     shift and go to state 10

state 407

    (440) type_parameter_list1 -> type_parameter_list . , type_parameter1
    (432) type_parameter_list -> type_parameter_list . , type_parameter

    ,               shift and go to state 683


state 408

    (429) type_parameter_header -> NAME .

    >               reduce using rule 429 (type_parameter_header -> NAME .)
    EXTENDS         reduce using rule 429 (type_parameter_header -> NAME .)
    ,               reduce using rule 429 (type_parameter_header -> NAME .)


state 409

    (441) type_parameter1 -> type_parameter_header . >
    (442) type_parameter1 -> type_parameter_header . EXTENDS reference_type1
    (443) type_parameter1 -> type_parameter_header . EXTENDS reference_type additional_bound_list1
    (433) type_parameter -> type_parameter_header .
    (434) type_parameter -> type_parameter_header . EXTENDS reference_type
    (435) type_parameter -> type_parameter_header . EXTENDS reference_type additional_bound_list

    >               shift and go to state 685
    EXTENDS         shift and go to state 684
    ,               reduce using rule 433 (type_parameter -> type_parameter_header .)


state 410

    (439) type_parameter_list1 -> type_parameter1 .

    EXTENDS         reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    IMPLEMENTS      reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    {               reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    NAME            reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    BOOLEAN         reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    VOID            reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    BYTE            reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    SHORT           reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    INT             reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    LONG            reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    CHAR            reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    FLOAT           reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)
    DOUBLE          reduce using rule 439 (type_parameter_list1 -> type_parameter1 .)


state 411

    (430) type_parameters -> < type_parameter_list1 .

    IMPLEMENTS      reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    {               reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    NAME            reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    BOOLEAN         reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    VOID            reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    BYTE            reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    SHORT           reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    INT             reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    LONG            reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    CHAR            reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    FLOAT           reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    DOUBLE          reduce using rule 430 (type_parameters -> < type_parameter_list1 .)
    EXTENDS         reduce using rule 430 (type_parameters -> < type_parameter_list1 .)


state 412

    (431) type_parameter_list -> type_parameter .

    ,               reduce using rule 431 (type_parameter_list -> type_parameter .)


state 413

    (463) interface_type_list -> interface_type .

    ,               reduce using rule 463 (interface_type_list -> interface_type .)
    {               reduce using rule 463 (interface_type_list -> interface_type .)


state 414

    (515) interface_header_extends -> EXTENDS interface_type_list .
    (464) interface_type_list -> interface_type_list . , interface_type

    {               reduce using rule 515 (interface_header_extends -> EXTENDS interface_type_list .)
    ,               shift and go to state 686


state 415

    (465) interface_type -> class_or_interface_type .

    ,               reduce using rule 465 (interface_type -> class_or_interface_type .)
    {               reduce using rule 465 (interface_type -> class_or_interface_type .)


state 416

    (559) annotation_type_body -> { annotation_type_member_declarations_opt . }

    }               shift and go to state 687


state 417

    (485) constructor_header -> constructor_header_name . formal_parameter_list_opt ) method_header_throws_clause_opt
    (488) formal_parameter_list_opt -> . formal_parameter_list
    (489) formal_parameter_list_opt -> . empty
    (490) formal_parameter_list -> . formal_parameter
    (491) formal_parameter_list -> . formal_parameter_list , formal_parameter
    (623) empty -> .
    (492) formal_parameter -> . modifiers_opt type variable_declarator_id
    (493) formal_parameter -> . modifiers_opt type ELLIPSIS variable_declarator_id
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    )               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 402

    annotation_name                shift and go to state 38
    formal_parameter               shift and go to state 692
    modifiers                      shift and go to state 406
    modifiers_opt                  shift and go to state 688
    formal_parameter_list          shift and go to state 691
    formal_parameter_list_opt      shift and go to state 689
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 51
    annotation                     shift and go to state 10
    empty                          shift and go to state 690

state 418

    (567) annotation_type_member_declaration -> type_declaration .

    ;               reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    @               reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    PUBLIC          reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    PROTECTED       reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    PRIVATE         reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    STATIC          reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    ABSTRACT        reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    FINAL           reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    NATIVE          reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    SYNCHRONIZED    reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    TRANSIENT       reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    VOLATILE        reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    STRICTFP        reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    NAME            reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    ENUM            reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    CLASS           reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    INTERFACE       reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    <               reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    BOOLEAN         reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    VOID            reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    BYTE            reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    SHORT           reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    INT             reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    LONG            reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    CHAR            reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    FLOAT           reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    DOUBLE          reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)
    }               reduce using rule 567 (annotation_type_member_declaration -> type_declaration .)


state 419

    (569) annotation_method_header_name -> modifiers_opt . type_parameters type NAME (
    (570) annotation_method_header_name -> modifiers_opt . type NAME (
    (482) field_declaration -> modifiers_opt . type variable_declarators ;
    (486) constructor_header_name -> modifiers_opt . type_parameters NAME (
    (487) constructor_header_name -> modifiers_opt . NAME (
    (531) enum_header_name -> modifiers_opt . ENUM NAME
    (532) enum_header_name -> modifiers_opt . ENUM NAME type_parameters
    (456) class_header_name1 -> modifiers_opt . CLASS NAME
    (512) interface_header_name1 -> modifiers_opt . INTERFACE NAME
    (430) type_parameters -> . < type_parameter_list1
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 694
    ENUM            shift and go to state 208
    CLASS           shift and go to state 210
    INTERFACE       shift and go to state 209
    <               shift and go to state 197
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    qualified_name                 shift and go to state 141
    class_or_interface             shift and go to state 144
    type_parameters                shift and go to state 693
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    class_or_interface_type        shift and go to state 88
    reference_type                 shift and go to state 91
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    type                           shift and go to state 695
    name                           shift and go to state 342

state 420

    (564) annotation_type_member_declaration -> annotation_method_header . ;

    ;               shift and go to state 696


state 421

    (568) annotation_method_header -> annotation_method_header_name . formal_parameter_list_opt ) method_header_extended_dims annotation_method_header_default_value_opt
    (488) formal_parameter_list_opt -> . formal_parameter_list
    (489) formal_parameter_list_opt -> . empty
    (490) formal_parameter_list -> . formal_parameter
    (491) formal_parameter_list -> . formal_parameter_list , formal_parameter
    (623) empty -> .
    (492) formal_parameter -> . modifiers_opt type variable_declarator_id
    (493) formal_parameter -> . modifiers_opt type ELLIPSIS variable_declarator_id
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    )               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 402

    annotation_name                shift and go to state 38
    formal_parameter_list          shift and go to state 691
    modifier                       shift and go to state 51
    modifiers                      shift and go to state 406
    modifiers_opt                  shift and go to state 688
    formal_parameter               shift and go to state 692
    formal_parameter_list_opt      shift and go to state 697
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    annotation                     shift and go to state 10
    empty                          shift and go to state 690

state 422

    (566) annotation_type_member_declaration -> constructor_declaration .

    ;               reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    @               reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    PUBLIC          reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    PROTECTED       reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    PRIVATE         reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    STATIC          reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    ABSTRACT        reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    FINAL           reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    NATIVE          reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    SYNCHRONIZED    reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    TRANSIENT       reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    VOLATILE        reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    STRICTFP        reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    NAME            reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    ENUM            reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    CLASS           reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    INTERFACE       reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    <               reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    BOOLEAN         reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    VOID            reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    BYTE            reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    SHORT           reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    INT             reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    LONG            reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    CHAR            reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    FLOAT           reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    DOUBLE          reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)
    }               reduce using rule 566 (annotation_type_member_declaration -> constructor_declaration .)


state 423

    (565) annotation_type_member_declaration -> constant_declaration .

    ;               reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    @               reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    PUBLIC          reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    PROTECTED       reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    PRIVATE         reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    STATIC          reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    ABSTRACT        reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    FINAL           reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    NATIVE          reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    SYNCHRONIZED    reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    TRANSIENT       reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    VOLATILE        reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    STRICTFP        reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    NAME            reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    ENUM            reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    CLASS           reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    INTERFACE       reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    <               reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    BOOLEAN         reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    VOID            reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    BYTE            reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    SHORT           reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    INT             reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    LONG            reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    CHAR            reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    FLOAT           reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    DOUBLE          reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)
    }               reduce using rule 565 (annotation_type_member_declaration -> constant_declaration .)


state 424

    (561) annotation_type_member_declarations_opt -> empty .
    (352) modifiers_opt -> empty .

    }               reduce using rule 561 (annotation_type_member_declarations_opt -> empty .)
    NAME            reduce using rule 352 (modifiers_opt -> empty .)
    ENUM            reduce using rule 352 (modifiers_opt -> empty .)
    CLASS           reduce using rule 352 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 352 (modifiers_opt -> empty .)
    <               reduce using rule 352 (modifiers_opt -> empty .)
    BOOLEAN         reduce using rule 352 (modifiers_opt -> empty .)
    VOID            reduce using rule 352 (modifiers_opt -> empty .)
    BYTE            reduce using rule 352 (modifiers_opt -> empty .)
    SHORT           reduce using rule 352 (modifiers_opt -> empty .)
    INT             reduce using rule 352 (modifiers_opt -> empty .)
    LONG            reduce using rule 352 (modifiers_opt -> empty .)
    CHAR            reduce using rule 352 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 352 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 352 (modifiers_opt -> empty .)


state 425

    (560) annotation_type_member_declarations_opt -> annotation_type_member_declarations .
    (563) annotation_type_member_declarations -> annotation_type_member_declarations . annotation_type_member_declaration
    (564) annotation_type_member_declaration -> . annotation_method_header ;
    (565) annotation_type_member_declaration -> . constant_declaration
    (566) annotation_type_member_declaration -> . constructor_declaration
    (567) annotation_type_member_declaration -> . type_declaration
    (568) annotation_method_header -> . annotation_method_header_name formal_parameter_list_opt ) method_header_extended_dims annotation_method_header_default_value_opt
    (528) constant_declaration -> . field_declaration
    (484) constructor_declaration -> . constructor_header method_body
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (569) annotation_method_header_name -> . modifiers_opt type_parameters type NAME (
    (570) annotation_method_header_name -> . modifiers_opt type NAME (
    (482) field_declaration -> . modifiers_opt type variable_declarators ;
    (485) constructor_header -> . constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (486) constructor_header_name -> . modifiers_opt type_parameters NAME (
    (487) constructor_header_name -> . modifiers_opt NAME (
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    }               reduce using rule 560 (annotation_type_member_declarations_opt -> annotation_type_member_declarations .)
    ;               shift and go to state 28
    NAME            reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    @               shift and go to state 30
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    constructor_header_name        shift and go to state 417
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 418
    marker_annotation              shift and go to state 22
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 419
    annotation_method_header       shift and go to state 420
    annotation_method_header_name  shift and go to state 421
    constructor_declaration        shift and go to state 422
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    constant_declaration           shift and go to state 423
    empty                          shift and go to state 121
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    interface_header_name          shift and go to state 14
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 426
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    annotation_type_member_declaration shift and go to state 698
    constructor_header             shift and go to state 428
    class_declaration              shift and go to state 46
    field_declaration              shift and go to state 429
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 426

    (351) modifiers_opt -> modifiers .
    (354) modifiers -> modifiers . modifier
    (555) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME type_parameters
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    NAME            reduce using rule 351 (modifiers_opt -> modifiers .)
    ENUM            reduce using rule 351 (modifiers_opt -> modifiers .)
    CLASS           reduce using rule 351 (modifiers_opt -> modifiers .)
    INTERFACE       reduce using rule 351 (modifiers_opt -> modifiers .)
    <               reduce using rule 351 (modifiers_opt -> modifiers .)
    BOOLEAN         reduce using rule 351 (modifiers_opt -> modifiers .)
    VOID            reduce using rule 351 (modifiers_opt -> modifiers .)
    BYTE            reduce using rule 351 (modifiers_opt -> modifiers .)
    SHORT           reduce using rule 351 (modifiers_opt -> modifiers .)
    INT             reduce using rule 351 (modifiers_opt -> modifiers .)
    LONG            reduce using rule 351 (modifiers_opt -> modifiers .)
    CHAR            reduce using rule 351 (modifiers_opt -> modifiers .)
    FLOAT           reduce using rule 351 (modifiers_opt -> modifiers .)
    DOUBLE          reduce using rule 351 (modifiers_opt -> modifiers .)
    @               shift and go to state 223
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    annotation_name                shift and go to state 38
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 225
    annotation                     shift and go to state 10

state 427

    (562) annotation_type_member_declarations -> annotation_type_member_declaration .

    ;               reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    @               reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    PUBLIC          reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    PROTECTED       reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    PRIVATE         reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    STATIC          reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    ABSTRACT        reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    FINAL           reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    NATIVE          reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    SYNCHRONIZED    reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    TRANSIENT       reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    VOLATILE        reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    STRICTFP        reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    NAME            reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    ENUM            reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    CLASS           reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    INTERFACE       reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    <               reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    BOOLEAN         reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    VOID            reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    BYTE            reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    SHORT           reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    INT             reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    LONG            reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    CHAR            reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    FLOAT           reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    DOUBLE          reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)
    }               reduce using rule 562 (annotation_type_member_declarations -> annotation_type_member_declaration .)


state 428

    (484) constructor_declaration -> constructor_header . method_body
    (500) method_body -> . { block_statements_opt }

    {               shift and go to state 700

    method_body                    shift and go to state 699

state 429

    (528) constant_declaration -> field_declaration .

    ;               reduce using rule 528 (constant_declaration -> field_declaration .)
    @               reduce using rule 528 (constant_declaration -> field_declaration .)
    PUBLIC          reduce using rule 528 (constant_declaration -> field_declaration .)
    PROTECTED       reduce using rule 528 (constant_declaration -> field_declaration .)
    PRIVATE         reduce using rule 528 (constant_declaration -> field_declaration .)
    STATIC          reduce using rule 528 (constant_declaration -> field_declaration .)
    ABSTRACT        reduce using rule 528 (constant_declaration -> field_declaration .)
    FINAL           reduce using rule 528 (constant_declaration -> field_declaration .)
    NATIVE          reduce using rule 528 (constant_declaration -> field_declaration .)
    SYNCHRONIZED    reduce using rule 528 (constant_declaration -> field_declaration .)
    TRANSIENT       reduce using rule 528 (constant_declaration -> field_declaration .)
    VOLATILE        reduce using rule 528 (constant_declaration -> field_declaration .)
    STRICTFP        reduce using rule 528 (constant_declaration -> field_declaration .)
    ENUM            reduce using rule 528 (constant_declaration -> field_declaration .)
    CLASS           reduce using rule 528 (constant_declaration -> field_declaration .)
    INTERFACE       reduce using rule 528 (constant_declaration -> field_declaration .)
    <               reduce using rule 528 (constant_declaration -> field_declaration .)
    BOOLEAN         reduce using rule 528 (constant_declaration -> field_declaration .)
    VOID            reduce using rule 528 (constant_declaration -> field_declaration .)
    BYTE            reduce using rule 528 (constant_declaration -> field_declaration .)
    SHORT           reduce using rule 528 (constant_declaration -> field_declaration .)
    INT             reduce using rule 528 (constant_declaration -> field_declaration .)
    LONG            reduce using rule 528 (constant_declaration -> field_declaration .)
    CHAR            reduce using rule 528 (constant_declaration -> field_declaration .)
    FLOAT           reduce using rule 528 (constant_declaration -> field_declaration .)
    DOUBLE          reduce using rule 528 (constant_declaration -> field_declaration .)
    NAME            reduce using rule 528 (constant_declaration -> field_declaration .)
    }               reduce using rule 528 (constant_declaration -> field_declaration .)


state 430

    (599) compilation_unit -> package_declaration import_declarations type_declarations .
    (619) type_declarations -> type_declarations . type_declaration
    (447) type_declaration -> . class_declaration
    (448) type_declaration -> . interface_declaration
    (449) type_declaration -> . enum_declaration
    (450) type_declaration -> . annotation_type_declaration
    (451) type_declaration -> . ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    $end            reduce using rule 599 (compilation_unit -> package_declaration import_declarations type_declarations .)
    ;               shift and go to state 28
    @               shift and go to state 30
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 6
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    type_declaration               shift and go to state 204
    marker_annotation              shift and go to state 22
    interface_header_name          shift and go to state 14
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 26
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 205
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 44
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 46
    empty                          shift and go to state 121
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 52

state 431

    (531) enum_header_name -> modifiers_opt ENUM NAME .
    (532) enum_header_name -> modifiers_opt ENUM NAME . type_parameters
    (430) type_parameters -> . < type_parameter_list1

    IMPLEMENTS      reduce using rule 531 (enum_header_name -> modifiers_opt ENUM NAME .)
    {               reduce using rule 531 (enum_header_name -> modifiers_opt ENUM NAME .)
    <               shift and go to state 197

    type_parameters                shift and go to state 701

state 432

    (512) interface_header_name1 -> modifiers_opt INTERFACE NAME .

    <               reduce using rule 512 (interface_header_name1 -> modifiers_opt INTERFACE NAME .)
    EXTENDS         reduce using rule 512 (interface_header_name1 -> modifiers_opt INTERFACE NAME .)
    {               reduce using rule 512 (interface_header_name1 -> modifiers_opt INTERFACE NAME .)


state 433

    (456) class_header_name1 -> modifiers_opt CLASS NAME .

    <               reduce using rule 456 (class_header_name1 -> modifiers_opt CLASS NAME .)
    EXTENDS         reduce using rule 456 (class_header_name1 -> modifiers_opt CLASS NAME .)
    IMPLEMENTS      reduce using rule 456 (class_header_name1 -> modifiers_opt CLASS NAME .)
    {               reduce using rule 456 (class_header_name1 -> modifiers_opt CLASS NAME .)


state 434

    (615) type_import_on_demand_declaration -> IMPORT name . . * ;
    (344) qualified_name -> name . . simple_name
    (343) simple_name -> . NAME

    *               shift and go to state 702
    NAME            shift and go to state 212

    simple_name                    shift and go to state 560

state 435

    (614) single_type_import_declaration -> IMPORT name ; .

    ;               reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    IMPORT          reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    @               reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    PUBLIC          reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    PROTECTED       reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    PRIVATE         reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    STATIC          reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    ABSTRACT        reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    FINAL           reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    NATIVE          reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    SYNCHRONIZED    reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    TRANSIENT       reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    VOLATILE        reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    STRICTFP        reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    ENUM            reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    CLASS           reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    INTERFACE       reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)
    $end            reduce using rule 614 (single_type_import_declaration -> IMPORT name ; .)


state 436

    (616) single_static_import_declaration -> IMPORT STATIC name . ;
    (617) static_import_on_demand_declaration -> IMPORT STATIC name . . * ;
    (344) qualified_name -> name . . simple_name

    ;               shift and go to state 704
    .               shift and go to state 703


state 437

    (344) qualified_name -> name . . simple_name
    (343) simple_name -> . NAME

    NAME            shift and go to state 212

    simple_name                    shift and go to state 560

state 438

    (557) annotation_type_declaration_header_name -> @ INTERFACE NAME . type_parameters
    (558) annotation_type_declaration_header_name -> @ INTERFACE NAME .
    (430) type_parameters -> . < type_parameter_list1

    EXTENDS         reduce using rule 558 (annotation_type_declaration_header_name -> @ INTERFACE NAME .)
    IMPLEMENTS      reduce using rule 558 (annotation_type_declaration_header_name -> @ INTERFACE NAME .)
    {               reduce using rule 558 (annotation_type_declaration_header_name -> @ INTERFACE NAME .)
    <               shift and go to state 197

    type_parameters                shift and go to state 705

state 439

    (554) annotation_type_declaration_header -> annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt .

    {               reduce using rule 554 (annotation_type_declaration_header -> annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt .)


state 440

    (467) class_body_declarations_opt -> class_body_declarations .
    (470) class_body_declarations -> class_body_declarations . class_body_declaration
    (471) class_body_declaration -> . class_member_declaration
    (472) class_body_declaration -> . static_initializer
    (473) class_body_declaration -> . constructor_declaration
    (474) class_body_declaration -> . block
    (475) class_member_declaration -> . field_declaration
    (476) class_member_declaration -> . class_declaration
    (477) class_member_declaration -> . method_declaration
    (478) class_member_declaration -> . interface_declaration
    (479) class_member_declaration -> . enum_declaration
    (480) class_member_declaration -> . annotation_type_declaration
    (481) class_member_declaration -> . ;
    (483) static_initializer -> . STATIC block
    (484) constructor_declaration -> . constructor_header method_body
    (164) block -> . { block_statements_opt }
    (482) field_declaration -> . modifiers_opt type variable_declarators ;
    (452) class_declaration -> . class_header class_body
    (501) method_declaration -> . abstract_method_declaration
    (502) method_declaration -> . method_header method_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (485) constructor_header -> . constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (503) abstract_method_declaration -> . method_header ;
    (504) method_header -> . method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (486) constructor_header_name -> . modifiers_opt type_parameters NAME (
    (487) constructor_header_name -> . modifiers_opt NAME (
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (505) method_header_name -> . modifiers_opt type_parameters type NAME (
    (506) method_header_name -> . modifiers_opt type NAME (
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    }               reduce using rule 467 (class_body_declarations_opt -> class_body_declarations .)
    ;               shift and go to state 447
    STATIC          shift and go to state 442
    {               shift and go to state 106
    NAME            reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    @               shift and go to state 30
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 441
    enum_header                    shift and go to state 7
    constructor_header_name        shift and go to state 417
    class_header_name1             shift and go to state 8
    marker_annotation              shift and go to state 22
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 443
    constructor_declaration        shift and go to state 444
    class_header_name              shift and go to state 5
    method_declaration             shift and go to state 445
    annotation                     shift and go to state 10
    class_body_declaration         shift and go to state 706
    empty                          shift and go to state 121
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    interface_header_name          shift and go to state 14
    method_header_name             shift and go to state 449
    abstract_method_declaration    shift and go to state 450
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    static_initializer             shift and go to state 451
    modifiers                      shift and go to state 426
    class_member_declaration       shift and go to state 452
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 453
    interface_header               shift and go to state 45
    method_header                  shift and go to state 454
    constructor_header             shift and go to state 428
    class_declaration              shift and go to state 455
    field_declaration              shift and go to state 456
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 458
    block                          shift and go to state 459

state 441

    (478) class_member_declaration -> interface_declaration .

    ;               reduce using rule 478 (class_member_declaration -> interface_declaration .)
    STATIC          reduce using rule 478 (class_member_declaration -> interface_declaration .)
    {               reduce using rule 478 (class_member_declaration -> interface_declaration .)
    @               reduce using rule 478 (class_member_declaration -> interface_declaration .)
    PUBLIC          reduce using rule 478 (class_member_declaration -> interface_declaration .)
    PROTECTED       reduce using rule 478 (class_member_declaration -> interface_declaration .)
    PRIVATE         reduce using rule 478 (class_member_declaration -> interface_declaration .)
    ABSTRACT        reduce using rule 478 (class_member_declaration -> interface_declaration .)
    FINAL           reduce using rule 478 (class_member_declaration -> interface_declaration .)
    NATIVE          reduce using rule 478 (class_member_declaration -> interface_declaration .)
    SYNCHRONIZED    reduce using rule 478 (class_member_declaration -> interface_declaration .)
    TRANSIENT       reduce using rule 478 (class_member_declaration -> interface_declaration .)
    VOLATILE        reduce using rule 478 (class_member_declaration -> interface_declaration .)
    STRICTFP        reduce using rule 478 (class_member_declaration -> interface_declaration .)
    NAME            reduce using rule 478 (class_member_declaration -> interface_declaration .)
    ENUM            reduce using rule 478 (class_member_declaration -> interface_declaration .)
    CLASS           reduce using rule 478 (class_member_declaration -> interface_declaration .)
    INTERFACE       reduce using rule 478 (class_member_declaration -> interface_declaration .)
    <               reduce using rule 478 (class_member_declaration -> interface_declaration .)
    BOOLEAN         reduce using rule 478 (class_member_declaration -> interface_declaration .)
    VOID            reduce using rule 478 (class_member_declaration -> interface_declaration .)
    BYTE            reduce using rule 478 (class_member_declaration -> interface_declaration .)
    SHORT           reduce using rule 478 (class_member_declaration -> interface_declaration .)
    INT             reduce using rule 478 (class_member_declaration -> interface_declaration .)
    LONG            reduce using rule 478 (class_member_declaration -> interface_declaration .)
    CHAR            reduce using rule 478 (class_member_declaration -> interface_declaration .)
    FLOAT           reduce using rule 478 (class_member_declaration -> interface_declaration .)
    DOUBLE          reduce using rule 478 (class_member_declaration -> interface_declaration .)
    }               reduce using rule 478 (class_member_declaration -> interface_declaration .)


state 442

    (483) static_initializer -> STATIC . block
    (358) modifier -> STATIC .
    (164) block -> . { block_statements_opt }

    @               reduce using rule 358 (modifier -> STATIC .)
    PUBLIC          reduce using rule 358 (modifier -> STATIC .)
    PROTECTED       reduce using rule 358 (modifier -> STATIC .)
    PRIVATE         reduce using rule 358 (modifier -> STATIC .)
    STATIC          reduce using rule 358 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 358 (modifier -> STATIC .)
    FINAL           reduce using rule 358 (modifier -> STATIC .)
    NATIVE          reduce using rule 358 (modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 358 (modifier -> STATIC .)
    TRANSIENT       reduce using rule 358 (modifier -> STATIC .)
    VOLATILE        reduce using rule 358 (modifier -> STATIC .)
    STRICTFP        reduce using rule 358 (modifier -> STATIC .)
    NAME            reduce using rule 358 (modifier -> STATIC .)
    ENUM            reduce using rule 358 (modifier -> STATIC .)
    CLASS           reduce using rule 358 (modifier -> STATIC .)
    INTERFACE       reduce using rule 358 (modifier -> STATIC .)
    <               reduce using rule 358 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 358 (modifier -> STATIC .)
    VOID            reduce using rule 358 (modifier -> STATIC .)
    BYTE            reduce using rule 358 (modifier -> STATIC .)
    SHORT           reduce using rule 358 (modifier -> STATIC .)
    INT             reduce using rule 358 (modifier -> STATIC .)
    LONG            reduce using rule 358 (modifier -> STATIC .)
    CHAR            reduce using rule 358 (modifier -> STATIC .)
    FLOAT           reduce using rule 358 (modifier -> STATIC .)
    DOUBLE          reduce using rule 358 (modifier -> STATIC .)
    {               shift and go to state 106

    block                          shift and go to state 707

state 443

    (482) field_declaration -> modifiers_opt . type variable_declarators ;
    (486) constructor_header_name -> modifiers_opt . type_parameters NAME (
    (487) constructor_header_name -> modifiers_opt . NAME (
    (505) method_header_name -> modifiers_opt . type_parameters type NAME (
    (506) method_header_name -> modifiers_opt . type NAME (
    (531) enum_header_name -> modifiers_opt . ENUM NAME
    (532) enum_header_name -> modifiers_opt . ENUM NAME type_parameters
    (456) class_header_name1 -> modifiers_opt . CLASS NAME
    (512) interface_header_name1 -> modifiers_opt . INTERFACE NAME
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (430) type_parameters -> . < type_parameter_list1
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 694
    ENUM            shift and go to state 208
    CLASS           shift and go to state 210
    INTERFACE       shift and go to state 209
    <               shift and go to state 197
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    qualified_name                 shift and go to state 141
    class_or_interface             shift and go to state 144
    reference_type                 shift and go to state 91
    type_parameters                shift and go to state 708
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    class_or_interface_type        shift and go to state 88
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    type                           shift and go to state 709
    name                           shift and go to state 342

state 444

    (473) class_body_declaration -> constructor_declaration .

    ;               reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    STATIC          reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    {               reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    @               reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    PUBLIC          reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    PROTECTED       reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    PRIVATE         reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    ABSTRACT        reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    FINAL           reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    NATIVE          reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    SYNCHRONIZED    reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    TRANSIENT       reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    VOLATILE        reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    STRICTFP        reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    NAME            reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    ENUM            reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    CLASS           reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    INTERFACE       reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    <               reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    BOOLEAN         reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    VOID            reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    BYTE            reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    SHORT           reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    INT             reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    LONG            reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    CHAR            reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    FLOAT           reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    DOUBLE          reduce using rule 473 (class_body_declaration -> constructor_declaration .)
    }               reduce using rule 473 (class_body_declaration -> constructor_declaration .)


state 445

    (477) class_member_declaration -> method_declaration .

    ;               reduce using rule 477 (class_member_declaration -> method_declaration .)
    STATIC          reduce using rule 477 (class_member_declaration -> method_declaration .)
    {               reduce using rule 477 (class_member_declaration -> method_declaration .)
    @               reduce using rule 477 (class_member_declaration -> method_declaration .)
    PUBLIC          reduce using rule 477 (class_member_declaration -> method_declaration .)
    PROTECTED       reduce using rule 477 (class_member_declaration -> method_declaration .)
    PRIVATE         reduce using rule 477 (class_member_declaration -> method_declaration .)
    ABSTRACT        reduce using rule 477 (class_member_declaration -> method_declaration .)
    FINAL           reduce using rule 477 (class_member_declaration -> method_declaration .)
    NATIVE          reduce using rule 477 (class_member_declaration -> method_declaration .)
    SYNCHRONIZED    reduce using rule 477 (class_member_declaration -> method_declaration .)
    TRANSIENT       reduce using rule 477 (class_member_declaration -> method_declaration .)
    VOLATILE        reduce using rule 477 (class_member_declaration -> method_declaration .)
    STRICTFP        reduce using rule 477 (class_member_declaration -> method_declaration .)
    NAME            reduce using rule 477 (class_member_declaration -> method_declaration .)
    ENUM            reduce using rule 477 (class_member_declaration -> method_declaration .)
    CLASS           reduce using rule 477 (class_member_declaration -> method_declaration .)
    INTERFACE       reduce using rule 477 (class_member_declaration -> method_declaration .)
    <               reduce using rule 477 (class_member_declaration -> method_declaration .)
    BOOLEAN         reduce using rule 477 (class_member_declaration -> method_declaration .)
    VOID            reduce using rule 477 (class_member_declaration -> method_declaration .)
    BYTE            reduce using rule 477 (class_member_declaration -> method_declaration .)
    SHORT           reduce using rule 477 (class_member_declaration -> method_declaration .)
    INT             reduce using rule 477 (class_member_declaration -> method_declaration .)
    LONG            reduce using rule 477 (class_member_declaration -> method_declaration .)
    CHAR            reduce using rule 477 (class_member_declaration -> method_declaration .)
    FLOAT           reduce using rule 477 (class_member_declaration -> method_declaration .)
    DOUBLE          reduce using rule 477 (class_member_declaration -> method_declaration .)
    }               reduce using rule 477 (class_member_declaration -> method_declaration .)


state 446

    (469) class_body_declarations -> class_body_declaration .

    ;               reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    STATIC          reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    {               reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    @               reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    PUBLIC          reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    PROTECTED       reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    PRIVATE         reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    ABSTRACT        reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    FINAL           reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    NATIVE          reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    SYNCHRONIZED    reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    TRANSIENT       reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    VOLATILE        reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    STRICTFP        reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    NAME            reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    ENUM            reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    CLASS           reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    INTERFACE       reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    <               reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    BOOLEAN         reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    VOID            reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    BYTE            reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    SHORT           reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    INT             reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    LONG            reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    CHAR            reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    FLOAT           reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    DOUBLE          reduce using rule 469 (class_body_declarations -> class_body_declaration .)
    }               reduce using rule 469 (class_body_declarations -> class_body_declaration .)


state 447

    (481) class_member_declaration -> ; .

    ;               reduce using rule 481 (class_member_declaration -> ; .)
    STATIC          reduce using rule 481 (class_member_declaration -> ; .)
    {               reduce using rule 481 (class_member_declaration -> ; .)
    @               reduce using rule 481 (class_member_declaration -> ; .)
    PUBLIC          reduce using rule 481 (class_member_declaration -> ; .)
    PROTECTED       reduce using rule 481 (class_member_declaration -> ; .)
    PRIVATE         reduce using rule 481 (class_member_declaration -> ; .)
    ABSTRACT        reduce using rule 481 (class_member_declaration -> ; .)
    FINAL           reduce using rule 481 (class_member_declaration -> ; .)
    NATIVE          reduce using rule 481 (class_member_declaration -> ; .)
    SYNCHRONIZED    reduce using rule 481 (class_member_declaration -> ; .)
    TRANSIENT       reduce using rule 481 (class_member_declaration -> ; .)
    VOLATILE        reduce using rule 481 (class_member_declaration -> ; .)
    STRICTFP        reduce using rule 481 (class_member_declaration -> ; .)
    NAME            reduce using rule 481 (class_member_declaration -> ; .)
    ENUM            reduce using rule 481 (class_member_declaration -> ; .)
    CLASS           reduce using rule 481 (class_member_declaration -> ; .)
    INTERFACE       reduce using rule 481 (class_member_declaration -> ; .)
    <               reduce using rule 481 (class_member_declaration -> ; .)
    BOOLEAN         reduce using rule 481 (class_member_declaration -> ; .)
    VOID            reduce using rule 481 (class_member_declaration -> ; .)
    BYTE            reduce using rule 481 (class_member_declaration -> ; .)
    SHORT           reduce using rule 481 (class_member_declaration -> ; .)
    INT             reduce using rule 481 (class_member_declaration -> ; .)
    LONG            reduce using rule 481 (class_member_declaration -> ; .)
    CHAR            reduce using rule 481 (class_member_declaration -> ; .)
    FLOAT           reduce using rule 481 (class_member_declaration -> ; .)
    DOUBLE          reduce using rule 481 (class_member_declaration -> ; .)
    }               reduce using rule 481 (class_member_declaration -> ; .)


state 448

    (468) class_body_declarations_opt -> empty .
    (352) modifiers_opt -> empty .

    }               reduce using rule 468 (class_body_declarations_opt -> empty .)
    NAME            reduce using rule 352 (modifiers_opt -> empty .)
    ENUM            reduce using rule 352 (modifiers_opt -> empty .)
    CLASS           reduce using rule 352 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 352 (modifiers_opt -> empty .)
    <               reduce using rule 352 (modifiers_opt -> empty .)
    BOOLEAN         reduce using rule 352 (modifiers_opt -> empty .)
    VOID            reduce using rule 352 (modifiers_opt -> empty .)
    BYTE            reduce using rule 352 (modifiers_opt -> empty .)
    SHORT           reduce using rule 352 (modifiers_opt -> empty .)
    INT             reduce using rule 352 (modifiers_opt -> empty .)
    LONG            reduce using rule 352 (modifiers_opt -> empty .)
    CHAR            reduce using rule 352 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 352 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 352 (modifiers_opt -> empty .)


state 449

    (504) method_header -> method_header_name . formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt
    (488) formal_parameter_list_opt -> . formal_parameter_list
    (489) formal_parameter_list_opt -> . empty
    (490) formal_parameter_list -> . formal_parameter
    (491) formal_parameter_list -> . formal_parameter_list , formal_parameter
    (623) empty -> .
    (492) formal_parameter -> . modifiers_opt type variable_declarator_id
    (493) formal_parameter -> . modifiers_opt type ELLIPSIS variable_declarator_id
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    )               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 402

    annotation_name                shift and go to state 38
    formal_parameter_list          shift and go to state 691
    modifiers                      shift and go to state 406
    modifiers_opt                  shift and go to state 688
    formal_parameter               shift and go to state 692
    formal_parameter_list_opt      shift and go to state 710
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 51
    annotation                     shift and go to state 10
    empty                          shift and go to state 690

state 450

    (501) method_declaration -> abstract_method_declaration .

    ;               reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    STATIC          reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    {               reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    @               reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    PUBLIC          reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    PROTECTED       reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    PRIVATE         reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    ABSTRACT        reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    FINAL           reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    NATIVE          reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    SYNCHRONIZED    reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    TRANSIENT       reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    VOLATILE        reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    STRICTFP        reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    NAME            reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    ENUM            reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    CLASS           reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    INTERFACE       reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    <               reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    BOOLEAN         reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    VOID            reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    BYTE            reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    SHORT           reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    INT             reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    LONG            reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    CHAR            reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    FLOAT           reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    DOUBLE          reduce using rule 501 (method_declaration -> abstract_method_declaration .)
    }               reduce using rule 501 (method_declaration -> abstract_method_declaration .)


state 451

    (472) class_body_declaration -> static_initializer .

    ;               reduce using rule 472 (class_body_declaration -> static_initializer .)
    STATIC          reduce using rule 472 (class_body_declaration -> static_initializer .)
    {               reduce using rule 472 (class_body_declaration -> static_initializer .)
    @               reduce using rule 472 (class_body_declaration -> static_initializer .)
    PUBLIC          reduce using rule 472 (class_body_declaration -> static_initializer .)
    PROTECTED       reduce using rule 472 (class_body_declaration -> static_initializer .)
    PRIVATE         reduce using rule 472 (class_body_declaration -> static_initializer .)
    ABSTRACT        reduce using rule 472 (class_body_declaration -> static_initializer .)
    FINAL           reduce using rule 472 (class_body_declaration -> static_initializer .)
    NATIVE          reduce using rule 472 (class_body_declaration -> static_initializer .)
    SYNCHRONIZED    reduce using rule 472 (class_body_declaration -> static_initializer .)
    TRANSIENT       reduce using rule 472 (class_body_declaration -> static_initializer .)
    VOLATILE        reduce using rule 472 (class_body_declaration -> static_initializer .)
    STRICTFP        reduce using rule 472 (class_body_declaration -> static_initializer .)
    NAME            reduce using rule 472 (class_body_declaration -> static_initializer .)
    ENUM            reduce using rule 472 (class_body_declaration -> static_initializer .)
    CLASS           reduce using rule 472 (class_body_declaration -> static_initializer .)
    INTERFACE       reduce using rule 472 (class_body_declaration -> static_initializer .)
    <               reduce using rule 472 (class_body_declaration -> static_initializer .)
    BOOLEAN         reduce using rule 472 (class_body_declaration -> static_initializer .)
    VOID            reduce using rule 472 (class_body_declaration -> static_initializer .)
    BYTE            reduce using rule 472 (class_body_declaration -> static_initializer .)
    SHORT           reduce using rule 472 (class_body_declaration -> static_initializer .)
    INT             reduce using rule 472 (class_body_declaration -> static_initializer .)
    LONG            reduce using rule 472 (class_body_declaration -> static_initializer .)
    CHAR            reduce using rule 472 (class_body_declaration -> static_initializer .)
    FLOAT           reduce using rule 472 (class_body_declaration -> static_initializer .)
    DOUBLE          reduce using rule 472 (class_body_declaration -> static_initializer .)
    }               reduce using rule 472 (class_body_declaration -> static_initializer .)


state 452

    (471) class_body_declaration -> class_member_declaration .

    ;               reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    STATIC          reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    {               reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    @               reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    PUBLIC          reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    PROTECTED       reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    PRIVATE         reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    ABSTRACT        reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    FINAL           reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    NATIVE          reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    SYNCHRONIZED    reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    TRANSIENT       reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    VOLATILE        reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    STRICTFP        reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    NAME            reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    ENUM            reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    CLASS           reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    INTERFACE       reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    <               reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    BOOLEAN         reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    VOID            reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    BYTE            reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    SHORT           reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    INT             reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    LONG            reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    CHAR            reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    FLOAT           reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    DOUBLE          reduce using rule 471 (class_body_declaration -> class_member_declaration .)
    }               reduce using rule 471 (class_body_declaration -> class_member_declaration .)


state 453

    (479) class_member_declaration -> enum_declaration .

    ;               reduce using rule 479 (class_member_declaration -> enum_declaration .)
    STATIC          reduce using rule 479 (class_member_declaration -> enum_declaration .)
    {               reduce using rule 479 (class_member_declaration -> enum_declaration .)
    @               reduce using rule 479 (class_member_declaration -> enum_declaration .)
    PUBLIC          reduce using rule 479 (class_member_declaration -> enum_declaration .)
    PROTECTED       reduce using rule 479 (class_member_declaration -> enum_declaration .)
    PRIVATE         reduce using rule 479 (class_member_declaration -> enum_declaration .)
    ABSTRACT        reduce using rule 479 (class_member_declaration -> enum_declaration .)
    FINAL           reduce using rule 479 (class_member_declaration -> enum_declaration .)
    NATIVE          reduce using rule 479 (class_member_declaration -> enum_declaration .)
    SYNCHRONIZED    reduce using rule 479 (class_member_declaration -> enum_declaration .)
    TRANSIENT       reduce using rule 479 (class_member_declaration -> enum_declaration .)
    VOLATILE        reduce using rule 479 (class_member_declaration -> enum_declaration .)
    STRICTFP        reduce using rule 479 (class_member_declaration -> enum_declaration .)
    NAME            reduce using rule 479 (class_member_declaration -> enum_declaration .)
    ENUM            reduce using rule 479 (class_member_declaration -> enum_declaration .)
    CLASS           reduce using rule 479 (class_member_declaration -> enum_declaration .)
    INTERFACE       reduce using rule 479 (class_member_declaration -> enum_declaration .)
    <               reduce using rule 479 (class_member_declaration -> enum_declaration .)
    BOOLEAN         reduce using rule 479 (class_member_declaration -> enum_declaration .)
    VOID            reduce using rule 479 (class_member_declaration -> enum_declaration .)
    BYTE            reduce using rule 479 (class_member_declaration -> enum_declaration .)
    SHORT           reduce using rule 479 (class_member_declaration -> enum_declaration .)
    INT             reduce using rule 479 (class_member_declaration -> enum_declaration .)
    LONG            reduce using rule 479 (class_member_declaration -> enum_declaration .)
    CHAR            reduce using rule 479 (class_member_declaration -> enum_declaration .)
    FLOAT           reduce using rule 479 (class_member_declaration -> enum_declaration .)
    DOUBLE          reduce using rule 479 (class_member_declaration -> enum_declaration .)
    }               reduce using rule 479 (class_member_declaration -> enum_declaration .)


state 454

    (502) method_declaration -> method_header . method_body
    (503) abstract_method_declaration -> method_header . ;
    (500) method_body -> . { block_statements_opt }

    ;               shift and go to state 712
    {               shift and go to state 700

    method_body                    shift and go to state 711

state 455

    (476) class_member_declaration -> class_declaration .

    ;               reduce using rule 476 (class_member_declaration -> class_declaration .)
    STATIC          reduce using rule 476 (class_member_declaration -> class_declaration .)
    {               reduce using rule 476 (class_member_declaration -> class_declaration .)
    @               reduce using rule 476 (class_member_declaration -> class_declaration .)
    PUBLIC          reduce using rule 476 (class_member_declaration -> class_declaration .)
    PROTECTED       reduce using rule 476 (class_member_declaration -> class_declaration .)
    PRIVATE         reduce using rule 476 (class_member_declaration -> class_declaration .)
    ABSTRACT        reduce using rule 476 (class_member_declaration -> class_declaration .)
    FINAL           reduce using rule 476 (class_member_declaration -> class_declaration .)
    NATIVE          reduce using rule 476 (class_member_declaration -> class_declaration .)
    SYNCHRONIZED    reduce using rule 476 (class_member_declaration -> class_declaration .)
    TRANSIENT       reduce using rule 476 (class_member_declaration -> class_declaration .)
    VOLATILE        reduce using rule 476 (class_member_declaration -> class_declaration .)
    STRICTFP        reduce using rule 476 (class_member_declaration -> class_declaration .)
    NAME            reduce using rule 476 (class_member_declaration -> class_declaration .)
    ENUM            reduce using rule 476 (class_member_declaration -> class_declaration .)
    CLASS           reduce using rule 476 (class_member_declaration -> class_declaration .)
    INTERFACE       reduce using rule 476 (class_member_declaration -> class_declaration .)
    <               reduce using rule 476 (class_member_declaration -> class_declaration .)
    BOOLEAN         reduce using rule 476 (class_member_declaration -> class_declaration .)
    VOID            reduce using rule 476 (class_member_declaration -> class_declaration .)
    BYTE            reduce using rule 476 (class_member_declaration -> class_declaration .)
    SHORT           reduce using rule 476 (class_member_declaration -> class_declaration .)
    INT             reduce using rule 476 (class_member_declaration -> class_declaration .)
    LONG            reduce using rule 476 (class_member_declaration -> class_declaration .)
    CHAR            reduce using rule 476 (class_member_declaration -> class_declaration .)
    FLOAT           reduce using rule 476 (class_member_declaration -> class_declaration .)
    DOUBLE          reduce using rule 476 (class_member_declaration -> class_declaration .)
    }               reduce using rule 476 (class_member_declaration -> class_declaration .)


state 456

    (475) class_member_declaration -> field_declaration .

    ;               reduce using rule 475 (class_member_declaration -> field_declaration .)
    STATIC          reduce using rule 475 (class_member_declaration -> field_declaration .)
    {               reduce using rule 475 (class_member_declaration -> field_declaration .)
    @               reduce using rule 475 (class_member_declaration -> field_declaration .)
    PUBLIC          reduce using rule 475 (class_member_declaration -> field_declaration .)
    PROTECTED       reduce using rule 475 (class_member_declaration -> field_declaration .)
    PRIVATE         reduce using rule 475 (class_member_declaration -> field_declaration .)
    ABSTRACT        reduce using rule 475 (class_member_declaration -> field_declaration .)
    FINAL           reduce using rule 475 (class_member_declaration -> field_declaration .)
    NATIVE          reduce using rule 475 (class_member_declaration -> field_declaration .)
    SYNCHRONIZED    reduce using rule 475 (class_member_declaration -> field_declaration .)
    TRANSIENT       reduce using rule 475 (class_member_declaration -> field_declaration .)
    VOLATILE        reduce using rule 475 (class_member_declaration -> field_declaration .)
    STRICTFP        reduce using rule 475 (class_member_declaration -> field_declaration .)
    NAME            reduce using rule 475 (class_member_declaration -> field_declaration .)
    ENUM            reduce using rule 475 (class_member_declaration -> field_declaration .)
    CLASS           reduce using rule 475 (class_member_declaration -> field_declaration .)
    INTERFACE       reduce using rule 475 (class_member_declaration -> field_declaration .)
    <               reduce using rule 475 (class_member_declaration -> field_declaration .)
    BOOLEAN         reduce using rule 475 (class_member_declaration -> field_declaration .)
    VOID            reduce using rule 475 (class_member_declaration -> field_declaration .)
    BYTE            reduce using rule 475 (class_member_declaration -> field_declaration .)
    SHORT           reduce using rule 475 (class_member_declaration -> field_declaration .)
    INT             reduce using rule 475 (class_member_declaration -> field_declaration .)
    LONG            reduce using rule 475 (class_member_declaration -> field_declaration .)
    CHAR            reduce using rule 475 (class_member_declaration -> field_declaration .)
    FLOAT           reduce using rule 475 (class_member_declaration -> field_declaration .)
    DOUBLE          reduce using rule 475 (class_member_declaration -> field_declaration .)
    }               reduce using rule 475 (class_member_declaration -> field_declaration .)


state 457

    (466) class_body -> { class_body_declarations_opt . }

    }               shift and go to state 713


state 458

    (480) class_member_declaration -> annotation_type_declaration .

    ;               reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    STATIC          reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    {               reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    @               reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    PUBLIC          reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    PROTECTED       reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    PRIVATE         reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    ABSTRACT        reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    FINAL           reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    NATIVE          reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    SYNCHRONIZED    reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    TRANSIENT       reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    VOLATILE        reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    STRICTFP        reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    NAME            reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    ENUM            reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    CLASS           reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    INTERFACE       reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    <               reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    BOOLEAN         reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    VOID            reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    BYTE            reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    SHORT           reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    INT             reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    LONG            reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    CHAR            reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    FLOAT           reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    DOUBLE          reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)
    }               reduce using rule 480 (class_member_declaration -> annotation_type_declaration .)


state 459

    (474) class_body_declaration -> block .

    ;               reduce using rule 474 (class_body_declaration -> block .)
    STATIC          reduce using rule 474 (class_body_declaration -> block .)
    {               reduce using rule 474 (class_body_declaration -> block .)
    @               reduce using rule 474 (class_body_declaration -> block .)
    PUBLIC          reduce using rule 474 (class_body_declaration -> block .)
    PROTECTED       reduce using rule 474 (class_body_declaration -> block .)
    PRIVATE         reduce using rule 474 (class_body_declaration -> block .)
    ABSTRACT        reduce using rule 474 (class_body_declaration -> block .)
    FINAL           reduce using rule 474 (class_body_declaration -> block .)
    NATIVE          reduce using rule 474 (class_body_declaration -> block .)
    SYNCHRONIZED    reduce using rule 474 (class_body_declaration -> block .)
    TRANSIENT       reduce using rule 474 (class_body_declaration -> block .)
    VOLATILE        reduce using rule 474 (class_body_declaration -> block .)
    STRICTFP        reduce using rule 474 (class_body_declaration -> block .)
    NAME            reduce using rule 474 (class_body_declaration -> block .)
    ENUM            reduce using rule 474 (class_body_declaration -> block .)
    CLASS           reduce using rule 474 (class_body_declaration -> block .)
    INTERFACE       reduce using rule 474 (class_body_declaration -> block .)
    <               reduce using rule 474 (class_body_declaration -> block .)
    BOOLEAN         reduce using rule 474 (class_body_declaration -> block .)
    VOID            reduce using rule 474 (class_body_declaration -> block .)
    BYTE            reduce using rule 474 (class_body_declaration -> block .)
    SHORT           reduce using rule 474 (class_body_declaration -> block .)
    INT             reduce using rule 474 (class_body_declaration -> block .)
    LONG            reduce using rule 474 (class_body_declaration -> block .)
    CHAR            reduce using rule 474 (class_body_declaration -> block .)
    FLOAT           reduce using rule 474 (class_body_declaration -> block .)
    DOUBLE          reduce using rule 474 (class_body_declaration -> block .)
    }               reduce using rule 474 (class_body_declaration -> block .)


state 460

    (133) postfix_expression_not_name -> post_decrement_expression .
    (130) postfix_expression -> post_decrement_expression .

    *               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    /               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    %               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    +               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    -               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    <               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    >               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    GTEQ            reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    LTEQ            reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    LSHIFT          reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    RSHIFT          reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    RRSHIFT         reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    INSTANCEOF      reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    EQ              reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    NEQ             reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    &               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    ^               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    |               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    AND             reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    ?               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    OR              reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    )               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    ;               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    ,               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    }               reduce using rule 133 (postfix_expression_not_name -> post_decrement_expression .)
    PLUSPLUS        reduce using rule 130 (postfix_expression -> post_decrement_expression .)
    MINUSMINUS      reduce using rule 130 (postfix_expression -> post_decrement_expression .)


state 461

    (595) single_member_annotation -> annotation_name ( single_member_annotation_member_value . )

    )               shift and go to state 714


state 462

    (575) member_value -> name .
    (24) conditional_expression_not_name -> name . ? expression : conditional_expression
    (29) conditional_or_expression_not_name -> name . OR conditional_and_expression
    (344) qualified_name -> name . . simple_name
    (34) conditional_and_expression_not_name -> name . AND inclusive_or_expression
    (39) inclusive_or_expression_not_name -> name . | exclusive_or_expression
    (44) exclusive_or_expression_not_name -> name . ^ and_expression
    (49) and_expression_not_name -> name . & equality_expression
    (55) equality_expression_not_name -> name . EQ instanceof_expression
    (57) equality_expression_not_name -> name . NEQ instanceof_expression
    (61) instanceof_expression_not_name -> name . INSTANCEOF reference_type
    (70) relational_expression_not_name -> name . < shift_expression
    (72) relational_expression_not_name -> name . > shift_expression
    (74) relational_expression_not_name -> name . GTEQ shift_expression
    (76) relational_expression_not_name -> name . LTEQ shift_expression
    (83) shift_expression_not_name -> name . LSHIFT additive_expression
    (85) shift_expression_not_name -> name . RSHIFT additive_expression
    (87) shift_expression_not_name -> name . RRSHIFT additive_expression
    (93) additive_expression_not_name -> name . + multiplicative_expression
    (95) additive_expression_not_name -> name . - multiplicative_expression
    (102) multiplicative_expression_not_name -> name . * unary_expression
    (104) multiplicative_expression_not_name -> name . / unary_expression
    (106) multiplicative_expression_not_name -> name . % unary_expression
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (128) postfix_expression -> name .
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (330) array_access -> name . [ expression ]
    (325) class_instance_creation_expression_name -> name . .
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    ,               reduce using rule 575 (member_value -> name .)
    }               reduce using rule 575 (member_value -> name .)
    )               reduce using rule 575 (member_value -> name .)
    ;               reduce using rule 575 (member_value -> name .)
    ?               shift and go to state 520
    OR              shift and go to state 524
    .               shift and go to state 519
    AND             shift and go to state 523
    |               shift and go to state 528
    ^               shift and go to state 510
    &               shift and go to state 514
    EQ              shift and go to state 525
    NEQ             shift and go to state 513
    INSTANCEOF      shift and go to state 522
    <               shift and go to state 509
    >               shift and go to state 521
    GTEQ            shift and go to state 507
    LTEQ            shift and go to state 526
    LSHIFT          shift and go to state 511
    RSHIFT          shift and go to state 506
    RRSHIFT         shift and go to state 527
    +               shift and go to state 516
    -               shift and go to state 508
    *               shift and go to state 517
    /               shift and go to state 518
    %               shift and go to state 512
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    [               shift and go to state 301

    dims                           shift and go to state 364
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 463

    (132) postfix_expression_not_name -> post_increment_expression .
    (129) postfix_expression -> post_increment_expression .

    *               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    /               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    %               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    +               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    -               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    <               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    >               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    GTEQ            reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    LTEQ            reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    LSHIFT          reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    RSHIFT          reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    RRSHIFT         reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    INSTANCEOF      reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    EQ              reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    NEQ             reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    &               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    ^               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    |               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    AND             reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    ?               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    OR              reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    )               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    ;               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    ,               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    }               reduce using rule 132 (postfix_expression_not_name -> post_increment_expression .)
    PLUSPLUS        reduce using rule 129 (postfix_expression -> post_increment_expression .)
    MINUSMINUS      reduce using rule 129 (postfix_expression -> post_increment_expression .)


state 464

    (587) normal_annotation -> annotation_name ( member_value_pairs_opt . )

    )               shift and go to state 715


state 465

    (596) single_member_annotation_member_value -> member_value .

    )               reduce using rule 596 (single_member_annotation_member_value -> member_value .)


state 466

    (589) member_value_pairs_opt -> member_value_pairs .
    (592) member_value_pairs -> member_value_pairs . , member_value_pair

    )               reduce using rule 589 (member_value_pairs_opt -> member_value_pairs .)
    ,               shift and go to state 716


state 467

    (578) member_value_array_initializer -> { . member_values , }
    (579) member_value_array_initializer -> { . member_values }
    (580) member_value_array_initializer -> { . , }
    (581) member_value_array_initializer -> { . }
    (582) member_values -> . member_value
    (583) member_values -> . member_values , member_value
    (574) member_value -> . conditional_expression_not_name
    (575) member_value -> . name
    (576) member_value -> . annotation
    (577) member_value -> . member_value_array_initializer
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name ? expression : conditional_expression
    (24) conditional_expression_not_name -> . name ? expression : conditional_expression
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (578) member_value_array_initializer -> . { member_values , }
    (579) member_value_array_initializer -> . { member_values }
    (580) member_value_array_initializer -> . { , }
    (581) member_value_array_initializer -> . { }
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name OR conditional_and_expression
    (29) conditional_or_expression_not_name -> . name OR conditional_and_expression
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name AND inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name AND inclusive_or_expression
    (588) annotation_name -> . @ name
    (37) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (38) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name | exclusive_or_expression
    (39) inclusive_or_expression_not_name -> . name | exclusive_or_expression
    (42) exclusive_or_expression_not_name -> . and_expression_not_name
    (43) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name ^ and_expression
    (44) exclusive_or_expression_not_name -> . name ^ and_expression
    (47) and_expression_not_name -> . equality_expression_not_name
    (48) and_expression_not_name -> . and_expression_not_name & equality_expression
    (49) and_expression_not_name -> . name & equality_expression
    (53) equality_expression_not_name -> . instanceof_expression_not_name
    (54) equality_expression_not_name -> . equality_expression_not_name EQ instanceof_expression
    (55) equality_expression_not_name -> . name EQ instanceof_expression
    (56) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (57) equality_expression_not_name -> . name NEQ instanceof_expression
    (60) instanceof_expression_not_name -> . relational_expression_not_name
    (61) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (62) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (68) relational_expression_not_name -> . shift_expression_not_name
    (69) relational_expression_not_name -> . shift_expression_not_name < shift_expression
    (70) relational_expression_not_name -> . name < shift_expression
    (71) relational_expression_not_name -> . shift_expression_not_name > shift_expression
    (72) relational_expression_not_name -> . name > shift_expression
    (73) relational_expression_not_name -> . shift_expression_not_name GTEQ shift_expression
    (74) relational_expression_not_name -> . name GTEQ shift_expression
    (75) relational_expression_not_name -> . shift_expression_not_name LTEQ shift_expression
    (76) relational_expression_not_name -> . name LTEQ shift_expression
    (81) shift_expression_not_name -> . additive_expression_not_name
    (82) shift_expression_not_name -> . shift_expression_not_name LSHIFT additive_expression
    (83) shift_expression_not_name -> . name LSHIFT additive_expression
    (84) shift_expression_not_name -> . shift_expression_not_name RSHIFT additive_expression
    (85) shift_expression_not_name -> . name RSHIFT additive_expression
    (86) shift_expression_not_name -> . shift_expression_not_name RRSHIFT additive_expression
    (87) shift_expression_not_name -> . name RRSHIFT additive_expression
    (91) additive_expression_not_name -> . multiplicative_expression_not_name
    (92) additive_expression_not_name -> . additive_expression_not_name + multiplicative_expression
    (93) additive_expression_not_name -> . name + multiplicative_expression
    (94) additive_expression_not_name -> . additive_expression_not_name - multiplicative_expression
    (95) additive_expression_not_name -> . name - multiplicative_expression
    (100) multiplicative_expression_not_name -> . unary_expression_not_name
    (101) multiplicative_expression_not_name -> . multiplicative_expression_not_name * unary_expression
    (102) multiplicative_expression_not_name -> . name * unary_expression
    (103) multiplicative_expression_not_name -> . multiplicative_expression_not_name / unary_expression
    (104) multiplicative_expression_not_name -> . name / unary_expression
    (105) multiplicative_expression_not_name -> . multiplicative_expression_not_name % unary_expression
    (106) multiplicative_expression_not_name -> . name % unary_expression
    (112) unary_expression_not_name -> . pre_increment_expression
    (113) unary_expression_not_name -> . pre_decrement_expression
    (114) unary_expression_not_name -> . + unary_expression
    (115) unary_expression_not_name -> . - unary_expression
    (116) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (123) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (124) unary_expression_not_plus_minus_not_name -> . ~ unary_expression
    (125) unary_expression_not_plus_minus_not_name -> . ! unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . cast_expression
    (131) postfix_expression_not_name -> . primary
    (132) postfix_expression_not_name -> . post_increment_expression
    (133) postfix_expression_not_name -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    ,               shift and go to state 717
    }               shift and go to state 720
    {               shift and go to state 467
    NAME            shift and go to state 179
    @               shift and go to state 402
    +               shift and go to state 264
    -               shift and go to state 278
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 267
    !               shift and go to state 277
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    array_creation_without_array_initializer shift and go to state 95
    relational_expression_not_name shift and go to state 262
    array_access                   shift and go to state 90
    primary                        shift and go to state 468
    member_values                  shift and go to state 718
    exclusive_or_expression_not_name shift and go to state 254
    inclusive_or_expression_not_name shift and go to state 269
    multiplicative_expression_not_name shift and go to state 276
    simple_name                    shift and go to state 64
    primitive_type                 shift and go to state 174
    postfix_expression_not_name    shift and go to state 265
    member_value                   shift and go to state 719
    post_decrement_expression      shift and go to state 460
    pre_increment_expression       shift and go to state 266
    postfix_expression             shift and go to state 472
    conditional_expression_not_name shift and go to state 473
    literal                        shift and go to state 146
    instanceof_expression_not_name shift and go to state 273
    cast_expression                shift and go to state 270
    shift_expression_not_name      shift and go to state 256
    unary_expression_not_name      shift and go to state 280
    equality_expression_not_name   shift and go to state 281
    primary_no_new_array           shift and go to state 87
    field_access                   shift and go to state 96
    unary_expression_not_plus_minus_not_name shift and go to state 257
    pre_decrement_expression       shift and go to state 261
    qualified_name                 shift and go to state 141
    single_member_annotation       shift and go to state 18
    conditional_and_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 122
    member_value_array_initializer shift and go to state 474
    array_creation_with_array_initializer shift and go to state 101
    method_invocation              shift and go to state 176
    normal_annotation              shift and go to state 50
    and_expression_not_name        shift and go to state 271
    annotation                     shift and go to state 475
    annotation_name                shift and go to state 38
    name                           shift and go to state 462
    conditional_or_expression_not_name shift and go to state 272
    marker_annotation              shift and go to state 22
    post_increment_expression      shift and go to state 463
    class_instance_creation_expression shift and go to state 156
    additive_expression_not_name   shift and go to state 274

state 468

    (131) postfix_expression_not_name -> primary .
    (127) postfix_expression -> primary .
    (321) class_instance_creation_expression -> primary . . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . . NEW class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> primary . . NAME
    (223) method_invocation -> primary . . type_arguments NAME ( argument_list_opt )
    (226) method_invocation -> primary . . NAME ( argument_list_opt )

    *               reduce using rule 131 (postfix_expression_not_name -> primary .)
    /               reduce using rule 131 (postfix_expression_not_name -> primary .)
    %               reduce using rule 131 (postfix_expression_not_name -> primary .)
    +               reduce using rule 131 (postfix_expression_not_name -> primary .)
    -               reduce using rule 131 (postfix_expression_not_name -> primary .)
    <               reduce using rule 131 (postfix_expression_not_name -> primary .)
    >               reduce using rule 131 (postfix_expression_not_name -> primary .)
    GTEQ            reduce using rule 131 (postfix_expression_not_name -> primary .)
    LTEQ            reduce using rule 131 (postfix_expression_not_name -> primary .)
    LSHIFT          reduce using rule 131 (postfix_expression_not_name -> primary .)
    RSHIFT          reduce using rule 131 (postfix_expression_not_name -> primary .)
    RRSHIFT         reduce using rule 131 (postfix_expression_not_name -> primary .)
    INSTANCEOF      reduce using rule 131 (postfix_expression_not_name -> primary .)
    EQ              reduce using rule 131 (postfix_expression_not_name -> primary .)
    NEQ             reduce using rule 131 (postfix_expression_not_name -> primary .)
    &               reduce using rule 131 (postfix_expression_not_name -> primary .)
    ^               reduce using rule 131 (postfix_expression_not_name -> primary .)
    |               reduce using rule 131 (postfix_expression_not_name -> primary .)
    AND             reduce using rule 131 (postfix_expression_not_name -> primary .)
    ?               reduce using rule 131 (postfix_expression_not_name -> primary .)
    OR              reduce using rule 131 (postfix_expression_not_name -> primary .)
    )               reduce using rule 131 (postfix_expression_not_name -> primary .)
    ;               reduce using rule 131 (postfix_expression_not_name -> primary .)
    ,               reduce using rule 131 (postfix_expression_not_name -> primary .)
    }               reduce using rule 131 (postfix_expression_not_name -> primary .)
    PLUSPLUS        reduce using rule 127 (postfix_expression -> primary .)
    MINUSMINUS      reduce using rule 127 (postfix_expression -> primary .)
    .               shift and go to state 376


state 469

    (591) member_value_pairs -> member_value_pair .

    ,               reduce using rule 591 (member_value_pairs -> member_value_pair .)
    )               reduce using rule 591 (member_value_pairs -> member_value_pair .)


state 470

    (593) member_value_pair -> simple_name . = member_value
    (341) name -> simple_name .

    =               shift and go to state 721
    ?               reduce using rule 341 (name -> simple_name .)
    OR              reduce using rule 341 (name -> simple_name .)
    .               reduce using rule 341 (name -> simple_name .)
    AND             reduce using rule 341 (name -> simple_name .)
    |               reduce using rule 341 (name -> simple_name .)
    ^               reduce using rule 341 (name -> simple_name .)
    &               reduce using rule 341 (name -> simple_name .)
    EQ              reduce using rule 341 (name -> simple_name .)
    NEQ             reduce using rule 341 (name -> simple_name .)
    INSTANCEOF      reduce using rule 341 (name -> simple_name .)
    <               reduce using rule 341 (name -> simple_name .)
    >               reduce using rule 341 (name -> simple_name .)
    GTEQ            reduce using rule 341 (name -> simple_name .)
    LTEQ            reduce using rule 341 (name -> simple_name .)
    LSHIFT          reduce using rule 341 (name -> simple_name .)
    RSHIFT          reduce using rule 341 (name -> simple_name .)
    RRSHIFT         reduce using rule 341 (name -> simple_name .)
    +               reduce using rule 341 (name -> simple_name .)
    -               reduce using rule 341 (name -> simple_name .)
    *               reduce using rule 341 (name -> simple_name .)
    /               reduce using rule 341 (name -> simple_name .)
    %               reduce using rule 341 (name -> simple_name .)
    [               reduce using rule 341 (name -> simple_name .)
    )               reduce using rule 341 (name -> simple_name .)
    PLUSPLUS        reduce using rule 341 (name -> simple_name .)
    MINUSMINUS      reduce using rule 341 (name -> simple_name .)


state 471

    (590) member_value_pairs_opt -> empty .

    )               reduce using rule 590 (member_value_pairs_opt -> empty .)


state 472

    (134) post_increment_expression -> postfix_expression . PLUSPLUS
    (135) post_decrement_expression -> postfix_expression . MINUSMINUS

    PLUSPLUS        shift and go to state 242
    MINUSMINUS      shift and go to state 251


state 473

    (574) member_value -> conditional_expression_not_name .

    ,               reduce using rule 574 (member_value -> conditional_expression_not_name .)
    }               reduce using rule 574 (member_value -> conditional_expression_not_name .)
    )               reduce using rule 574 (member_value -> conditional_expression_not_name .)
    ;               reduce using rule 574 (member_value -> conditional_expression_not_name .)


state 474

    (577) member_value -> member_value_array_initializer .

    ,               reduce using rule 577 (member_value -> member_value_array_initializer .)
    }               reduce using rule 577 (member_value -> member_value_array_initializer .)
    )               reduce using rule 577 (member_value -> member_value_array_initializer .)
    ;               reduce using rule 577 (member_value -> member_value_array_initializer .)


state 475

    (576) member_value -> annotation .

    ,               reduce using rule 576 (member_value -> annotation .)
    }               reduce using rule 576 (member_value -> annotation .)
    )               reduce using rule 576 (member_value -> annotation .)
    ;               reduce using rule 576 (member_value -> annotation .)


state 476

    (555) annotation_type_declaration_header_name -> modifiers @ INTERFACE . NAME
    (556) annotation_type_declaration_header_name -> modifiers @ INTERFACE . NAME type_parameters

    NAME            shift and go to state 722


state 477

    (606) package_declaration_name -> modifiers PACKAGE name .
    (344) qualified_name -> name . . simple_name

    ;               reduce using rule 606 (package_declaration_name -> modifiers PACKAGE name .)
    .               shift and go to state 437


state 478

    (462) class_header_implements -> IMPLEMENTS interface_type_list .
    (464) interface_type_list -> interface_type_list . , interface_type

    {               reduce using rule 462 (class_header_implements -> IMPLEMENTS interface_type_list .)
    ,               shift and go to state 686


state 479

    (524) interface_member_declaration -> interface_declaration .

    ;               reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    @               reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    PUBLIC          reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    PROTECTED       reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    PRIVATE         reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    STATIC          reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    ABSTRACT        reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    FINAL           reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    NATIVE          reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    SYNCHRONIZED    reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    TRANSIENT       reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    VOLATILE        reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    STRICTFP        reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    ENUM            reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    CLASS           reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    INTERFACE       reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    <               reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    BOOLEAN         reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    VOID            reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    BYTE            reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    SHORT           reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    INT             reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    LONG            reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    CHAR            reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    FLOAT           reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    DOUBLE          reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    NAME            reduce using rule 524 (interface_member_declaration -> interface_declaration .)
    }               reduce using rule 524 (interface_member_declaration -> interface_declaration .)


state 480

    (517) interface_member_declarations_opt -> interface_member_declarations .
    (520) interface_member_declarations -> interface_member_declarations . interface_member_declaration
    (521) interface_member_declaration -> . constant_declaration
    (522) interface_member_declaration -> . abstract_method_declaration
    (523) interface_member_declaration -> . class_declaration
    (524) interface_member_declaration -> . interface_declaration
    (525) interface_member_declaration -> . enum_declaration
    (526) interface_member_declaration -> . annotation_type_declaration
    (527) interface_member_declaration -> . ;
    (528) constant_declaration -> . field_declaration
    (503) abstract_method_declaration -> . method_header ;
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (529) enum_declaration -> . enum_header enum_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (482) field_declaration -> . modifiers_opt type variable_declarators ;
    (504) method_header -> . method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (505) method_header_name -> . modifiers_opt type_parameters type NAME (
    (506) method_header_name -> . modifiers_opt type NAME (
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    }               reduce using rule 517 (interface_member_declarations_opt -> interface_member_declarations .)
    ;               shift and go to state 485
    @               shift and go to state 30
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    interface_declaration          shift and go to state 479
    enum_header                    shift and go to state 7
    class_header_name1             shift and go to state 8
    interface_header_name          shift and go to state 14
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    modifiers_opt                  shift and go to state 481
    interface_member_declaration   shift and go to state 723
    class_header_name              shift and go to state 5
    annotation                     shift and go to state 10
    constant_declaration           shift and go to state 484
    empty                          shift and go to state 121
    annotation_type_declaration_header_name shift and go to state 31
    single_member_annotation       shift and go to state 18
    method_header_name             shift and go to state 449
    abstract_method_declaration    shift and go to state 487
    normal_annotation              shift and go to state 50
    class_header                   shift and go to state 36
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 488
    enum_header_name               shift and go to state 43
    enum_declaration               shift and go to state 489
    interface_header               shift and go to state 45
    method_header                  shift and go to state 490
    class_declaration              shift and go to state 491
    marker_annotation              shift and go to state 22
    field_declaration              shift and go to state 429
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 492

state 481

    (482) field_declaration -> modifiers_opt . type variable_declarators ;
    (505) method_header_name -> modifiers_opt . type_parameters type NAME (
    (506) method_header_name -> modifiers_opt . type NAME (
    (531) enum_header_name -> modifiers_opt . ENUM NAME
    (532) enum_header_name -> modifiers_opt . ENUM NAME type_parameters
    (456) class_header_name1 -> modifiers_opt . CLASS NAME
    (512) interface_header_name1 -> modifiers_opt . INTERFACE NAME
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (430) type_parameters -> . < type_parameter_list1
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    ENUM            shift and go to state 208
    CLASS           shift and go to state 210
    INTERFACE       shift and go to state 209
    <               shift and go to state 197
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_or_interface             shift and go to state 144
    reference_type                 shift and go to state 91
    type_parameters                shift and go to state 724
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    class_or_interface_type        shift and go to state 88
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    type                           shift and go to state 709
    name                           shift and go to state 342

state 482

    (519) interface_member_declarations -> interface_member_declaration .

    ;               reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    @               reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    PUBLIC          reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    PROTECTED       reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    PRIVATE         reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    STATIC          reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    ABSTRACT        reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    FINAL           reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    NATIVE          reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    SYNCHRONIZED    reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    TRANSIENT       reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    VOLATILE        reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    STRICTFP        reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    ENUM            reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    CLASS           reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    INTERFACE       reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    <               reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    BOOLEAN         reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    VOID            reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    BYTE            reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    SHORT           reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    INT             reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    LONG            reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    CHAR            reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    FLOAT           reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    DOUBLE          reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    NAME            reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)
    }               reduce using rule 519 (interface_member_declarations -> interface_member_declaration .)


state 483

    (516) interface_body -> { interface_member_declarations_opt . }

    }               shift and go to state 725


state 484

    (521) interface_member_declaration -> constant_declaration .

    ;               reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    @               reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    PUBLIC          reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    PROTECTED       reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    PRIVATE         reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    STATIC          reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    ABSTRACT        reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    FINAL           reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    NATIVE          reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    SYNCHRONIZED    reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    TRANSIENT       reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    VOLATILE        reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    STRICTFP        reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    ENUM            reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    CLASS           reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    INTERFACE       reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    <               reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    BOOLEAN         reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    VOID            reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    BYTE            reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    SHORT           reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    INT             reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    LONG            reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    CHAR            reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    FLOAT           reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    DOUBLE          reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    NAME            reduce using rule 521 (interface_member_declaration -> constant_declaration .)
    }               reduce using rule 521 (interface_member_declaration -> constant_declaration .)


state 485

    (527) interface_member_declaration -> ; .

    ;               reduce using rule 527 (interface_member_declaration -> ; .)
    @               reduce using rule 527 (interface_member_declaration -> ; .)
    PUBLIC          reduce using rule 527 (interface_member_declaration -> ; .)
    PROTECTED       reduce using rule 527 (interface_member_declaration -> ; .)
    PRIVATE         reduce using rule 527 (interface_member_declaration -> ; .)
    STATIC          reduce using rule 527 (interface_member_declaration -> ; .)
    ABSTRACT        reduce using rule 527 (interface_member_declaration -> ; .)
    FINAL           reduce using rule 527 (interface_member_declaration -> ; .)
    NATIVE          reduce using rule 527 (interface_member_declaration -> ; .)
    SYNCHRONIZED    reduce using rule 527 (interface_member_declaration -> ; .)
    TRANSIENT       reduce using rule 527 (interface_member_declaration -> ; .)
    VOLATILE        reduce using rule 527 (interface_member_declaration -> ; .)
    STRICTFP        reduce using rule 527 (interface_member_declaration -> ; .)
    ENUM            reduce using rule 527 (interface_member_declaration -> ; .)
    CLASS           reduce using rule 527 (interface_member_declaration -> ; .)
    INTERFACE       reduce using rule 527 (interface_member_declaration -> ; .)
    <               reduce using rule 527 (interface_member_declaration -> ; .)
    BOOLEAN         reduce using rule 527 (interface_member_declaration -> ; .)
    VOID            reduce using rule 527 (interface_member_declaration -> ; .)
    BYTE            reduce using rule 527 (interface_member_declaration -> ; .)
    SHORT           reduce using rule 527 (interface_member_declaration -> ; .)
    INT             reduce using rule 527 (interface_member_declaration -> ; .)
    LONG            reduce using rule 527 (interface_member_declaration -> ; .)
    CHAR            reduce using rule 527 (interface_member_declaration -> ; .)
    FLOAT           reduce using rule 527 (interface_member_declaration -> ; .)
    DOUBLE          reduce using rule 527 (interface_member_declaration -> ; .)
    NAME            reduce using rule 527 (interface_member_declaration -> ; .)
    }               reduce using rule 527 (interface_member_declaration -> ; .)


state 486

    (518) interface_member_declarations_opt -> empty .
    (352) modifiers_opt -> empty .

    }               reduce using rule 518 (interface_member_declarations_opt -> empty .)
    ENUM            reduce using rule 352 (modifiers_opt -> empty .)
    CLASS           reduce using rule 352 (modifiers_opt -> empty .)
    INTERFACE       reduce using rule 352 (modifiers_opt -> empty .)
    <               reduce using rule 352 (modifiers_opt -> empty .)
    BOOLEAN         reduce using rule 352 (modifiers_opt -> empty .)
    VOID            reduce using rule 352 (modifiers_opt -> empty .)
    BYTE            reduce using rule 352 (modifiers_opt -> empty .)
    SHORT           reduce using rule 352 (modifiers_opt -> empty .)
    INT             reduce using rule 352 (modifiers_opt -> empty .)
    LONG            reduce using rule 352 (modifiers_opt -> empty .)
    CHAR            reduce using rule 352 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 352 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 352 (modifiers_opt -> empty .)
    NAME            reduce using rule 352 (modifiers_opt -> empty .)


state 487

    (522) interface_member_declaration -> abstract_method_declaration .

    ;               reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    @               reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    PUBLIC          reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    PROTECTED       reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    PRIVATE         reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    STATIC          reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    ABSTRACT        reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    FINAL           reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    NATIVE          reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    SYNCHRONIZED    reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    TRANSIENT       reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    VOLATILE        reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    STRICTFP        reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    ENUM            reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    CLASS           reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    INTERFACE       reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    <               reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    BOOLEAN         reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    VOID            reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    BYTE            reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    SHORT           reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    INT             reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    LONG            reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    CHAR            reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    FLOAT           reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    DOUBLE          reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    NAME            reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)
    }               reduce using rule 522 (interface_member_declaration -> abstract_method_declaration .)


state 488

    (351) modifiers_opt -> modifiers .
    (555) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> modifiers . @ INTERFACE NAME type_parameters
    (354) modifiers -> modifiers . modifier
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    ENUM            reduce using rule 351 (modifiers_opt -> modifiers .)
    CLASS           reduce using rule 351 (modifiers_opt -> modifiers .)
    INTERFACE       reduce using rule 351 (modifiers_opt -> modifiers .)
    <               reduce using rule 351 (modifiers_opt -> modifiers .)
    BOOLEAN         reduce using rule 351 (modifiers_opt -> modifiers .)
    VOID            reduce using rule 351 (modifiers_opt -> modifiers .)
    BYTE            reduce using rule 351 (modifiers_opt -> modifiers .)
    SHORT           reduce using rule 351 (modifiers_opt -> modifiers .)
    INT             reduce using rule 351 (modifiers_opt -> modifiers .)
    LONG            reduce using rule 351 (modifiers_opt -> modifiers .)
    CHAR            reduce using rule 351 (modifiers_opt -> modifiers .)
    FLOAT           reduce using rule 351 (modifiers_opt -> modifiers .)
    DOUBLE          reduce using rule 351 (modifiers_opt -> modifiers .)
    NAME            reduce using rule 351 (modifiers_opt -> modifiers .)
    @               shift and go to state 223
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25

    annotation_name                shift and go to state 38
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 225
    annotation                     shift and go to state 10

state 489

    (525) interface_member_declaration -> enum_declaration .

    ;               reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    @               reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    PUBLIC          reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    PROTECTED       reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    PRIVATE         reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    STATIC          reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    ABSTRACT        reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    FINAL           reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    NATIVE          reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    SYNCHRONIZED    reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    TRANSIENT       reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    VOLATILE        reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    STRICTFP        reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    ENUM            reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    CLASS           reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    INTERFACE       reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    <               reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    BOOLEAN         reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    VOID            reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    BYTE            reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    SHORT           reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    INT             reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    LONG            reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    CHAR            reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    FLOAT           reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    DOUBLE          reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    NAME            reduce using rule 525 (interface_member_declaration -> enum_declaration .)
    }               reduce using rule 525 (interface_member_declaration -> enum_declaration .)


state 490

    (503) abstract_method_declaration -> method_header . ;

    ;               shift and go to state 712


state 491

    (523) interface_member_declaration -> class_declaration .

    ;               reduce using rule 523 (interface_member_declaration -> class_declaration .)
    @               reduce using rule 523 (interface_member_declaration -> class_declaration .)
    PUBLIC          reduce using rule 523 (interface_member_declaration -> class_declaration .)
    PROTECTED       reduce using rule 523 (interface_member_declaration -> class_declaration .)
    PRIVATE         reduce using rule 523 (interface_member_declaration -> class_declaration .)
    STATIC          reduce using rule 523 (interface_member_declaration -> class_declaration .)
    ABSTRACT        reduce using rule 523 (interface_member_declaration -> class_declaration .)
    FINAL           reduce using rule 523 (interface_member_declaration -> class_declaration .)
    NATIVE          reduce using rule 523 (interface_member_declaration -> class_declaration .)
    SYNCHRONIZED    reduce using rule 523 (interface_member_declaration -> class_declaration .)
    TRANSIENT       reduce using rule 523 (interface_member_declaration -> class_declaration .)
    VOLATILE        reduce using rule 523 (interface_member_declaration -> class_declaration .)
    STRICTFP        reduce using rule 523 (interface_member_declaration -> class_declaration .)
    ENUM            reduce using rule 523 (interface_member_declaration -> class_declaration .)
    CLASS           reduce using rule 523 (interface_member_declaration -> class_declaration .)
    INTERFACE       reduce using rule 523 (interface_member_declaration -> class_declaration .)
    <               reduce using rule 523 (interface_member_declaration -> class_declaration .)
    BOOLEAN         reduce using rule 523 (interface_member_declaration -> class_declaration .)
    VOID            reduce using rule 523 (interface_member_declaration -> class_declaration .)
    BYTE            reduce using rule 523 (interface_member_declaration -> class_declaration .)
    SHORT           reduce using rule 523 (interface_member_declaration -> class_declaration .)
    INT             reduce using rule 523 (interface_member_declaration -> class_declaration .)
    LONG            reduce using rule 523 (interface_member_declaration -> class_declaration .)
    CHAR            reduce using rule 523 (interface_member_declaration -> class_declaration .)
    FLOAT           reduce using rule 523 (interface_member_declaration -> class_declaration .)
    DOUBLE          reduce using rule 523 (interface_member_declaration -> class_declaration .)
    NAME            reduce using rule 523 (interface_member_declaration -> class_declaration .)
    }               reduce using rule 523 (interface_member_declaration -> class_declaration .)


state 492

    (526) interface_member_declaration -> annotation_type_declaration .

    ;               reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    @               reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    PUBLIC          reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    PROTECTED       reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    PRIVATE         reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    STATIC          reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    ABSTRACT        reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    FINAL           reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    NATIVE          reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    SYNCHRONIZED    reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    TRANSIENT       reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    VOLATILE        reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    STRICTFP        reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    ENUM            reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    CLASS           reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    INTERFACE       reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    <               reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    BOOLEAN         reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    VOID            reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    BYTE            reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    SHORT           reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    INT             reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    LONG            reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    CHAR            reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    FLOAT           reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    DOUBLE          reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    NAME            reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)
    }               reduce using rule 526 (interface_member_declaration -> annotation_type_declaration .)


state 493

    (390) array_type -> generic_type . name . dims
    (384) class_or_interface -> generic_type . name .
    (344) qualified_name -> name . . simple_name
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    <               reduce using rule 384 (class_or_interface -> generic_type . name .)
    NAME            reduce using rule 384 (class_or_interface -> generic_type . name .)
    INSTANCEOF      reduce using rule 384 (class_or_interface -> generic_type . name .)
    EQ              reduce using rule 384 (class_or_interface -> generic_type . name .)
    NEQ             reduce using rule 384 (class_or_interface -> generic_type . name .)
    &               reduce using rule 384 (class_or_interface -> generic_type . name .)
    ^               reduce using rule 384 (class_or_interface -> generic_type . name .)
    |               reduce using rule 384 (class_or_interface -> generic_type . name .)
    AND             reduce using rule 384 (class_or_interface -> generic_type . name .)
    ?               reduce using rule 384 (class_or_interface -> generic_type . name .)
    OR              reduce using rule 384 (class_or_interface -> generic_type . name .)
    )               reduce using rule 384 (class_or_interface -> generic_type . name .)
    ,               reduce using rule 384 (class_or_interface -> generic_type . name .)
    }               reduce using rule 384 (class_or_interface -> generic_type . name .)
    ;               reduce using rule 384 (class_or_interface -> generic_type . name .)
    $end            reduce using rule 384 (class_or_interface -> generic_type . name .)
    :               reduce using rule 384 (class_or_interface -> generic_type . name .)
    ]               reduce using rule 384 (class_or_interface -> generic_type . name .)
    ELLIPSIS        reduce using rule 384 (class_or_interface -> generic_type . name .)
    .               shift and go to state 437
    [               shift and go to state 238

    dims                           shift and go to state 726
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 494

    (157) dims_loop -> dims_loop one_dim_loop .

    [               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    NAME            reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    ELLIPSIS        reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    |               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    )               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    .               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    >               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    ,               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    INSTANCEOF      reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    EQ              reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    NEQ             reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    &               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    ^               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    AND             reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    ?               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    OR              reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    $end            reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    ;               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    :               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    ]               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    }               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    RSHIFT          reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    RRSHIFT         reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    =               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    DEFAULT         reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    THROWS          reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)
    {               reduce using rule 157 (dims_loop -> dims_loop one_dim_loop .)


state 495

    (158) one_dim_loop -> [ ] .

    [               reduce using rule 158 (one_dim_loop -> [ ] .)
    =               reduce using rule 158 (one_dim_loop -> [ ] .)
    ;               reduce using rule 158 (one_dim_loop -> [ ] .)
    ,               reduce using rule 158 (one_dim_loop -> [ ] .)
    )               reduce using rule 158 (one_dim_loop -> [ ] .)
    .               reduce using rule 158 (one_dim_loop -> [ ] .)
    >               reduce using rule 158 (one_dim_loop -> [ ] .)
    RSHIFT          reduce using rule 158 (one_dim_loop -> [ ] .)
    &               reduce using rule 158 (one_dim_loop -> [ ] .)
    RRSHIFT         reduce using rule 158 (one_dim_loop -> [ ] .)
    NAME            reduce using rule 158 (one_dim_loop -> [ ] .)
    INSTANCEOF      reduce using rule 158 (one_dim_loop -> [ ] .)
    EQ              reduce using rule 158 (one_dim_loop -> [ ] .)
    NEQ             reduce using rule 158 (one_dim_loop -> [ ] .)
    ^               reduce using rule 158 (one_dim_loop -> [ ] .)
    |               reduce using rule 158 (one_dim_loop -> [ ] .)
    AND             reduce using rule 158 (one_dim_loop -> [ ] .)
    ?               reduce using rule 158 (one_dim_loop -> [ ] .)
    OR              reduce using rule 158 (one_dim_loop -> [ ] .)
    $end            reduce using rule 158 (one_dim_loop -> [ ] .)
    :               reduce using rule 158 (one_dim_loop -> [ ] .)
    ]               reduce using rule 158 (one_dim_loop -> [ ] .)
    }               reduce using rule 158 (one_dim_loop -> [ ] .)
    ELLIPSIS        reduce using rule 158 (one_dim_loop -> [ ] .)
    DEFAULT         reduce using rule 158 (one_dim_loop -> [ ] .)
    THROWS          reduce using rule 158 (one_dim_loop -> [ ] .)
    {               reduce using rule 158 (one_dim_loop -> [ ] .)


state 496

    (7) assignment -> postfix_expression assignment_operator assignment_expression .

    }               reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    ,               reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    ;               reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    )               reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    ]               reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    :               reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)
    $end            reduce using rule 7 (assignment -> postfix_expression assignment_operator assignment_expression .)


state 497

    (43) exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ . and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 727
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 498

    (84) shift_expression_not_name -> shift_expression_not_name RSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 728
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 499

    (73) relational_expression_not_name -> shift_expression_not_name GTEQ . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 729
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 500

    (75) relational_expression_not_name -> shift_expression_not_name LTEQ . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 730
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 501

    (82) shift_expression_not_name -> shift_expression_not_name LSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 731
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 502

    (86) shift_expression_not_name -> shift_expression_not_name RRSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 732
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 503

    (69) relational_expression_not_name -> shift_expression_not_name < . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 733
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 504

    (71) relational_expression_not_name -> shift_expression_not_name > . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 734
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 505

    (33) conditional_and_expression_not_name -> conditional_and_expression_not_name AND . inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 735
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 506

    (85) shift_expression_not_name -> name RSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 736
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 507

    (74) relational_expression_not_name -> name GTEQ . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 737
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 508

    (95) additive_expression_not_name -> name - . multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 738
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 509

    (70) relational_expression_not_name -> name < . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 739
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 510

    (44) exclusive_or_expression_not_name -> name ^ . and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 740
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 511

    (83) shift_expression_not_name -> name LSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 741
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 512

    (106) multiplicative_expression_not_name -> name % . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 742
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 513

    (57) equality_expression_not_name -> name NEQ . instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 743
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 167
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    relational_expression          shift and go to state 175
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 514

    (49) and_expression_not_name -> name & . equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    relational_expression          shift and go to state 175
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 744
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 515

    (145) primary_no_new_array -> ( name ) .

    [               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    .               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    PLUSPLUS        reduce using rule 145 (primary_no_new_array -> ( name ) .)
    MINUSMINUS      reduce using rule 145 (primary_no_new_array -> ( name ) .)
    =               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    TIMES_ASSIGN    reduce using rule 145 (primary_no_new_array -> ( name ) .)
    DIVIDE_ASSIGN   reduce using rule 145 (primary_no_new_array -> ( name ) .)
    REMAINDER_ASSIGN reduce using rule 145 (primary_no_new_array -> ( name ) .)
    PLUS_ASSIGN     reduce using rule 145 (primary_no_new_array -> ( name ) .)
    MINUS_ASSIGN    reduce using rule 145 (primary_no_new_array -> ( name ) .)
    LSHIFT_ASSIGN   reduce using rule 145 (primary_no_new_array -> ( name ) .)
    RSHIFT_ASSIGN   reduce using rule 145 (primary_no_new_array -> ( name ) .)
    RRSHIFT_ASSIGN  reduce using rule 145 (primary_no_new_array -> ( name ) .)
    AND_ASSIGN      reduce using rule 145 (primary_no_new_array -> ( name ) .)
    OR_ASSIGN       reduce using rule 145 (primary_no_new_array -> ( name ) .)
    XOR_ASSIGN      reduce using rule 145 (primary_no_new_array -> ( name ) .)


state 516

    (93) additive_expression_not_name -> name + . multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 745
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 517

    (102) multiplicative_expression_not_name -> name * . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 746
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 518

    (104) multiplicative_expression_not_name -> name / . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 747
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 519

    (344) qualified_name -> name . . simple_name
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (325) class_instance_creation_expression_name -> name . .
    (343) simple_name -> . NAME
    (391) type_arguments -> . < type_argument_list1

    THIS            shift and go to state 645
    SUPER           shift and go to state 647
    CLASS           shift and go to state 563
    NAME            shift and go to state 564
    NEW             reduce using rule 325 (class_instance_creation_expression_name -> name . .)
    <               shift and go to state 67

    type_arguments                 shift and go to state 646
    simple_name                    shift and go to state 560

state 520

    (24) conditional_expression_not_name -> name ? . expression : conditional_expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 748
    conditional_and_expression     shift and go to state 161

state 521

    (72) relational_expression_not_name -> name > . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 749
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 522

    (61) instanceof_expression_not_name -> name INSTANCEOF . reference_type
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 342
    class_or_interface             shift and go to state 144
    reference_type                 shift and go to state 750
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 523

    (34) conditional_and_expression_not_name -> name AND . inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 751
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 524

    (29) conditional_or_expression_not_name -> name OR . conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 154
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    conditional_and_expression     shift and go to state 752
    class_instance_creation_expression shift and go to state 156

state 525

    (55) equality_expression_not_name -> name EQ . instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 753
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 167
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    relational_expression          shift and go to state 175
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 526

    (76) relational_expression_not_name -> name LTEQ . shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    shift_expression               shift and go to state 754
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 527

    (87) shift_expression_not_name -> name RRSHIFT . additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 755
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 528

    (39) inclusive_or_expression_not_name -> name | . exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 756
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 529

    (114) unary_expression_not_name -> + unary_expression .

    *               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    /               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    %               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    +               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    -               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    <               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    >               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    GTEQ            reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    LTEQ            reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    LSHIFT          reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    RSHIFT          reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    RRSHIFT         reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    INSTANCEOF      reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    EQ              reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    NEQ             reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    &               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    ^               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    |               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    AND             reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    ?               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    OR              reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    )               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    ,               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    }               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)
    ;               reduce using rule 114 (unary_expression_not_name -> + unary_expression .)


state 530

    (124) unary_expression_not_plus_minus_not_name -> ~ unary_expression .

    *               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    /               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    %               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    +               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    -               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    <               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    >               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    GTEQ            reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    LTEQ            reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    LSHIFT          reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    RSHIFT          reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    RRSHIFT         reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    INSTANCEOF      reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    EQ              reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    NEQ             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    &               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    ^               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    |               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    AND             reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    ?               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    OR              reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    ,               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    }               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    )               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)
    ;               reduce using rule 124 (unary_expression_not_plus_minus_not_name -> ~ unary_expression .)


state 531

    (38) inclusive_or_expression_not_name -> inclusive_or_expression_not_name | . exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 757
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    array_creation_without_array_initializer shift and go to state 95
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 532

    (48) and_expression_not_name -> and_expression_not_name & . equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 180
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    relational_expression          shift and go to state 175
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 758
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    class_instance_creation_expression shift and go to state 156

state 533

    (28) conditional_or_expression_not_name -> conditional_or_expression_not_name OR . conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 154
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160
    conditional_and_expression     shift and go to state 759
    class_instance_creation_expression shift and go to state 156

state 534

    (23) conditional_expression_not_name -> conditional_or_expression_not_name ? . expression : conditional_expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 760
    conditional_and_expression     shift and go to state 161

state 535

    (62) instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF . reference_type
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 342
    class_or_interface             shift and go to state 144
    reference_type                 shift and go to state 761
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 536

    (92) additive_expression_not_name -> additive_expression_not_name + . multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 762
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 537

    (94) additive_expression_not_name -> additive_expression_not_name - . multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 763
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 538

    (146) primary_no_new_array -> ( expression_not_name ) .

    [               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    .               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    PLUSPLUS        reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    MINUSMINUS      reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    ;               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    *               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    /               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    %               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    +               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    -               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    LSHIFT          reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    RSHIFT          reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    RRSHIFT         reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    >               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    <               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    GTEQ            reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    LTEQ            reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    INSTANCEOF      reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    EQ              reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    NEQ             reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    &               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    ^               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    |               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    AND             reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    ?               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    OR              reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    $end            reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    )               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    :               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    ]               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    ,               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    }               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    =               reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    TIMES_ASSIGN    reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    DIVIDE_ASSIGN   reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    REMAINDER_ASSIGN reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    PLUS_ASSIGN     reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    MINUS_ASSIGN    reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    LSHIFT_ASSIGN   reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    RSHIFT_ASSIGN   reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    RRSHIFT_ASSIGN  reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    AND_ASSIGN      reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    OR_ASSIGN       reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)
    XOR_ASSIGN      reduce using rule 146 (primary_no_new_array -> ( expression_not_name ) .)


state 539

    (101) multiplicative_expression_not_name -> multiplicative_expression_not_name * . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 764
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 540

    (105) multiplicative_expression_not_name -> multiplicative_expression_not_name % . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 765
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 541

    (103) multiplicative_expression_not_name -> multiplicative_expression_not_name / . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 766
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 542

    (125) unary_expression_not_plus_minus_not_name -> ! unary_expression .

    *               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    /               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    %               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    +               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    -               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    <               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    >               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    GTEQ            reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    LTEQ            reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    LSHIFT          reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    RSHIFT          reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    RRSHIFT         reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    INSTANCEOF      reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    EQ              reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    NEQ             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    &               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    ^               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    |               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    AND             reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    ?               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    OR              reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    ,               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    }               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    )               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)
    ;               reduce using rule 125 (unary_expression_not_plus_minus_not_name -> ! unary_expression .)


state 543

    (115) unary_expression_not_name -> - unary_expression .

    *               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    /               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    %               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    +               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    -               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    <               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    >               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    GTEQ            reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    LTEQ            reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    LSHIFT          reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    RSHIFT          reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    RRSHIFT         reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    INSTANCEOF      reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    EQ              reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    NEQ             reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    &               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    ^               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    |               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    AND             reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    ?               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    OR              reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    )               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    ,               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    }               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)
    ;               reduce using rule 115 (unary_expression_not_name -> - unary_expression .)


state 544

    (56) equality_expression_not_name -> equality_expression_not_name NEQ . instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 767
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    relational_expression          shift and go to state 175
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 545

    (54) equality_expression_not_name -> equality_expression_not_name EQ . instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    post_decrement_expression      shift and go to state 153
    instanceof_expression          shift and go to state 768
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    relational_expression          shift and go to state 175
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 546

    (384) class_or_interface -> generic_type . . name
    (390) array_type -> generic_type . . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 769
    simple_name                    shift and go to state 64

state 547

    (400) reference_type1 -> reference_type > .

    SUPER           reduce using rule 400 (reference_type1 -> reference_type > .)
    THIS            reduce using rule 400 (reference_type1 -> reference_type > .)
    NAME            reduce using rule 400 (reference_type1 -> reference_type > .)
    .               reduce using rule 400 (reference_type1 -> reference_type > .)
    [               reduce using rule 400 (reference_type1 -> reference_type > .)
    (               reduce using rule 400 (reference_type1 -> reference_type > .)
    IMPLEMENTS      reduce using rule 400 (reference_type1 -> reference_type > .)
    {               reduce using rule 400 (reference_type1 -> reference_type > .)
    ,               reduce using rule 400 (reference_type1 -> reference_type > .)
    INSTANCEOF      reduce using rule 400 (reference_type1 -> reference_type > .)
    EQ              reduce using rule 400 (reference_type1 -> reference_type > .)
    NEQ             reduce using rule 400 (reference_type1 -> reference_type > .)
    &               reduce using rule 400 (reference_type1 -> reference_type > .)
    ^               reduce using rule 400 (reference_type1 -> reference_type > .)
    |               reduce using rule 400 (reference_type1 -> reference_type > .)
    AND             reduce using rule 400 (reference_type1 -> reference_type > .)
    ?               reduce using rule 400 (reference_type1 -> reference_type > .)
    OR              reduce using rule 400 (reference_type1 -> reference_type > .)
    $end            reduce using rule 400 (reference_type1 -> reference_type > .)
    ;               reduce using rule 400 (reference_type1 -> reference_type > .)
    :               reduce using rule 400 (reference_type1 -> reference_type > .)
    )               reduce using rule 400 (reference_type1 -> reference_type > .)
    ]               reduce using rule 400 (reference_type1 -> reference_type > .)
    }               reduce using rule 400 (reference_type1 -> reference_type > .)
    ELLIPSIS        reduce using rule 400 (reference_type1 -> reference_type > .)
    >               reduce using rule 400 (reference_type1 -> reference_type > .)
    RSHIFT          reduce using rule 400 (reference_type1 -> reference_type > .)
    RRSHIFT         reduce using rule 400 (reference_type1 -> reference_type > .)
    EXTENDS         reduce using rule 400 (reference_type1 -> reference_type > .)
    BOOLEAN         reduce using rule 400 (reference_type1 -> reference_type > .)
    VOID            reduce using rule 400 (reference_type1 -> reference_type > .)
    BYTE            reduce using rule 400 (reference_type1 -> reference_type > .)
    SHORT           reduce using rule 400 (reference_type1 -> reference_type > .)
    INT             reduce using rule 400 (reference_type1 -> reference_type > .)
    LONG            reduce using rule 400 (reference_type1 -> reference_type > .)
    CHAR            reduce using rule 400 (reference_type1 -> reference_type > .)
    FLOAT           reduce using rule 400 (reference_type1 -> reference_type > .)
    DOUBLE          reduce using rule 400 (reference_type1 -> reference_type > .)


state 548

    (387) array_type -> primitive_type dims .

    RRSHIFT         reduce using rule 387 (array_type -> primitive_type dims .)
    RSHIFT          reduce using rule 387 (array_type -> primitive_type dims .)
    >               reduce using rule 387 (array_type -> primitive_type dims .)
    ,               reduce using rule 387 (array_type -> primitive_type dims .)
    NAME            reduce using rule 387 (array_type -> primitive_type dims .)
    |               reduce using rule 387 (array_type -> primitive_type dims .)
    &               reduce using rule 387 (array_type -> primitive_type dims .)
    INSTANCEOF      reduce using rule 387 (array_type -> primitive_type dims .)
    EQ              reduce using rule 387 (array_type -> primitive_type dims .)
    NEQ             reduce using rule 387 (array_type -> primitive_type dims .)
    ^               reduce using rule 387 (array_type -> primitive_type dims .)
    AND             reduce using rule 387 (array_type -> primitive_type dims .)
    ?               reduce using rule 387 (array_type -> primitive_type dims .)
    OR              reduce using rule 387 (array_type -> primitive_type dims .)
    )               reduce using rule 387 (array_type -> primitive_type dims .)
    }               reduce using rule 387 (array_type -> primitive_type dims .)
    ;               reduce using rule 387 (array_type -> primitive_type dims .)
    $end            reduce using rule 387 (array_type -> primitive_type dims .)
    :               reduce using rule 387 (array_type -> primitive_type dims .)
    ]               reduce using rule 387 (array_type -> primitive_type dims .)
    ELLIPSIS        reduce using rule 387 (array_type -> primitive_type dims .)


state 549

    (414) wildcard -> ? wildcard_bounds .

    ,               reduce using rule 414 (wildcard -> ? wildcard_bounds .)


state 550

    (418) wildcard1 -> ? wildcard_bounds1 .

    .               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    [               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    RSHIFT          reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    >               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    ,               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    RRSHIFT         reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    SUPER           reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    THIS            reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    NAME            reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    )               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    (               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    IMPLEMENTS      reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    {               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    INSTANCEOF      reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    EQ              reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    NEQ             reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    &               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    ^               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    |               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    AND             reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    ?               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    OR              reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    $end            reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    ;               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    :               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    ]               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    }               reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)
    ELLIPSIS        reduce using rule 418 (wildcard1 -> ? wildcard_bounds1 .)


state 551

    (419) wildcard_bounds1 -> EXTENDS . reference_type1
    (415) wildcard_bounds -> EXTENDS . reference_type
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 291
    reference_type                 shift and go to state 771
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    reference_type1                shift and go to state 770
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 552

    (420) wildcard_bounds1 -> SUPER . reference_type1
    (416) wildcard_bounds -> SUPER . reference_type
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 291
    reference_type                 shift and go to state 773
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    reference_type1                shift and go to state 772
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 553

    (417) wildcard1 -> ? > .

    .               reduce using rule 417 (wildcard1 -> ? > .)
    [               reduce using rule 417 (wildcard1 -> ? > .)
    RSHIFT          reduce using rule 417 (wildcard1 -> ? > .)
    >               reduce using rule 417 (wildcard1 -> ? > .)
    ,               reduce using rule 417 (wildcard1 -> ? > .)
    RRSHIFT         reduce using rule 417 (wildcard1 -> ? > .)
    SUPER           reduce using rule 417 (wildcard1 -> ? > .)
    THIS            reduce using rule 417 (wildcard1 -> ? > .)
    NAME            reduce using rule 417 (wildcard1 -> ? > .)
    )               reduce using rule 417 (wildcard1 -> ? > .)
    (               reduce using rule 417 (wildcard1 -> ? > .)
    IMPLEMENTS      reduce using rule 417 (wildcard1 -> ? > .)
    {               reduce using rule 417 (wildcard1 -> ? > .)
    INSTANCEOF      reduce using rule 417 (wildcard1 -> ? > .)
    EQ              reduce using rule 417 (wildcard1 -> ? > .)
    NEQ             reduce using rule 417 (wildcard1 -> ? > .)
    &               reduce using rule 417 (wildcard1 -> ? > .)
    ^               reduce using rule 417 (wildcard1 -> ? > .)
    |               reduce using rule 417 (wildcard1 -> ? > .)
    AND             reduce using rule 417 (wildcard1 -> ? > .)
    ?               reduce using rule 417 (wildcard1 -> ? > .)
    OR              reduce using rule 417 (wildcard1 -> ? > .)
    $end            reduce using rule 417 (wildcard1 -> ? > .)
    ;               reduce using rule 417 (wildcard1 -> ? > .)
    :               reduce using rule 417 (wildcard1 -> ? > .)
    ]               reduce using rule 417 (wildcard1 -> ? > .)
    }               reduce using rule 417 (wildcard1 -> ? > .)
    ELLIPSIS        reduce using rule 417 (wildcard1 -> ? > .)


state 554

    (393) type_argument_list1 -> type_argument_list , . type_argument1
    (395) type_argument_list -> type_argument_list , . type_argument
    (398) type_argument1 -> . reference_type1
    (399) type_argument1 -> . wildcard1
    (396) type_argument -> . reference_type
    (397) type_argument -> . wildcard
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (417) wildcard1 -> . ? >
    (418) wildcard1 -> . ? wildcard_bounds1
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (413) wildcard -> . ?
    (414) wildcard -> . ? wildcard_bounds
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    ?               shift and go to state 288
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    wildcard1                      shift and go to state 289
    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 291
    type_argument1                 shift and go to state 775
    reference_type                 shift and go to state 774
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    wildcard                       shift and go to state 296
    reference_type1                shift and go to state 293
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 88
    type_argument                  shift and go to state 776

state 555

    (401) reference_type1 -> class_or_interface < . type_argument_list2
    (386) generic_type -> class_or_interface < . >
    (391) type_arguments -> < . type_argument_list1
    (402) type_argument_list2 -> . type_argument2
    (403) type_argument_list2 -> . type_argument_list , type_argument2
    (392) type_argument_list1 -> . type_argument1
    (393) type_argument_list1 -> . type_argument_list , type_argument1
    (404) type_argument2 -> . reference_type2
    (405) type_argument2 -> . wildcard2
    (394) type_argument_list -> . type_argument
    (395) type_argument_list -> . type_argument_list , type_argument
    (398) type_argument1 -> . reference_type1
    (399) type_argument1 -> . wildcard1
    (406) reference_type2 -> . reference_type RSHIFT
    (407) reference_type2 -> . class_or_interface < type_argument_list3
    (421) wildcard2 -> . ? RSHIFT
    (422) wildcard2 -> . ? wildcard_bounds2
    (396) type_argument -> . reference_type
    (397) type_argument -> . wildcard
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (417) wildcard1 -> . ? >
    (418) wildcard1 -> . ? wildcard_bounds1
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (413) wildcard -> . ?
    (414) wildcard -> . ? wildcard_bounds
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    >               shift and go to state 632
    ?               shift and go to state 779
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    generic_type                   shift and go to state 284
    type_argument_list1            shift and go to state 285
    type_argument_list2            shift and go to state 777
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 778
    primitive_type                 shift and go to state 287
    wildcard2                      shift and go to state 780
    wildcard1                      shift and go to state 289
    type_argument_list             shift and go to state 781
    class_or_interface             shift and go to state 782
    type_argument1                 shift and go to state 292
    type_argument2                 shift and go to state 783
    reference_type1                shift and go to state 293
    reference_type2                shift and go to state 784
    type_argument                  shift and go to state 294
    name                           shift and go to state 295
    array_type                     shift and go to state 102
    wildcard                       shift and go to state 296

state 556

    (388) array_type -> name dims .

    RRSHIFT         reduce using rule 388 (array_type -> name dims .)
    RSHIFT          reduce using rule 388 (array_type -> name dims .)
    >               reduce using rule 388 (array_type -> name dims .)
    ,               reduce using rule 388 (array_type -> name dims .)
    NAME            reduce using rule 388 (array_type -> name dims .)
    |               reduce using rule 388 (array_type -> name dims .)
    &               reduce using rule 388 (array_type -> name dims .)
    INSTANCEOF      reduce using rule 388 (array_type -> name dims .)
    EQ              reduce using rule 388 (array_type -> name dims .)
    NEQ             reduce using rule 388 (array_type -> name dims .)
    ^               reduce using rule 388 (array_type -> name dims .)
    AND             reduce using rule 388 (array_type -> name dims .)
    ?               reduce using rule 388 (array_type -> name dims .)
    OR              reduce using rule 388 (array_type -> name dims .)
    )               reduce using rule 388 (array_type -> name dims .)
    }               reduce using rule 388 (array_type -> name dims .)
    ;               reduce using rule 388 (array_type -> name dims .)
    $end            reduce using rule 388 (array_type -> name dims .)
    :               reduce using rule 388 (array_type -> name dims .)
    ]               reduce using rule 388 (array_type -> name dims .)
    ELLIPSIS        reduce using rule 388 (array_type -> name dims .)


state 557

    (150) primary_no_new_array -> name dims . . CLASS

    CLASS           shift and go to state 785


state 558

    (330) array_access -> name [ expression . ]

    ]               shift and go to state 786


state 559

    (316) explicit_constructor_invocation -> name . type_arguments . SUPER ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> name . type_arguments . THIS ( argument_list_opt ) ;
    (222) method_invocation -> name . type_arguments . NAME ( argument_list_opt )

    SUPER           shift and go to state 788
    THIS            shift and go to state 787
    NAME            shift and go to state 789


state 560

    (344) qualified_name -> name . simple_name .

    .               reduce using rule 344 (qualified_name -> name . simple_name .)
    [               reduce using rule 344 (qualified_name -> name . simple_name .)
    PLUSPLUS        reduce using rule 344 (qualified_name -> name . simple_name .)
    MINUSMINUS      reduce using rule 344 (qualified_name -> name . simple_name .)
    ;               reduce using rule 344 (qualified_name -> name . simple_name .)
    *               reduce using rule 344 (qualified_name -> name . simple_name .)
    /               reduce using rule 344 (qualified_name -> name . simple_name .)
    %               reduce using rule 344 (qualified_name -> name . simple_name .)
    +               reduce using rule 344 (qualified_name -> name . simple_name .)
    -               reduce using rule 344 (qualified_name -> name . simple_name .)
    LSHIFT          reduce using rule 344 (qualified_name -> name . simple_name .)
    RSHIFT          reduce using rule 344 (qualified_name -> name . simple_name .)
    RRSHIFT         reduce using rule 344 (qualified_name -> name . simple_name .)
    >               reduce using rule 344 (qualified_name -> name . simple_name .)
    <               reduce using rule 344 (qualified_name -> name . simple_name .)
    GTEQ            reduce using rule 344 (qualified_name -> name . simple_name .)
    LTEQ            reduce using rule 344 (qualified_name -> name . simple_name .)
    INSTANCEOF      reduce using rule 344 (qualified_name -> name . simple_name .)
    EQ              reduce using rule 344 (qualified_name -> name . simple_name .)
    NEQ             reduce using rule 344 (qualified_name -> name . simple_name .)
    &               reduce using rule 344 (qualified_name -> name . simple_name .)
    ^               reduce using rule 344 (qualified_name -> name . simple_name .)
    |               reduce using rule 344 (qualified_name -> name . simple_name .)
    AND             reduce using rule 344 (qualified_name -> name . simple_name .)
    ?               reduce using rule 344 (qualified_name -> name . simple_name .)
    OR              reduce using rule 344 (qualified_name -> name . simple_name .)
    $end            reduce using rule 344 (qualified_name -> name . simple_name .)
    )               reduce using rule 344 (qualified_name -> name . simple_name .)
    :               reduce using rule 344 (qualified_name -> name . simple_name .)
    ]               reduce using rule 344 (qualified_name -> name . simple_name .)
    ,               reduce using rule 344 (qualified_name -> name . simple_name .)
    }               reduce using rule 344 (qualified_name -> name . simple_name .)
    =               reduce using rule 344 (qualified_name -> name . simple_name .)
    TIMES_ASSIGN    reduce using rule 344 (qualified_name -> name . simple_name .)
    DIVIDE_ASSIGN   reduce using rule 344 (qualified_name -> name . simple_name .)
    REMAINDER_ASSIGN reduce using rule 344 (qualified_name -> name . simple_name .)
    PLUS_ASSIGN     reduce using rule 344 (qualified_name -> name . simple_name .)
    MINUS_ASSIGN    reduce using rule 344 (qualified_name -> name . simple_name .)
    LSHIFT_ASSIGN   reduce using rule 344 (qualified_name -> name . simple_name .)
    RSHIFT_ASSIGN   reduce using rule 344 (qualified_name -> name . simple_name .)
    RRSHIFT_ASSIGN  reduce using rule 344 (qualified_name -> name . simple_name .)
    AND_ASSIGN      reduce using rule 344 (qualified_name -> name . simple_name .)
    OR_ASSIGN       reduce using rule 344 (qualified_name -> name . simple_name .)
    XOR_ASSIGN      reduce using rule 344 (qualified_name -> name . simple_name .)
    NAME            reduce using rule 344 (qualified_name -> name . simple_name .)
    (               reduce using rule 344 (qualified_name -> name . simple_name .)
    PACKAGE         reduce using rule 344 (qualified_name -> name . simple_name .)
    @               reduce using rule 344 (qualified_name -> name . simple_name .)
    PUBLIC          reduce using rule 344 (qualified_name -> name . simple_name .)
    PROTECTED       reduce using rule 344 (qualified_name -> name . simple_name .)
    PRIVATE         reduce using rule 344 (qualified_name -> name . simple_name .)
    STATIC          reduce using rule 344 (qualified_name -> name . simple_name .)
    ABSTRACT        reduce using rule 344 (qualified_name -> name . simple_name .)
    FINAL           reduce using rule 344 (qualified_name -> name . simple_name .)
    NATIVE          reduce using rule 344 (qualified_name -> name . simple_name .)
    SYNCHRONIZED    reduce using rule 344 (qualified_name -> name . simple_name .)
    TRANSIENT       reduce using rule 344 (qualified_name -> name . simple_name .)
    VOLATILE        reduce using rule 344 (qualified_name -> name . simple_name .)
    STRICTFP        reduce using rule 344 (qualified_name -> name . simple_name .)
    ENUM            reduce using rule 344 (qualified_name -> name . simple_name .)
    CLASS           reduce using rule 344 (qualified_name -> name . simple_name .)
    INTERFACE       reduce using rule 344 (qualified_name -> name . simple_name .)
    BOOLEAN         reduce using rule 344 (qualified_name -> name . simple_name .)
    VOID            reduce using rule 344 (qualified_name -> name . simple_name .)
    BYTE            reduce using rule 344 (qualified_name -> name . simple_name .)
    SHORT           reduce using rule 344 (qualified_name -> name . simple_name .)
    INT             reduce using rule 344 (qualified_name -> name . simple_name .)
    LONG            reduce using rule 344 (qualified_name -> name . simple_name .)
    CHAR            reduce using rule 344 (qualified_name -> name . simple_name .)
    FLOAT           reduce using rule 344 (qualified_name -> name . simple_name .)
    DOUBLE          reduce using rule 344 (qualified_name -> name . simple_name .)
    {               reduce using rule 344 (qualified_name -> name . simple_name .)
    IMPLEMENTS      reduce using rule 344 (qualified_name -> name . simple_name .)
    ELLIPSIS        reduce using rule 344 (qualified_name -> name . simple_name .)


state 561

    (314) explicit_constructor_invocation -> name . THIS . ( argument_list_opt ) ;
    (147) primary_no_new_array -> name . THIS .

    (               shift and go to state 790
    [               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    .               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    PLUSPLUS        reduce using rule 147 (primary_no_new_array -> name . THIS .)
    MINUSMINUS      reduce using rule 147 (primary_no_new_array -> name . THIS .)
    =               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    TIMES_ASSIGN    reduce using rule 147 (primary_no_new_array -> name . THIS .)
    DIVIDE_ASSIGN   reduce using rule 147 (primary_no_new_array -> name . THIS .)
    REMAINDER_ASSIGN reduce using rule 147 (primary_no_new_array -> name . THIS .)
    PLUS_ASSIGN     reduce using rule 147 (primary_no_new_array -> name . THIS .)
    MINUS_ASSIGN    reduce using rule 147 (primary_no_new_array -> name . THIS .)
    LSHIFT_ASSIGN   reduce using rule 147 (primary_no_new_array -> name . THIS .)
    RSHIFT_ASSIGN   reduce using rule 147 (primary_no_new_array -> name . THIS .)
    RRSHIFT_ASSIGN  reduce using rule 147 (primary_no_new_array -> name . THIS .)
    AND_ASSIGN      reduce using rule 147 (primary_no_new_array -> name . THIS .)
    OR_ASSIGN       reduce using rule 147 (primary_no_new_array -> name . THIS .)
    XOR_ASSIGN      reduce using rule 147 (primary_no_new_array -> name . THIS .)


state 562

    (312) explicit_constructor_invocation -> name . SUPER . ( argument_list_opt ) ;
    (148) primary_no_new_array -> name . SUPER .

    (               shift and go to state 791
    [               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    .               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    PLUSPLUS        reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    MINUSMINUS      reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    =               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    TIMES_ASSIGN    reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    DIVIDE_ASSIGN   reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    REMAINDER_ASSIGN reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    PLUS_ASSIGN     reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    MINUS_ASSIGN    reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    LSHIFT_ASSIGN   reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    RSHIFT_ASSIGN   reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    RRSHIFT_ASSIGN  reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    AND_ASSIGN      reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    OR_ASSIGN       reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    XOR_ASSIGN      reduce using rule 148 (primary_no_new_array -> name . SUPER .)


state 563

    (149) primary_no_new_array -> name . CLASS .

    [               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    .               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    PLUSPLUS        reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    MINUSMINUS      reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    ;               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    *               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    /               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    %               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    +               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    -               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    LSHIFT          reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    RSHIFT          reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    RRSHIFT         reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    >               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    <               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    GTEQ            reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    LTEQ            reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    INSTANCEOF      reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    EQ              reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    NEQ             reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    &               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    ^               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    |               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    AND             reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    ?               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    OR              reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    $end            reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    )               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    :               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    ]               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    ,               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    }               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    =               reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    TIMES_ASSIGN    reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    DIVIDE_ASSIGN   reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    REMAINDER_ASSIGN reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    PLUS_ASSIGN     reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    MINUS_ASSIGN    reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    LSHIFT_ASSIGN   reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    RSHIFT_ASSIGN   reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    RRSHIFT_ASSIGN  reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    AND_ASSIGN      reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    OR_ASSIGN       reduce using rule 149 (primary_no_new_array -> name . CLASS .)
    XOR_ASSIGN      reduce using rule 149 (primary_no_new_array -> name . CLASS .)


state 564

    (225) method_invocation -> name . NAME . ( argument_list_opt )
    (343) simple_name -> NAME .

    (               shift and go to state 792
    .               reduce using rule 343 (simple_name -> NAME .)
    [               reduce using rule 343 (simple_name -> NAME .)
    <               reduce using rule 343 (simple_name -> NAME .)
    NAME            reduce using rule 343 (simple_name -> NAME .)
    PLUSPLUS        reduce using rule 343 (simple_name -> NAME .)
    MINUSMINUS      reduce using rule 343 (simple_name -> NAME .)
    =               reduce using rule 343 (simple_name -> NAME .)
    TIMES_ASSIGN    reduce using rule 343 (simple_name -> NAME .)
    DIVIDE_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    REMAINDER_ASSIGN reduce using rule 343 (simple_name -> NAME .)
    PLUS_ASSIGN     reduce using rule 343 (simple_name -> NAME .)
    MINUS_ASSIGN    reduce using rule 343 (simple_name -> NAME .)
    LSHIFT_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    RSHIFT_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    RRSHIFT_ASSIGN  reduce using rule 343 (simple_name -> NAME .)
    AND_ASSIGN      reduce using rule 343 (simple_name -> NAME .)
    OR_ASSIGN       reduce using rule 343 (simple_name -> NAME .)
    XOR_ASSIGN      reduce using rule 343 (simple_name -> NAME .)
    *               reduce using rule 343 (simple_name -> NAME .)
    /               reduce using rule 343 (simple_name -> NAME .)
    %               reduce using rule 343 (simple_name -> NAME .)
    +               reduce using rule 343 (simple_name -> NAME .)
    -               reduce using rule 343 (simple_name -> NAME .)
    LSHIFT          reduce using rule 343 (simple_name -> NAME .)
    RSHIFT          reduce using rule 343 (simple_name -> NAME .)
    RRSHIFT         reduce using rule 343 (simple_name -> NAME .)
    >               reduce using rule 343 (simple_name -> NAME .)
    GTEQ            reduce using rule 343 (simple_name -> NAME .)
    LTEQ            reduce using rule 343 (simple_name -> NAME .)
    INSTANCEOF      reduce using rule 343 (simple_name -> NAME .)
    EQ              reduce using rule 343 (simple_name -> NAME .)
    NEQ             reduce using rule 343 (simple_name -> NAME .)
    &               reduce using rule 343 (simple_name -> NAME .)
    ^               reduce using rule 343 (simple_name -> NAME .)
    |               reduce using rule 343 (simple_name -> NAME .)
    AND             reduce using rule 343 (simple_name -> NAME .)
    ?               reduce using rule 343 (simple_name -> NAME .)
    OR              reduce using rule 343 (simple_name -> NAME .)
    $end            reduce using rule 343 (simple_name -> NAME .)
    ;               reduce using rule 343 (simple_name -> NAME .)
    )               reduce using rule 343 (simple_name -> NAME .)
    :               reduce using rule 343 (simple_name -> NAME .)
    ]               reduce using rule 343 (simple_name -> NAME .)
    ,               reduce using rule 343 (simple_name -> NAME .)
    }               reduce using rule 343 (simple_name -> NAME .)


state 565

    (307) explicit_constructor_invocation -> THIS ( argument_list_opt . ) ;

    )               shift and go to state 793


state 566

    (546) argument_list_opt -> argument_list .
    (549) argument_list -> argument_list . , expression

    )               reduce using rule 546 (argument_list_opt -> argument_list .)
    ,               shift and go to state 794


state 567

    (548) argument_list -> expression .

    ,               reduce using rule 548 (argument_list -> expression .)
    )               reduce using rule 548 (argument_list -> expression .)


state 568

    (547) argument_list_opt -> empty .

    )               reduce using rule 547 (argument_list_opt -> empty .)


state 569

    (281) return_statement -> RETURN expression_opt ; .

    IF              reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    WHILE           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    FOR             reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    {               reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    ASSERT          reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    ;               reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    SWITCH          reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    DO              reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    BREAK           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    CONTINUE        reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    RETURN          reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    SYNCHRONIZED    reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    THROW           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    TRY             reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    NAME            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    @               reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    BOOLEAN         reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    VOID            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    BYTE            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    SHORT           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    INT             reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    LONG            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    CHAR            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    FLOAT           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    DOUBLE          reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    PUBLIC          reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    PROTECTED       reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    PRIVATE         reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    STATIC          reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    ABSTRACT        reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    FINAL           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    NATIVE          reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    TRANSIENT       reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    VOLATILE        reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    STRICTFP        reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    THIS            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    SUPER           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    PLUSPLUS        reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    MINUSMINUS      reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    NEW             reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    <               reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    (               reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    NUM             reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    CHAR_LITERAL    reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    STRING_LITERAL  reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    TRUE            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    FALSE           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    NULL            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    ENUM            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    CLASS           reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    INTERFACE       reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    }               reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    CASE            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    DEFAULT         reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    $end            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)
    ELSE            reduce using rule 281 (return_statement -> RETURN expression_opt ; .)


state 570

    (282) synchronized_statement -> SYNCHRONIZED ( expression . ) block

    )               shift and go to state 795


state 571

    (310) explicit_constructor_invocation -> type_arguments THIS ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 796
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 572

    (309) explicit_constructor_invocation -> type_arguments SUPER ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 797
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 573

    (331) array_access -> primary_no_new_array [ expression . ]

    ]               shift and go to state 798


state 574

    (228) labeled_statement -> label : statement .

    $end            reduce using rule 228 (labeled_statement -> label : statement .)
    IF              reduce using rule 228 (labeled_statement -> label : statement .)
    WHILE           reduce using rule 228 (labeled_statement -> label : statement .)
    FOR             reduce using rule 228 (labeled_statement -> label : statement .)
    {               reduce using rule 228 (labeled_statement -> label : statement .)
    ASSERT          reduce using rule 228 (labeled_statement -> label : statement .)
    ;               reduce using rule 228 (labeled_statement -> label : statement .)
    SWITCH          reduce using rule 228 (labeled_statement -> label : statement .)
    DO              reduce using rule 228 (labeled_statement -> label : statement .)
    BREAK           reduce using rule 228 (labeled_statement -> label : statement .)
    CONTINUE        reduce using rule 228 (labeled_statement -> label : statement .)
    RETURN          reduce using rule 228 (labeled_statement -> label : statement .)
    SYNCHRONIZED    reduce using rule 228 (labeled_statement -> label : statement .)
    THROW           reduce using rule 228 (labeled_statement -> label : statement .)
    TRY             reduce using rule 228 (labeled_statement -> label : statement .)
    NAME            reduce using rule 228 (labeled_statement -> label : statement .)
    @               reduce using rule 228 (labeled_statement -> label : statement .)
    BOOLEAN         reduce using rule 228 (labeled_statement -> label : statement .)
    VOID            reduce using rule 228 (labeled_statement -> label : statement .)
    BYTE            reduce using rule 228 (labeled_statement -> label : statement .)
    SHORT           reduce using rule 228 (labeled_statement -> label : statement .)
    INT             reduce using rule 228 (labeled_statement -> label : statement .)
    LONG            reduce using rule 228 (labeled_statement -> label : statement .)
    CHAR            reduce using rule 228 (labeled_statement -> label : statement .)
    FLOAT           reduce using rule 228 (labeled_statement -> label : statement .)
    DOUBLE          reduce using rule 228 (labeled_statement -> label : statement .)
    PUBLIC          reduce using rule 228 (labeled_statement -> label : statement .)
    PROTECTED       reduce using rule 228 (labeled_statement -> label : statement .)
    PRIVATE         reduce using rule 228 (labeled_statement -> label : statement .)
    STATIC          reduce using rule 228 (labeled_statement -> label : statement .)
    ABSTRACT        reduce using rule 228 (labeled_statement -> label : statement .)
    FINAL           reduce using rule 228 (labeled_statement -> label : statement .)
    NATIVE          reduce using rule 228 (labeled_statement -> label : statement .)
    TRANSIENT       reduce using rule 228 (labeled_statement -> label : statement .)
    VOLATILE        reduce using rule 228 (labeled_statement -> label : statement .)
    STRICTFP        reduce using rule 228 (labeled_statement -> label : statement .)
    THIS            reduce using rule 228 (labeled_statement -> label : statement .)
    SUPER           reduce using rule 228 (labeled_statement -> label : statement .)
    PLUSPLUS        reduce using rule 228 (labeled_statement -> label : statement .)
    MINUSMINUS      reduce using rule 228 (labeled_statement -> label : statement .)
    NEW             reduce using rule 228 (labeled_statement -> label : statement .)
    <               reduce using rule 228 (labeled_statement -> label : statement .)
    (               reduce using rule 228 (labeled_statement -> label : statement .)
    NUM             reduce using rule 228 (labeled_statement -> label : statement .)
    CHAR_LITERAL    reduce using rule 228 (labeled_statement -> label : statement .)
    STRING_LITERAL  reduce using rule 228 (labeled_statement -> label : statement .)
    TRUE            reduce using rule 228 (labeled_statement -> label : statement .)
    FALSE           reduce using rule 228 (labeled_statement -> label : statement .)
    NULL            reduce using rule 228 (labeled_statement -> label : statement .)
    ENUM            reduce using rule 228 (labeled_statement -> label : statement .)
    CLASS           reduce using rule 228 (labeled_statement -> label : statement .)
    INTERFACE       reduce using rule 228 (labeled_statement -> label : statement .)
    }               reduce using rule 228 (labeled_statement -> label : statement .)
    CASE            reduce using rule 228 (labeled_statement -> label : statement .)
    DEFAULT         reduce using rule 228 (labeled_statement -> label : statement .)


state 575

    (242) statement_expression_list -> statement_expression .

    ,               reduce using rule 242 (statement_expression_list -> statement_expression .)
    )               reduce using rule 242 (statement_expression_list -> statement_expression .)
    ;               reduce using rule 242 (statement_expression_list -> statement_expression .)


state 576

    (388) array_type -> name . dims
    (383) class_or_interface -> name .
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (344) qualified_name -> name . . simple_name
    (128) postfix_expression -> name .
    (325) class_instance_creation_expression_name -> name . .
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (330) array_access -> name . [ expression ]
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    <               reduce using rule 383 (class_or_interface -> name .)
    NAME            reduce using rule 383 (class_or_interface -> name .)
    .               shift and go to state 799
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    =               reduce using rule 128 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 128 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    LSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT_ASSIGN  reduce using rule 128 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    [               shift and go to state 301

    dims                           shift and go to state 300
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 577

    (240) for_init -> statement_expression_list .
    (243) statement_expression_list -> statement_expression_list . , statement_expression

    ;               reduce using rule 240 (for_init -> statement_expression_list .)
    ,               shift and go to state 800


state 578

    (236) for_statement -> FOR ( for_init_opt . ; expression_opt ; for_update_opt ) statement

    ;               shift and go to state 801


state 579

    (223) method_invocation -> primary . . type_arguments NAME ( argument_list_opt )
    (226) method_invocation -> primary . . NAME ( argument_list_opt )
    (321) class_instance_creation_expression -> primary . . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . . NEW class_type ( argument_list_opt ) class_body_opt
    (127) postfix_expression -> primary .
    (328) field_access -> primary . . NAME

    .               shift and go to state 802
    PLUSPLUS        reduce using rule 127 (postfix_expression -> primary .)
    MINUSMINUS      reduce using rule 127 (postfix_expression -> primary .)
    =               reduce using rule 127 (postfix_expression -> primary .)
    TIMES_ASSIGN    reduce using rule 127 (postfix_expression -> primary .)
    DIVIDE_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    REMAINDER_ASSIGN reduce using rule 127 (postfix_expression -> primary .)
    PLUS_ASSIGN     reduce using rule 127 (postfix_expression -> primary .)
    MINUS_ASSIGN    reduce using rule 127 (postfix_expression -> primary .)
    LSHIFT_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    RSHIFT_ASSIGN   reduce using rule 127 (postfix_expression -> primary .)
    RRSHIFT_ASSIGN  reduce using rule 127 (postfix_expression -> primary .)
    AND_ASSIGN      reduce using rule 127 (postfix_expression -> primary .)
    OR_ASSIGN       reduce using rule 127 (postfix_expression -> primary .)
    XOR_ASSIGN      reduce using rule 127 (postfix_expression -> primary .)


state 580

    (238) for_init_opt -> for_init .

    ;               reduce using rule 238 (for_init_opt -> for_init .)


state 581

    (252) enhanced_for_statement_header_init -> FOR ( type . NAME dims_opt
    (176) local_variable_declaration -> type . variable_declarators
    (178) variable_declarators -> . variable_declarator
    (179) variable_declarators -> . variable_declarators , variable_declarator
    (180) variable_declarator -> . variable_declarator_id
    (181) variable_declarator -> . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 803

    variable_declarators           shift and go to state 344
    variable_declarator            shift and go to state 346
    variable_declarator_id         shift and go to state 347

state 582

    (239) for_init_opt -> empty .

    ;               reduce using rule 239 (for_init_opt -> empty .)


state 583

    (253) enhanced_for_statement_header_init -> FOR ( modifiers . type NAME dims_opt
    (354) modifiers -> modifiers . modifier
    (177) local_variable_declaration -> modifiers . type variable_declarators
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (588) annotation_name -> . @ name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    @               shift and go to state 402
    NAME            shift and go to state 212

    generic_type                   shift and go to state 58
    marker_annotation              shift and go to state 22
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 91
    primitive_type                 shift and go to state 340
    type                           shift and go to state 804
    class_or_interface             shift and go to state 144
    single_member_annotation       shift and go to state 18
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation                     shift and go to state 10
    annotation_name                shift and go to state 38
    name                           shift and go to state 342
    modifier                       shift and go to state 225

state 584

    (221) method_invocation -> NAME . ( argument_list_opt )
    (343) simple_name -> NAME .

    (               shift and go to state 343
    .               reduce using rule 343 (simple_name -> NAME .)
    [               reduce using rule 343 (simple_name -> NAME .)
    PLUSPLUS        reduce using rule 343 (simple_name -> NAME .)
    MINUSMINUS      reduce using rule 343 (simple_name -> NAME .)
    =               reduce using rule 343 (simple_name -> NAME .)
    TIMES_ASSIGN    reduce using rule 343 (simple_name -> NAME .)
    DIVIDE_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    REMAINDER_ASSIGN reduce using rule 343 (simple_name -> NAME .)
    PLUS_ASSIGN     reduce using rule 343 (simple_name -> NAME .)
    MINUS_ASSIGN    reduce using rule 343 (simple_name -> NAME .)
    LSHIFT_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    RSHIFT_ASSIGN   reduce using rule 343 (simple_name -> NAME .)
    RRSHIFT_ASSIGN  reduce using rule 343 (simple_name -> NAME .)
    AND_ASSIGN      reduce using rule 343 (simple_name -> NAME .)
    OR_ASSIGN       reduce using rule 343 (simple_name -> NAME .)
    XOR_ASSIGN      reduce using rule 343 (simple_name -> NAME .)
    <               reduce using rule 343 (simple_name -> NAME .)
    NAME            reduce using rule 343 (simple_name -> NAME .)


state 585

    (241) for_init -> local_variable_declaration .

    ;               reduce using rule 241 (for_init -> local_variable_declaration .)


state 586

    (224) method_invocation -> SUPER . . type_arguments NAME ( argument_list_opt )
    (227) method_invocation -> SUPER . . NAME ( argument_list_opt )
    (329) field_access -> SUPER . . NAME

    .               shift and go to state 358


state 587

    (160) cast_expression -> ( name . type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> ( name . type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> ( name . ) unary_expression_not_plus_minus
    (163) cast_expression -> ( name . dims ) unary_expression_not_plus_minus
    (145) primary_no_new_array -> ( name . )
    (344) qualified_name -> name . . simple_name
    (24) conditional_expression_not_name -> name . ? expression : conditional_expression
    (128) postfix_expression -> name .
    (29) conditional_or_expression_not_name -> name . OR conditional_and_expression
    (34) conditional_and_expression_not_name -> name . AND inclusive_or_expression
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (39) inclusive_or_expression_not_name -> name . | exclusive_or_expression
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (330) array_access -> name . [ expression ]
    (44) exclusive_or_expression_not_name -> name . ^ and_expression
    (325) class_instance_creation_expression_name -> name . .
    (49) and_expression_not_name -> name . & equality_expression
    (55) equality_expression_not_name -> name . EQ instanceof_expression
    (57) equality_expression_not_name -> name . NEQ instanceof_expression
    (61) instanceof_expression_not_name -> name . INSTANCEOF reference_type
    (70) relational_expression_not_name -> name . < shift_expression
    (72) relational_expression_not_name -> name . > shift_expression
    (74) relational_expression_not_name -> name . GTEQ shift_expression
    (76) relational_expression_not_name -> name . LTEQ shift_expression
    (83) shift_expression_not_name -> name . LSHIFT additive_expression
    (85) shift_expression_not_name -> name . RSHIFT additive_expression
    (87) shift_expression_not_name -> name . RRSHIFT additive_expression
    (93) additive_expression_not_name -> name . + multiplicative_expression
    (95) additive_expression_not_name -> name . - multiplicative_expression
    (102) multiplicative_expression_not_name -> name . * unary_expression
    (104) multiplicative_expression_not_name -> name . / unary_expression
    (106) multiplicative_expression_not_name -> name . % unary_expression
    (391) type_arguments -> . < type_argument_list1
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    )               shift and go to state 805
    .               shift and go to state 519
    ?               shift and go to state 520
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    =               reduce using rule 128 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 128 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    LSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT_ASSIGN  reduce using rule 128 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR              shift and go to state 524
    AND             shift and go to state 523
    |               shift and go to state 528
    [               shift and go to state 301
    ^               shift and go to state 510
    &               shift and go to state 514
    EQ              shift and go to state 525
    NEQ             shift and go to state 513
    INSTANCEOF      shift and go to state 522
    <               shift and go to state 640
    >               shift and go to state 521
    GTEQ            shift and go to state 507
    LTEQ            shift and go to state 526
    LSHIFT          shift and go to state 511
    RSHIFT          shift and go to state 506
    RRSHIFT         shift and go to state 527
    +               shift and go to state 516
    -               shift and go to state 508
    *               shift and go to state 517
    /               shift and go to state 518
    %               shift and go to state 512

    type_arguments                 shift and go to state 639
    one_dim_loop                   shift and go to state 237
    dims                           shift and go to state 642
    dims_loop                      shift and go to state 236

state 588

    (298) resource_specification -> ( resources . semi_opt )
    (302) resources -> resources . trailing_semicolon resource
    (299) semi_opt -> . ;
    (300) semi_opt -> . empty
    (303) trailing_semicolon -> . ;
    (623) empty -> .

    ;               shift and go to state 808
    )               reduce using rule 623 (empty -> .)

    semi_opt                       shift and go to state 806
    trailing_semicolon             shift and go to state 809
    empty                          shift and go to state 807

state 589

    (305) resource -> modifiers . type variable_declarator_id = variable_initializer
    (354) modifiers -> modifiers . modifier
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (588) annotation_name -> . @ name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    @               shift and go to state 402
    NAME            shift and go to state 212

    generic_type                   shift and go to state 58
    marker_annotation              shift and go to state 22
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 91
    primitive_type                 shift and go to state 340
    type                           shift and go to state 810
    class_or_interface             shift and go to state 144
    single_member_annotation       shift and go to state 18
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation                     shift and go to state 10
    annotation_name                shift and go to state 38
    name                           shift and go to state 342
    modifier                       shift and go to state 225

state 590

    (301) resources -> resource .

    ;               reduce using rule 301 (resources -> resource .)
    )               reduce using rule 301 (resources -> resource .)


state 591

    (304) resource -> type . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 345

    variable_declarator_id         shift and go to state 811

state 592

    (284) try_statement -> TRY try_block catches .
    (288) catches -> catches . catch_clause
    (289) catches_opt -> catches .
    (291) catch_clause -> . CATCH ( catch_formal_parameter ) block

    $end            reduce using rule 284 (try_statement -> TRY try_block catches .)
    IF              reduce using rule 284 (try_statement -> TRY try_block catches .)
    WHILE           reduce using rule 284 (try_statement -> TRY try_block catches .)
    FOR             reduce using rule 284 (try_statement -> TRY try_block catches .)
    {               reduce using rule 284 (try_statement -> TRY try_block catches .)
    ASSERT          reduce using rule 284 (try_statement -> TRY try_block catches .)
    ;               reduce using rule 284 (try_statement -> TRY try_block catches .)
    SWITCH          reduce using rule 284 (try_statement -> TRY try_block catches .)
    DO              reduce using rule 284 (try_statement -> TRY try_block catches .)
    BREAK           reduce using rule 284 (try_statement -> TRY try_block catches .)
    CONTINUE        reduce using rule 284 (try_statement -> TRY try_block catches .)
    RETURN          reduce using rule 284 (try_statement -> TRY try_block catches .)
    SYNCHRONIZED    reduce using rule 284 (try_statement -> TRY try_block catches .)
    THROW           reduce using rule 284 (try_statement -> TRY try_block catches .)
    TRY             reduce using rule 284 (try_statement -> TRY try_block catches .)
    NAME            reduce using rule 284 (try_statement -> TRY try_block catches .)
    @               reduce using rule 284 (try_statement -> TRY try_block catches .)
    BOOLEAN         reduce using rule 284 (try_statement -> TRY try_block catches .)
    VOID            reduce using rule 284 (try_statement -> TRY try_block catches .)
    BYTE            reduce using rule 284 (try_statement -> TRY try_block catches .)
    SHORT           reduce using rule 284 (try_statement -> TRY try_block catches .)
    INT             reduce using rule 284 (try_statement -> TRY try_block catches .)
    LONG            reduce using rule 284 (try_statement -> TRY try_block catches .)
    CHAR            reduce using rule 284 (try_statement -> TRY try_block catches .)
    FLOAT           reduce using rule 284 (try_statement -> TRY try_block catches .)
    DOUBLE          reduce using rule 284 (try_statement -> TRY try_block catches .)
    PUBLIC          reduce using rule 284 (try_statement -> TRY try_block catches .)
    PROTECTED       reduce using rule 284 (try_statement -> TRY try_block catches .)
    PRIVATE         reduce using rule 284 (try_statement -> TRY try_block catches .)
    STATIC          reduce using rule 284 (try_statement -> TRY try_block catches .)
    ABSTRACT        reduce using rule 284 (try_statement -> TRY try_block catches .)
    FINAL           reduce using rule 284 (try_statement -> TRY try_block catches .)
    NATIVE          reduce using rule 284 (try_statement -> TRY try_block catches .)
    TRANSIENT       reduce using rule 284 (try_statement -> TRY try_block catches .)
    VOLATILE        reduce using rule 284 (try_statement -> TRY try_block catches .)
    STRICTFP        reduce using rule 284 (try_statement -> TRY try_block catches .)
    THIS            reduce using rule 284 (try_statement -> TRY try_block catches .)
    SUPER           reduce using rule 284 (try_statement -> TRY try_block catches .)
    PLUSPLUS        reduce using rule 284 (try_statement -> TRY try_block catches .)
    MINUSMINUS      reduce using rule 284 (try_statement -> TRY try_block catches .)
    NEW             reduce using rule 284 (try_statement -> TRY try_block catches .)
    <               reduce using rule 284 (try_statement -> TRY try_block catches .)
    (               reduce using rule 284 (try_statement -> TRY try_block catches .)
    NUM             reduce using rule 284 (try_statement -> TRY try_block catches .)
    CHAR_LITERAL    reduce using rule 284 (try_statement -> TRY try_block catches .)
    STRING_LITERAL  reduce using rule 284 (try_statement -> TRY try_block catches .)
    TRUE            reduce using rule 284 (try_statement -> TRY try_block catches .)
    FALSE           reduce using rule 284 (try_statement -> TRY try_block catches .)
    NULL            reduce using rule 284 (try_statement -> TRY try_block catches .)
    ENUM            reduce using rule 284 (try_statement -> TRY try_block catches .)
    CLASS           reduce using rule 284 (try_statement -> TRY try_block catches .)
    INTERFACE       reduce using rule 284 (try_statement -> TRY try_block catches .)
    }               reduce using rule 284 (try_statement -> TRY try_block catches .)
    CASE            reduce using rule 284 (try_statement -> TRY try_block catches .)
    DEFAULT         reduce using rule 284 (try_statement -> TRY try_block catches .)
    ELSE            reduce using rule 284 (try_statement -> TRY try_block catches .)
    FINALLY         reduce using rule 289 (catches_opt -> catches .)
    CATCH           shift and go to state 594

    catch_clause                   shift and go to state 812

state 593

    (287) catches -> catch_clause .

    CATCH           reduce using rule 287 (catches -> catch_clause .)
    $end            reduce using rule 287 (catches -> catch_clause .)
    IF              reduce using rule 287 (catches -> catch_clause .)
    WHILE           reduce using rule 287 (catches -> catch_clause .)
    FOR             reduce using rule 287 (catches -> catch_clause .)
    {               reduce using rule 287 (catches -> catch_clause .)
    ASSERT          reduce using rule 287 (catches -> catch_clause .)
    ;               reduce using rule 287 (catches -> catch_clause .)
    SWITCH          reduce using rule 287 (catches -> catch_clause .)
    DO              reduce using rule 287 (catches -> catch_clause .)
    BREAK           reduce using rule 287 (catches -> catch_clause .)
    CONTINUE        reduce using rule 287 (catches -> catch_clause .)
    RETURN          reduce using rule 287 (catches -> catch_clause .)
    SYNCHRONIZED    reduce using rule 287 (catches -> catch_clause .)
    THROW           reduce using rule 287 (catches -> catch_clause .)
    TRY             reduce using rule 287 (catches -> catch_clause .)
    NAME            reduce using rule 287 (catches -> catch_clause .)
    @               reduce using rule 287 (catches -> catch_clause .)
    BOOLEAN         reduce using rule 287 (catches -> catch_clause .)
    VOID            reduce using rule 287 (catches -> catch_clause .)
    BYTE            reduce using rule 287 (catches -> catch_clause .)
    SHORT           reduce using rule 287 (catches -> catch_clause .)
    INT             reduce using rule 287 (catches -> catch_clause .)
    LONG            reduce using rule 287 (catches -> catch_clause .)
    CHAR            reduce using rule 287 (catches -> catch_clause .)
    FLOAT           reduce using rule 287 (catches -> catch_clause .)
    DOUBLE          reduce using rule 287 (catches -> catch_clause .)
    PUBLIC          reduce using rule 287 (catches -> catch_clause .)
    PROTECTED       reduce using rule 287 (catches -> catch_clause .)
    PRIVATE         reduce using rule 287 (catches -> catch_clause .)
    STATIC          reduce using rule 287 (catches -> catch_clause .)
    ABSTRACT        reduce using rule 287 (catches -> catch_clause .)
    FINAL           reduce using rule 287 (catches -> catch_clause .)
    NATIVE          reduce using rule 287 (catches -> catch_clause .)
    TRANSIENT       reduce using rule 287 (catches -> catch_clause .)
    VOLATILE        reduce using rule 287 (catches -> catch_clause .)
    STRICTFP        reduce using rule 287 (catches -> catch_clause .)
    THIS            reduce using rule 287 (catches -> catch_clause .)
    SUPER           reduce using rule 287 (catches -> catch_clause .)
    PLUSPLUS        reduce using rule 287 (catches -> catch_clause .)
    MINUSMINUS      reduce using rule 287 (catches -> catch_clause .)
    NEW             reduce using rule 287 (catches -> catch_clause .)
    <               reduce using rule 287 (catches -> catch_clause .)
    (               reduce using rule 287 (catches -> catch_clause .)
    NUM             reduce using rule 287 (catches -> catch_clause .)
    CHAR_LITERAL    reduce using rule 287 (catches -> catch_clause .)
    STRING_LITERAL  reduce using rule 287 (catches -> catch_clause .)
    TRUE            reduce using rule 287 (catches -> catch_clause .)
    FALSE           reduce using rule 287 (catches -> catch_clause .)
    NULL            reduce using rule 287 (catches -> catch_clause .)
    ENUM            reduce using rule 287 (catches -> catch_clause .)
    CLASS           reduce using rule 287 (catches -> catch_clause .)
    INTERFACE       reduce using rule 287 (catches -> catch_clause .)
    }               reduce using rule 287 (catches -> catch_clause .)
    CASE            reduce using rule 287 (catches -> catch_clause .)
    DEFAULT         reduce using rule 287 (catches -> catch_clause .)
    FINALLY         reduce using rule 287 (catches -> catch_clause .)
    ELSE            reduce using rule 287 (catches -> catch_clause .)


state 594

    (291) catch_clause -> CATCH . ( catch_formal_parameter ) block

    (               shift and go to state 813


state 595

    (285) try_statement -> TRY try_block catches_opt . finally
    (306) finally -> . FINALLY block

    FINALLY         shift and go to state 814

    finally                        shift and go to state 815

state 596

    (290) catches_opt -> empty .

    FINALLY         reduce using rule 290 (catches_opt -> empty .)
    $end            reduce using rule 290 (catches_opt -> empty .)
    IF              reduce using rule 290 (catches_opt -> empty .)
    WHILE           reduce using rule 290 (catches_opt -> empty .)
    FOR             reduce using rule 290 (catches_opt -> empty .)
    {               reduce using rule 290 (catches_opt -> empty .)
    ASSERT          reduce using rule 290 (catches_opt -> empty .)
    ;               reduce using rule 290 (catches_opt -> empty .)
    SWITCH          reduce using rule 290 (catches_opt -> empty .)
    DO              reduce using rule 290 (catches_opt -> empty .)
    BREAK           reduce using rule 290 (catches_opt -> empty .)
    CONTINUE        reduce using rule 290 (catches_opt -> empty .)
    RETURN          reduce using rule 290 (catches_opt -> empty .)
    SYNCHRONIZED    reduce using rule 290 (catches_opt -> empty .)
    THROW           reduce using rule 290 (catches_opt -> empty .)
    TRY             reduce using rule 290 (catches_opt -> empty .)
    NAME            reduce using rule 290 (catches_opt -> empty .)
    @               reduce using rule 290 (catches_opt -> empty .)
    BOOLEAN         reduce using rule 290 (catches_opt -> empty .)
    VOID            reduce using rule 290 (catches_opt -> empty .)
    BYTE            reduce using rule 290 (catches_opt -> empty .)
    SHORT           reduce using rule 290 (catches_opt -> empty .)
    INT             reduce using rule 290 (catches_opt -> empty .)
    LONG            reduce using rule 290 (catches_opt -> empty .)
    CHAR            reduce using rule 290 (catches_opt -> empty .)
    FLOAT           reduce using rule 290 (catches_opt -> empty .)
    DOUBLE          reduce using rule 290 (catches_opt -> empty .)
    PUBLIC          reduce using rule 290 (catches_opt -> empty .)
    PROTECTED       reduce using rule 290 (catches_opt -> empty .)
    PRIVATE         reduce using rule 290 (catches_opt -> empty .)
    STATIC          reduce using rule 290 (catches_opt -> empty .)
    ABSTRACT        reduce using rule 290 (catches_opt -> empty .)
    FINAL           reduce using rule 290 (catches_opt -> empty .)
    NATIVE          reduce using rule 290 (catches_opt -> empty .)
    TRANSIENT       reduce using rule 290 (catches_opt -> empty .)
    VOLATILE        reduce using rule 290 (catches_opt -> empty .)
    STRICTFP        reduce using rule 290 (catches_opt -> empty .)
    THIS            reduce using rule 290 (catches_opt -> empty .)
    SUPER           reduce using rule 290 (catches_opt -> empty .)
    PLUSPLUS        reduce using rule 290 (catches_opt -> empty .)
    MINUSMINUS      reduce using rule 290 (catches_opt -> empty .)
    NEW             reduce using rule 290 (catches_opt -> empty .)
    <               reduce using rule 290 (catches_opt -> empty .)
    (               reduce using rule 290 (catches_opt -> empty .)
    NUM             reduce using rule 290 (catches_opt -> empty .)
    CHAR_LITERAL    reduce using rule 290 (catches_opt -> empty .)
    STRING_LITERAL  reduce using rule 290 (catches_opt -> empty .)
    TRUE            reduce using rule 290 (catches_opt -> empty .)
    FALSE           reduce using rule 290 (catches_opt -> empty .)
    NULL            reduce using rule 290 (catches_opt -> empty .)
    ENUM            reduce using rule 290 (catches_opt -> empty .)
    CLASS           reduce using rule 290 (catches_opt -> empty .)
    INTERFACE       reduce using rule 290 (catches_opt -> empty .)
    }               reduce using rule 290 (catches_opt -> empty .)
    CASE            reduce using rule 290 (catches_opt -> empty .)
    DEFAULT         reduce using rule 290 (catches_opt -> empty .)
    ELSE            reduce using rule 290 (catches_opt -> empty .)


state 597

    (296) try_statement_with_resources -> TRY resource_specification try_block . catches_opt
    (297) try_statement_with_resources -> TRY resource_specification try_block . catches_opt finally
    (289) catches_opt -> . catches
    (290) catches_opt -> . empty
    (287) catches -> . catch_clause
    (288) catches -> . catches catch_clause
    (623) empty -> .
    (291) catch_clause -> . CATCH ( catch_formal_parameter ) block

    FINALLY         reduce using rule 623 (empty -> .)
    $end            reduce using rule 623 (empty -> .)
    IF              reduce using rule 623 (empty -> .)
    WHILE           reduce using rule 623 (empty -> .)
    FOR             reduce using rule 623 (empty -> .)
    {               reduce using rule 623 (empty -> .)
    ASSERT          reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    SWITCH          reduce using rule 623 (empty -> .)
    DO              reduce using rule 623 (empty -> .)
    BREAK           reduce using rule 623 (empty -> .)
    CONTINUE        reduce using rule 623 (empty -> .)
    RETURN          reduce using rule 623 (empty -> .)
    SYNCHRONIZED    reduce using rule 623 (empty -> .)
    THROW           reduce using rule 623 (empty -> .)
    TRY             reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    @               reduce using rule 623 (empty -> .)
    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    PUBLIC          reduce using rule 623 (empty -> .)
    PROTECTED       reduce using rule 623 (empty -> .)
    PRIVATE         reduce using rule 623 (empty -> .)
    STATIC          reduce using rule 623 (empty -> .)
    ABSTRACT        reduce using rule 623 (empty -> .)
    FINAL           reduce using rule 623 (empty -> .)
    NATIVE          reduce using rule 623 (empty -> .)
    TRANSIENT       reduce using rule 623 (empty -> .)
    VOLATILE        reduce using rule 623 (empty -> .)
    STRICTFP        reduce using rule 623 (empty -> .)
    THIS            reduce using rule 623 (empty -> .)
    SUPER           reduce using rule 623 (empty -> .)
    PLUSPLUS        reduce using rule 623 (empty -> .)
    MINUSMINUS      reduce using rule 623 (empty -> .)
    NEW             reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    (               reduce using rule 623 (empty -> .)
    NUM             reduce using rule 623 (empty -> .)
    CHAR_LITERAL    reduce using rule 623 (empty -> .)
    STRING_LITERAL  reduce using rule 623 (empty -> .)
    TRUE            reduce using rule 623 (empty -> .)
    FALSE           reduce using rule 623 (empty -> .)
    NULL            reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    }               reduce using rule 623 (empty -> .)
    CASE            reduce using rule 623 (empty -> .)
    DEFAULT         reduce using rule 623 (empty -> .)
    ELSE            reduce using rule 623 (empty -> .)
    CATCH           shift and go to state 594

    catches                        shift and go to state 816
    catch_clause                   shift and go to state 593
    catches_opt                    shift and go to state 817
    empty                          shift and go to state 596

state 598

    (332) array_access -> array_creation_with_array_initializer [ expression . ]

    ]               shift and go to state 818


state 599

    (280) continue_statement -> CONTINUE NAME ; .

    IF              reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    WHILE           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    FOR             reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    {               reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    ASSERT          reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    ;               reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    SWITCH          reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    DO              reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    BREAK           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    CONTINUE        reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    RETURN          reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    SYNCHRONIZED    reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    THROW           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    TRY             reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    NAME            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    @               reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    BOOLEAN         reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    VOID            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    BYTE            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    SHORT           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    INT             reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    LONG            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    CHAR            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    FLOAT           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    DOUBLE          reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    PUBLIC          reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    PROTECTED       reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    PRIVATE         reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    STATIC          reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    ABSTRACT        reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    FINAL           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    NATIVE          reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    TRANSIENT       reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    VOLATILE        reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    STRICTFP        reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    THIS            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    SUPER           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    PLUSPLUS        reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    MINUSMINUS      reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    NEW             reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    <               reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    (               reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    NUM             reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    CHAR_LITERAL    reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    STRING_LITERAL  reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    TRUE            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    FALSE           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    NULL            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    ENUM            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    CLASS           reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    INTERFACE       reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    }               reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    CASE            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    DEFAULT         reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    $end            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)
    ELSE            reduce using rule 280 (continue_statement -> CONTINUE NAME ; .)


state 600

    (251) enhanced_for_statement_header -> enhanced_for_statement_header_init : expression . )

    )               shift and go to state 819


state 601

    (164) block -> { block_statements_opt } .

    $end            reduce using rule 164 (block -> { block_statements_opt } .)
    IF              reduce using rule 164 (block -> { block_statements_opt } .)
    WHILE           reduce using rule 164 (block -> { block_statements_opt } .)
    FOR             reduce using rule 164 (block -> { block_statements_opt } .)
    {               reduce using rule 164 (block -> { block_statements_opt } .)
    ASSERT          reduce using rule 164 (block -> { block_statements_opt } .)
    ;               reduce using rule 164 (block -> { block_statements_opt } .)
    SWITCH          reduce using rule 164 (block -> { block_statements_opt } .)
    DO              reduce using rule 164 (block -> { block_statements_opt } .)
    BREAK           reduce using rule 164 (block -> { block_statements_opt } .)
    CONTINUE        reduce using rule 164 (block -> { block_statements_opt } .)
    RETURN          reduce using rule 164 (block -> { block_statements_opt } .)
    SYNCHRONIZED    reduce using rule 164 (block -> { block_statements_opt } .)
    THROW           reduce using rule 164 (block -> { block_statements_opt } .)
    TRY             reduce using rule 164 (block -> { block_statements_opt } .)
    NAME            reduce using rule 164 (block -> { block_statements_opt } .)
    @               reduce using rule 164 (block -> { block_statements_opt } .)
    BOOLEAN         reduce using rule 164 (block -> { block_statements_opt } .)
    VOID            reduce using rule 164 (block -> { block_statements_opt } .)
    BYTE            reduce using rule 164 (block -> { block_statements_opt } .)
    SHORT           reduce using rule 164 (block -> { block_statements_opt } .)
    INT             reduce using rule 164 (block -> { block_statements_opt } .)
    LONG            reduce using rule 164 (block -> { block_statements_opt } .)
    CHAR            reduce using rule 164 (block -> { block_statements_opt } .)
    FLOAT           reduce using rule 164 (block -> { block_statements_opt } .)
    DOUBLE          reduce using rule 164 (block -> { block_statements_opt } .)
    PUBLIC          reduce using rule 164 (block -> { block_statements_opt } .)
    PROTECTED       reduce using rule 164 (block -> { block_statements_opt } .)
    PRIVATE         reduce using rule 164 (block -> { block_statements_opt } .)
    STATIC          reduce using rule 164 (block -> { block_statements_opt } .)
    ABSTRACT        reduce using rule 164 (block -> { block_statements_opt } .)
    FINAL           reduce using rule 164 (block -> { block_statements_opt } .)
    NATIVE          reduce using rule 164 (block -> { block_statements_opt } .)
    TRANSIENT       reduce using rule 164 (block -> { block_statements_opt } .)
    VOLATILE        reduce using rule 164 (block -> { block_statements_opt } .)
    STRICTFP        reduce using rule 164 (block -> { block_statements_opt } .)
    THIS            reduce using rule 164 (block -> { block_statements_opt } .)
    SUPER           reduce using rule 164 (block -> { block_statements_opt } .)
    PLUSPLUS        reduce using rule 164 (block -> { block_statements_opt } .)
    MINUSMINUS      reduce using rule 164 (block -> { block_statements_opt } .)
    NEW             reduce using rule 164 (block -> { block_statements_opt } .)
    <               reduce using rule 164 (block -> { block_statements_opt } .)
    (               reduce using rule 164 (block -> { block_statements_opt } .)
    NUM             reduce using rule 164 (block -> { block_statements_opt } .)
    CHAR_LITERAL    reduce using rule 164 (block -> { block_statements_opt } .)
    STRING_LITERAL  reduce using rule 164 (block -> { block_statements_opt } .)
    TRUE            reduce using rule 164 (block -> { block_statements_opt } .)
    FALSE           reduce using rule 164 (block -> { block_statements_opt } .)
    NULL            reduce using rule 164 (block -> { block_statements_opt } .)
    ENUM            reduce using rule 164 (block -> { block_statements_opt } .)
    CLASS           reduce using rule 164 (block -> { block_statements_opt } .)
    INTERFACE       reduce using rule 164 (block -> { block_statements_opt } .)
    }               reduce using rule 164 (block -> { block_statements_opt } .)
    CASE            reduce using rule 164 (block -> { block_statements_opt } .)
    DEFAULT         reduce using rule 164 (block -> { block_statements_opt } .)
    ELSE            reduce using rule 164 (block -> { block_statements_opt } .)
    CATCH           reduce using rule 164 (block -> { block_statements_opt } .)
    FINALLY         reduce using rule 164 (block -> { block_statements_opt } .)


state 602

    (168) block_statements -> block_statements block_statement .

    IF              reduce using rule 168 (block_statements -> block_statements block_statement .)
    WHILE           reduce using rule 168 (block_statements -> block_statements block_statement .)
    FOR             reduce using rule 168 (block_statements -> block_statements block_statement .)
    {               reduce using rule 168 (block_statements -> block_statements block_statement .)
    ASSERT          reduce using rule 168 (block_statements -> block_statements block_statement .)
    ;               reduce using rule 168 (block_statements -> block_statements block_statement .)
    SWITCH          reduce using rule 168 (block_statements -> block_statements block_statement .)
    DO              reduce using rule 168 (block_statements -> block_statements block_statement .)
    BREAK           reduce using rule 168 (block_statements -> block_statements block_statement .)
    CONTINUE        reduce using rule 168 (block_statements -> block_statements block_statement .)
    RETURN          reduce using rule 168 (block_statements -> block_statements block_statement .)
    SYNCHRONIZED    reduce using rule 168 (block_statements -> block_statements block_statement .)
    THROW           reduce using rule 168 (block_statements -> block_statements block_statement .)
    TRY             reduce using rule 168 (block_statements -> block_statements block_statement .)
    NAME            reduce using rule 168 (block_statements -> block_statements block_statement .)
    @               reduce using rule 168 (block_statements -> block_statements block_statement .)
    BOOLEAN         reduce using rule 168 (block_statements -> block_statements block_statement .)
    VOID            reduce using rule 168 (block_statements -> block_statements block_statement .)
    BYTE            reduce using rule 168 (block_statements -> block_statements block_statement .)
    SHORT           reduce using rule 168 (block_statements -> block_statements block_statement .)
    INT             reduce using rule 168 (block_statements -> block_statements block_statement .)
    LONG            reduce using rule 168 (block_statements -> block_statements block_statement .)
    CHAR            reduce using rule 168 (block_statements -> block_statements block_statement .)
    FLOAT           reduce using rule 168 (block_statements -> block_statements block_statement .)
    DOUBLE          reduce using rule 168 (block_statements -> block_statements block_statement .)
    PUBLIC          reduce using rule 168 (block_statements -> block_statements block_statement .)
    PROTECTED       reduce using rule 168 (block_statements -> block_statements block_statement .)
    PRIVATE         reduce using rule 168 (block_statements -> block_statements block_statement .)
    STATIC          reduce using rule 168 (block_statements -> block_statements block_statement .)
    ABSTRACT        reduce using rule 168 (block_statements -> block_statements block_statement .)
    FINAL           reduce using rule 168 (block_statements -> block_statements block_statement .)
    NATIVE          reduce using rule 168 (block_statements -> block_statements block_statement .)
    TRANSIENT       reduce using rule 168 (block_statements -> block_statements block_statement .)
    VOLATILE        reduce using rule 168 (block_statements -> block_statements block_statement .)
    STRICTFP        reduce using rule 168 (block_statements -> block_statements block_statement .)
    THIS            reduce using rule 168 (block_statements -> block_statements block_statement .)
    SUPER           reduce using rule 168 (block_statements -> block_statements block_statement .)
    PLUSPLUS        reduce using rule 168 (block_statements -> block_statements block_statement .)
    MINUSMINUS      reduce using rule 168 (block_statements -> block_statements block_statement .)
    NEW             reduce using rule 168 (block_statements -> block_statements block_statement .)
    <               reduce using rule 168 (block_statements -> block_statements block_statement .)
    (               reduce using rule 168 (block_statements -> block_statements block_statement .)
    NUM             reduce using rule 168 (block_statements -> block_statements block_statement .)
    CHAR_LITERAL    reduce using rule 168 (block_statements -> block_statements block_statement .)
    STRING_LITERAL  reduce using rule 168 (block_statements -> block_statements block_statement .)
    TRUE            reduce using rule 168 (block_statements -> block_statements block_statement .)
    FALSE           reduce using rule 168 (block_statements -> block_statements block_statement .)
    NULL            reduce using rule 168 (block_statements -> block_statements block_statement .)
    ENUM            reduce using rule 168 (block_statements -> block_statements block_statement .)
    CLASS           reduce using rule 168 (block_statements -> block_statements block_statement .)
    INTERFACE       reduce using rule 168 (block_statements -> block_statements block_statement .)
    }               reduce using rule 168 (block_statements -> block_statements block_statement .)
    CASE            reduce using rule 168 (block_statements -> block_statements block_statement .)
    DEFAULT         reduce using rule 168 (block_statements -> block_statements block_statement .)


state 603

    (226) method_invocation -> primary . NAME . ( argument_list_opt )
    (328) field_access -> primary . NAME .

    (               shift and go to state 820
    [               reduce using rule 328 (field_access -> primary . NAME .)
    .               reduce using rule 328 (field_access -> primary . NAME .)
    PLUSPLUS        reduce using rule 328 (field_access -> primary . NAME .)
    MINUSMINUS      reduce using rule 328 (field_access -> primary . NAME .)
    =               reduce using rule 328 (field_access -> primary . NAME .)
    TIMES_ASSIGN    reduce using rule 328 (field_access -> primary . NAME .)
    DIVIDE_ASSIGN   reduce using rule 328 (field_access -> primary . NAME .)
    REMAINDER_ASSIGN reduce using rule 328 (field_access -> primary . NAME .)
    PLUS_ASSIGN     reduce using rule 328 (field_access -> primary . NAME .)
    MINUS_ASSIGN    reduce using rule 328 (field_access -> primary . NAME .)
    LSHIFT_ASSIGN   reduce using rule 328 (field_access -> primary . NAME .)
    RSHIFT_ASSIGN   reduce using rule 328 (field_access -> primary . NAME .)
    RRSHIFT_ASSIGN  reduce using rule 328 (field_access -> primary . NAME .)
    AND_ASSIGN      reduce using rule 328 (field_access -> primary . NAME .)
    OR_ASSIGN       reduce using rule 328 (field_access -> primary . NAME .)
    XOR_ASSIGN      reduce using rule 328 (field_access -> primary . NAME .)


state 604

    (315) explicit_constructor_invocation -> primary . type_arguments . SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> primary . type_arguments . THIS ( argument_list_opt ) ;
    (223) method_invocation -> primary . type_arguments . NAME ( argument_list_opt )

    SUPER           shift and go to state 823
    THIS            shift and go to state 822
    NAME            shift and go to state 821


state 605

    (313) explicit_constructor_invocation -> primary . THIS . ( argument_list_opt ) ;

    (               shift and go to state 824


state 606

    (321) class_instance_creation_expression -> primary . NEW . type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . NEW . class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (382) class_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    <               shift and go to state 67
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type                     shift and go to state 825
    class_or_interface             shift and go to state 144
    type_arguments                 shift and go to state 826
    generic_type                   shift and go to state 331
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 394
    name                           shift and go to state 335

state 607

    (311) explicit_constructor_invocation -> primary . SUPER . ( argument_list_opt ) ;

    (               shift and go to state 827


state 608

    (234) while_statement -> WHILE ( expression . ) statement

    )               shift and go to state 828


state 609

    (319) class_instance_creation_expression -> NEW type_arguments class_type . ( argument_list_opt ) class_body_opt

    (               shift and go to state 829


state 610

    (384) class_or_interface -> generic_type . . name
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 830
    simple_name                    shift and go to state 64

state 611

    (334) array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs . array_initializer
    (340) array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .
    (336) dim_with_or_without_exprs -> dim_with_or_without_exprs . dim_with_or_without_expr
    (216) array_initializer -> . { comma_opt }
    (217) array_initializer -> . { variable_initializers }
    (218) array_initializer -> . { variable_initializers , }
    (337) dim_with_or_without_expr -> . [ expression ]
    (338) dim_with_or_without_expr -> . [ ]

    .               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    PLUSPLUS        reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    MINUSMINUS      reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    =               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    TIMES_ASSIGN    reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    DIVIDE_ASSIGN   reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    REMAINDER_ASSIGN reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    PLUS_ASSIGN     reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    MINUS_ASSIGN    reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    LSHIFT_ASSIGN   reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    RSHIFT_ASSIGN   reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    RRSHIFT_ASSIGN  reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    AND_ASSIGN      reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    OR_ASSIGN       reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    XOR_ASSIGN      reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    *               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    /               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    %               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    +               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    -               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    LSHIFT          reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    RSHIFT          reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    RRSHIFT         reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    >               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    <               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    GTEQ            reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    LTEQ            reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    INSTANCEOF      reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    EQ              reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    NEQ             reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    &               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    ^               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    |               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    AND             reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    ?               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    OR              reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    ,               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    )               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    }               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    ;               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    $end            reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    :               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    ]               reduce using rule 340 (array_creation_without_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs .)
    {               shift and go to state 832
    [               shift and go to state 613

    dim_with_or_without_expr       shift and go to state 831
    array_initializer              shift and go to state 833

state 612

    (335) dim_with_or_without_exprs -> dim_with_or_without_expr .

    {               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    [               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    .               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    PLUSPLUS        reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    MINUSMINUS      reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    =               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    TIMES_ASSIGN    reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    DIVIDE_ASSIGN   reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    REMAINDER_ASSIGN reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    PLUS_ASSIGN     reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    MINUS_ASSIGN    reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    LSHIFT_ASSIGN   reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    RSHIFT_ASSIGN   reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    RRSHIFT_ASSIGN  reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    AND_ASSIGN      reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    OR_ASSIGN       reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    XOR_ASSIGN      reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    *               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    /               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    %               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    +               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    -               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    LSHIFT          reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    RSHIFT          reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    RRSHIFT         reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    >               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    <               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    GTEQ            reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    LTEQ            reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    INSTANCEOF      reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    EQ              reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    NEQ             reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    &               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    ^               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    |               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    AND             reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    ?               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    OR              reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    $end            reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    )               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    ;               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    :               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    ]               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    ,               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)
    }               reduce using rule 335 (dim_with_or_without_exprs -> dim_with_or_without_expr .)


state 613

    (337) dim_with_or_without_expr -> [ . expression ]
    (338) dim_with_or_without_expr -> [ . ]
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    ]               shift and go to state 835
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 834
    conditional_and_expression     shift and go to state 161

state 614

    (333) array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs . array_initializer
    (339) array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .
    (336) dim_with_or_without_exprs -> dim_with_or_without_exprs . dim_with_or_without_expr
    (216) array_initializer -> . { comma_opt }
    (217) array_initializer -> . { variable_initializers }
    (218) array_initializer -> . { variable_initializers , }
    (337) dim_with_or_without_expr -> . [ expression ]
    (338) dim_with_or_without_expr -> . [ ]

    .               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    PLUSPLUS        reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    MINUSMINUS      reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    =               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    TIMES_ASSIGN    reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    DIVIDE_ASSIGN   reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    REMAINDER_ASSIGN reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    PLUS_ASSIGN     reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    MINUS_ASSIGN    reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    LSHIFT_ASSIGN   reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    RSHIFT_ASSIGN   reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    RRSHIFT_ASSIGN  reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    AND_ASSIGN      reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    OR_ASSIGN       reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    XOR_ASSIGN      reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    *               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    /               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    %               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    +               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    -               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    LSHIFT          reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    RSHIFT          reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    RRSHIFT         reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    >               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    <               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    GTEQ            reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    LTEQ            reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    INSTANCEOF      reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    EQ              reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    NEQ             reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    &               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    ^               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    |               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    AND             reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    ?               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    OR              reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    ,               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    )               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    }               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    ;               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    $end            reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    :               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    ]               reduce using rule 339 (array_creation_without_array_initializer -> NEW primitive_type dim_with_or_without_exprs .)
    {               shift and go to state 832
    [               shift and go to state 613

    dim_with_or_without_expr       shift and go to state 831
    array_initializer              shift and go to state 836

state 615

    (320) class_instance_creation_expression -> NEW class_type ( . argument_list_opt ) class_body_opt
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    assignment_expression          shift and go to state 186
    argument_list_opt              shift and go to state 837
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 616

    (152) primary_no_new_array -> primitive_type . CLASS .

    [               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    .               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    PLUSPLUS        reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    MINUSMINUS      reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    ;               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    *               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    /               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    %               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    +               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    -               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    LSHIFT          reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    RSHIFT          reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    RRSHIFT         reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    >               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    <               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    GTEQ            reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    LTEQ            reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    INSTANCEOF      reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    EQ              reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    NEQ             reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    &               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    ^               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    |               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    AND             reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    ?               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    OR              reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    $end            reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    )               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    :               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    ]               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    ,               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    }               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    =               reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    TIMES_ASSIGN    reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    DIVIDE_ASSIGN   reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    REMAINDER_ASSIGN reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    PLUS_ASSIGN     reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    MINUS_ASSIGN    reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    LSHIFT_ASSIGN   reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    RSHIFT_ASSIGN   reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    RRSHIFT_ASSIGN  reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    AND_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    OR_ASSIGN       reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)
    XOR_ASSIGN      reduce using rule 152 (primary_no_new_array -> primitive_type . CLASS .)


state 617

    (151) primary_no_new_array -> primitive_type dims . . CLASS

    CLASS           shift and go to state 838


state 618

    (263) switch_statement -> SWITCH ( expression . ) switch_block

    )               shift and go to state 839


state 619

    (323) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type . ( argument_list_opt ) class_body_opt

    (               shift and go to state 840


state 620

    (324) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments . class_type ( argument_list_opt ) class_body_opt
    (382) class_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type                     shift and go to state 841
    class_or_interface             shift and go to state 144
    generic_type                   shift and go to state 331
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 394
    name                           shift and go to state 335

state 621

    (177) local_variable_declaration -> modifiers type variable_declarators .
    (179) variable_declarators -> variable_declarators . , variable_declarator

    ;               reduce using rule 177 (local_variable_declaration -> modifiers type variable_declarators .)
    ,               shift and go to state 623


state 622

    (221) method_invocation -> NAME ( argument_list_opt . )

    )               shift and go to state 842


state 623

    (179) variable_declarators -> variable_declarators , . variable_declarator
    (180) variable_declarator -> . variable_declarator_id
    (181) variable_declarator -> . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 345

    variable_declarator_id         shift and go to state 347
    variable_declarator            shift and go to state 843

state 624

    (182) variable_declarator_id -> NAME dims_opt .

    =               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)
    ,               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)
    )               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)
    ;               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)


state 625

    (153) dims_opt -> dims .

    :               reduce using rule 153 (dims_opt -> dims .)
    =               reduce using rule 153 (dims_opt -> dims .)
    ,               reduce using rule 153 (dims_opt -> dims .)
    ;               reduce using rule 153 (dims_opt -> dims .)
    DEFAULT         reduce using rule 153 (dims_opt -> dims .)
    )               reduce using rule 153 (dims_opt -> dims .)
    THROWS          reduce using rule 153 (dims_opt -> dims .)
    {               reduce using rule 153 (dims_opt -> dims .)


state 626

    (154) dims_opt -> empty .

    :               reduce using rule 154 (dims_opt -> empty .)
    =               reduce using rule 154 (dims_opt -> empty .)
    ,               reduce using rule 154 (dims_opt -> empty .)
    ;               reduce using rule 154 (dims_opt -> empty .)
    )               reduce using rule 154 (dims_opt -> empty .)
    DEFAULT         reduce using rule 154 (dims_opt -> empty .)
    THROWS          reduce using rule 154 (dims_opt -> empty .)
    {               reduce using rule 154 (dims_opt -> empty .)


state 627

    (181) variable_declarator -> variable_declarator_id = . variable_initializer
    (183) variable_initializer -> . expression
    (184) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (216) array_initializer -> . { comma_opt }
    (217) array_initializer -> . { variable_initializers }
    (218) array_initializer -> . { variable_initializers , }
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    {               shift and go to state 832
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    cast_expression                shift and go to state 177
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    variable_initializer           shift and go to state 845
    post_increment_expression      shift and go to state 159
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    array_initializer              shift and go to state 846
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 844
    conditional_and_expression     shift and go to state 161

state 628

    (278) break_statement -> BREAK NAME ; .

    $end            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    IF              reduce using rule 278 (break_statement -> BREAK NAME ; .)
    WHILE           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    FOR             reduce using rule 278 (break_statement -> BREAK NAME ; .)
    {               reduce using rule 278 (break_statement -> BREAK NAME ; .)
    ASSERT          reduce using rule 278 (break_statement -> BREAK NAME ; .)
    ;               reduce using rule 278 (break_statement -> BREAK NAME ; .)
    SWITCH          reduce using rule 278 (break_statement -> BREAK NAME ; .)
    DO              reduce using rule 278 (break_statement -> BREAK NAME ; .)
    BREAK           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    CONTINUE        reduce using rule 278 (break_statement -> BREAK NAME ; .)
    RETURN          reduce using rule 278 (break_statement -> BREAK NAME ; .)
    SYNCHRONIZED    reduce using rule 278 (break_statement -> BREAK NAME ; .)
    THROW           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    TRY             reduce using rule 278 (break_statement -> BREAK NAME ; .)
    NAME            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    @               reduce using rule 278 (break_statement -> BREAK NAME ; .)
    BOOLEAN         reduce using rule 278 (break_statement -> BREAK NAME ; .)
    VOID            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    BYTE            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    SHORT           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    INT             reduce using rule 278 (break_statement -> BREAK NAME ; .)
    LONG            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    CHAR            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    FLOAT           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    DOUBLE          reduce using rule 278 (break_statement -> BREAK NAME ; .)
    PUBLIC          reduce using rule 278 (break_statement -> BREAK NAME ; .)
    PROTECTED       reduce using rule 278 (break_statement -> BREAK NAME ; .)
    PRIVATE         reduce using rule 278 (break_statement -> BREAK NAME ; .)
    STATIC          reduce using rule 278 (break_statement -> BREAK NAME ; .)
    ABSTRACT        reduce using rule 278 (break_statement -> BREAK NAME ; .)
    FINAL           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    NATIVE          reduce using rule 278 (break_statement -> BREAK NAME ; .)
    TRANSIENT       reduce using rule 278 (break_statement -> BREAK NAME ; .)
    VOLATILE        reduce using rule 278 (break_statement -> BREAK NAME ; .)
    STRICTFP        reduce using rule 278 (break_statement -> BREAK NAME ; .)
    THIS            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    SUPER           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    PLUSPLUS        reduce using rule 278 (break_statement -> BREAK NAME ; .)
    MINUSMINUS      reduce using rule 278 (break_statement -> BREAK NAME ; .)
    NEW             reduce using rule 278 (break_statement -> BREAK NAME ; .)
    <               reduce using rule 278 (break_statement -> BREAK NAME ; .)
    (               reduce using rule 278 (break_statement -> BREAK NAME ; .)
    NUM             reduce using rule 278 (break_statement -> BREAK NAME ; .)
    CHAR_LITERAL    reduce using rule 278 (break_statement -> BREAK NAME ; .)
    STRING_LITERAL  reduce using rule 278 (break_statement -> BREAK NAME ; .)
    TRUE            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    FALSE           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    NULL            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    ENUM            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    CLASS           reduce using rule 278 (break_statement -> BREAK NAME ; .)
    INTERFACE       reduce using rule 278 (break_statement -> BREAK NAME ; .)
    }               reduce using rule 278 (break_statement -> BREAK NAME ; .)
    CASE            reduce using rule 278 (break_statement -> BREAK NAME ; .)
    DEFAULT         reduce using rule 278 (break_statement -> BREAK NAME ; .)
    ELSE            reduce using rule 278 (break_statement -> BREAK NAME ; .)


state 629

    (276) do_statement -> DO statement WHILE . ( expression ) ;

    (               shift and go to state 847


state 630

    (260) assert_statement -> ASSERT expression ; .

    $end            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    IF              reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    WHILE           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    FOR             reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    {               reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    ASSERT          reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    ;               reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    SWITCH          reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    DO              reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    BREAK           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    CONTINUE        reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    RETURN          reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    SYNCHRONIZED    reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    THROW           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    TRY             reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    NAME            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    @               reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    BOOLEAN         reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    VOID            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    BYTE            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    SHORT           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    INT             reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    LONG            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    CHAR            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    FLOAT           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    DOUBLE          reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    PUBLIC          reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    PROTECTED       reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    PRIVATE         reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    STATIC          reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    ABSTRACT        reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    FINAL           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    NATIVE          reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    TRANSIENT       reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    VOLATILE        reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    STRICTFP        reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    THIS            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    SUPER           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    PLUSPLUS        reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    MINUSMINUS      reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    NEW             reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    <               reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    (               reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    NUM             reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    CHAR_LITERAL    reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    STRING_LITERAL  reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    TRUE            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    FALSE           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    NULL            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    ENUM            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    CLASS           reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    INTERFACE       reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    }               reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    CASE            reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    DEFAULT         reduce using rule 260 (assert_statement -> ASSERT expression ; .)
    ELSE            reduce using rule 260 (assert_statement -> ASSERT expression ; .)


state 631

    (261) assert_statement -> ASSERT expression : . expression ;
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 848
    conditional_and_expression     shift and go to state 161

state 632

    (386) generic_type -> class_or_interface < > .

    .               reduce using rule 386 (generic_type -> class_or_interface < > .)
    [               reduce using rule 386 (generic_type -> class_or_interface < > .)
    NAME            reduce using rule 386 (generic_type -> class_or_interface < > .)
    >               reduce using rule 386 (generic_type -> class_or_interface < > .)
    ,               reduce using rule 386 (generic_type -> class_or_interface < > .)
    (               reduce using rule 386 (generic_type -> class_or_interface < > .)
    INSTANCEOF      reduce using rule 386 (generic_type -> class_or_interface < > .)
    EQ              reduce using rule 386 (generic_type -> class_or_interface < > .)
    NEQ             reduce using rule 386 (generic_type -> class_or_interface < > .)
    &               reduce using rule 386 (generic_type -> class_or_interface < > .)
    ^               reduce using rule 386 (generic_type -> class_or_interface < > .)
    |               reduce using rule 386 (generic_type -> class_or_interface < > .)
    AND             reduce using rule 386 (generic_type -> class_or_interface < > .)
    ?               reduce using rule 386 (generic_type -> class_or_interface < > .)
    OR              reduce using rule 386 (generic_type -> class_or_interface < > .)
    $end            reduce using rule 386 (generic_type -> class_or_interface < > .)
    ;               reduce using rule 386 (generic_type -> class_or_interface < > .)
    :               reduce using rule 386 (generic_type -> class_or_interface < > .)
    )               reduce using rule 386 (generic_type -> class_or_interface < > .)
    ]               reduce using rule 386 (generic_type -> class_or_interface < > .)
    }               reduce using rule 386 (generic_type -> class_or_interface < > .)
    {               reduce using rule 386 (generic_type -> class_or_interface < > .)
    RSHIFT          reduce using rule 386 (generic_type -> class_or_interface < > .)
    RRSHIFT         reduce using rule 386 (generic_type -> class_or_interface < > .)
    IMPLEMENTS      reduce using rule 386 (generic_type -> class_or_interface < > .)
    ELLIPSIS        reduce using rule 386 (generic_type -> class_or_interface < > .)


state 633

    (231) if_then_statement -> IF ( expression . ) statement
    (232) if_then_else_statement -> IF ( expression . ) statement_no_short_if ELSE statement

    )               shift and go to state 849


state 634

    (308) explicit_constructor_invocation -> SUPER ( argument_list_opt . ) ;

    )               shift and go to state 850


state 635

    (227) method_invocation -> SUPER . NAME . ( argument_list_opt )
    (329) field_access -> SUPER . NAME .

    (               shift and go to state 851
    [               reduce using rule 329 (field_access -> SUPER . NAME .)
    .               reduce using rule 329 (field_access -> SUPER . NAME .)
    PLUSPLUS        reduce using rule 329 (field_access -> SUPER . NAME .)
    MINUSMINUS      reduce using rule 329 (field_access -> SUPER . NAME .)
    =               reduce using rule 329 (field_access -> SUPER . NAME .)
    TIMES_ASSIGN    reduce using rule 329 (field_access -> SUPER . NAME .)
    DIVIDE_ASSIGN   reduce using rule 329 (field_access -> SUPER . NAME .)
    REMAINDER_ASSIGN reduce using rule 329 (field_access -> SUPER . NAME .)
    PLUS_ASSIGN     reduce using rule 329 (field_access -> SUPER . NAME .)
    MINUS_ASSIGN    reduce using rule 329 (field_access -> SUPER . NAME .)
    LSHIFT_ASSIGN   reduce using rule 329 (field_access -> SUPER . NAME .)
    RSHIFT_ASSIGN   reduce using rule 329 (field_access -> SUPER . NAME .)
    RRSHIFT_ASSIGN  reduce using rule 329 (field_access -> SUPER . NAME .)
    AND_ASSIGN      reduce using rule 329 (field_access -> SUPER . NAME .)
    OR_ASSIGN       reduce using rule 329 (field_access -> SUPER . NAME .)
    XOR_ASSIGN      reduce using rule 329 (field_access -> SUPER . NAME .)


state 636

    (224) method_invocation -> SUPER . type_arguments . NAME ( argument_list_opt )

    NAME            shift and go to state 852


state 637

    (283) throw_statement -> THROW expression ; .

    $end            reduce using rule 283 (throw_statement -> THROW expression ; .)
    IF              reduce using rule 283 (throw_statement -> THROW expression ; .)
    WHILE           reduce using rule 283 (throw_statement -> THROW expression ; .)
    FOR             reduce using rule 283 (throw_statement -> THROW expression ; .)
    {               reduce using rule 283 (throw_statement -> THROW expression ; .)
    ASSERT          reduce using rule 283 (throw_statement -> THROW expression ; .)
    ;               reduce using rule 283 (throw_statement -> THROW expression ; .)
    SWITCH          reduce using rule 283 (throw_statement -> THROW expression ; .)
    DO              reduce using rule 283 (throw_statement -> THROW expression ; .)
    BREAK           reduce using rule 283 (throw_statement -> THROW expression ; .)
    CONTINUE        reduce using rule 283 (throw_statement -> THROW expression ; .)
    RETURN          reduce using rule 283 (throw_statement -> THROW expression ; .)
    SYNCHRONIZED    reduce using rule 283 (throw_statement -> THROW expression ; .)
    THROW           reduce using rule 283 (throw_statement -> THROW expression ; .)
    TRY             reduce using rule 283 (throw_statement -> THROW expression ; .)
    NAME            reduce using rule 283 (throw_statement -> THROW expression ; .)
    @               reduce using rule 283 (throw_statement -> THROW expression ; .)
    BOOLEAN         reduce using rule 283 (throw_statement -> THROW expression ; .)
    VOID            reduce using rule 283 (throw_statement -> THROW expression ; .)
    BYTE            reduce using rule 283 (throw_statement -> THROW expression ; .)
    SHORT           reduce using rule 283 (throw_statement -> THROW expression ; .)
    INT             reduce using rule 283 (throw_statement -> THROW expression ; .)
    LONG            reduce using rule 283 (throw_statement -> THROW expression ; .)
    CHAR            reduce using rule 283 (throw_statement -> THROW expression ; .)
    FLOAT           reduce using rule 283 (throw_statement -> THROW expression ; .)
    DOUBLE          reduce using rule 283 (throw_statement -> THROW expression ; .)
    PUBLIC          reduce using rule 283 (throw_statement -> THROW expression ; .)
    PROTECTED       reduce using rule 283 (throw_statement -> THROW expression ; .)
    PRIVATE         reduce using rule 283 (throw_statement -> THROW expression ; .)
    STATIC          reduce using rule 283 (throw_statement -> THROW expression ; .)
    ABSTRACT        reduce using rule 283 (throw_statement -> THROW expression ; .)
    FINAL           reduce using rule 283 (throw_statement -> THROW expression ; .)
    NATIVE          reduce using rule 283 (throw_statement -> THROW expression ; .)
    TRANSIENT       reduce using rule 283 (throw_statement -> THROW expression ; .)
    VOLATILE        reduce using rule 283 (throw_statement -> THROW expression ; .)
    STRICTFP        reduce using rule 283 (throw_statement -> THROW expression ; .)
    THIS            reduce using rule 283 (throw_statement -> THROW expression ; .)
    SUPER           reduce using rule 283 (throw_statement -> THROW expression ; .)
    PLUSPLUS        reduce using rule 283 (throw_statement -> THROW expression ; .)
    MINUSMINUS      reduce using rule 283 (throw_statement -> THROW expression ; .)
    NEW             reduce using rule 283 (throw_statement -> THROW expression ; .)
    <               reduce using rule 283 (throw_statement -> THROW expression ; .)
    (               reduce using rule 283 (throw_statement -> THROW expression ; .)
    NUM             reduce using rule 283 (throw_statement -> THROW expression ; .)
    CHAR_LITERAL    reduce using rule 283 (throw_statement -> THROW expression ; .)
    STRING_LITERAL  reduce using rule 283 (throw_statement -> THROW expression ; .)
    TRUE            reduce using rule 283 (throw_statement -> THROW expression ; .)
    FALSE           reduce using rule 283 (throw_statement -> THROW expression ; .)
    NULL            reduce using rule 283 (throw_statement -> THROW expression ; .)
    ENUM            reduce using rule 283 (throw_statement -> THROW expression ; .)
    CLASS           reduce using rule 283 (throw_statement -> THROW expression ; .)
    INTERFACE       reduce using rule 283 (throw_statement -> THROW expression ; .)
    }               reduce using rule 283 (throw_statement -> THROW expression ; .)
    CASE            reduce using rule 283 (throw_statement -> THROW expression ; .)
    DEFAULT         reduce using rule 283 (throw_statement -> THROW expression ; .)
    ELSE            reduce using rule 283 (throw_statement -> THROW expression ; .)


state 638

    (36) inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .
    (41) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    AND             reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ?               reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    OR              reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ,               reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    )               reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    :               reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    }               reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ;               reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ]               reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    $end            reduce using rule 36 (inclusive_or_expression -> inclusive_or_expression | exclusive_or_expression .)
    ^               shift and go to state 375


state 639

    (160) cast_expression -> ( name type_arguments . dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> ( name type_arguments . . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               shift and go to state 854
    )               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    dims_opt                       shift and go to state 853
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 640

    (70) relational_expression_not_name -> name < . shift_expression
    (391) type_arguments -> < . type_argument_list1
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (392) type_argument_list1 -> . type_argument1
    (393) type_argument_list1 -> . type_argument_list , type_argument1
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (398) type_argument1 -> . reference_type1
    (399) type_argument1 -> . wildcard1
    (394) type_argument_list -> . type_argument
    (395) type_argument_list -> . type_argument_list , type_argument
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (417) wildcard1 -> . ? >
    (418) wildcard1 -> . ? wildcard_bounds1
    (396) type_argument -> . reference_type
    (397) type_argument -> . wildcard
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (413) wildcard -> . ?
    (414) wildcard -> . ? wildcard_bounds
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (325) class_instance_creation_expression_name -> . name .

    ?               shift and go to state 288
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 179
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189

    unary_expression               shift and go to state 162
    primary                        shift and go to state 171
    generic_type                   shift and go to state 284
    unary_expression_not_plus_minus shift and go to state 163
    class_or_interface_type        shift and go to state 88
    additive_expression            shift and go to state 173
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    post_decrement_expression      shift and go to state 153
    reference_type                 shift and go to state 286
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 856
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    wildcard1                      shift and go to state 289
    type_argument_list             shift and go to state 290
    class_or_interface             shift and go to state 291
    type_argument1                 shift and go to state 292
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    reference_type1                shift and go to state 293
    shift_expression               shift and go to state 739
    class_instance_creation_expression shift and go to state 156
    type_argument                  shift and go to state 294
    name                           shift and go to state 855
    type_argument_list1            shift and go to state 285
    array_type                     shift and go to state 102
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    wildcard                       shift and go to state 296
    pre_decrement_expression       shift and go to state 160

state 641

    (145) primary_no_new_array -> ( name ) .
    (162) cast_expression -> ( name ) . unary_expression_not_plus_minus
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    [               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    .               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    PLUSPLUS        reduce using rule 145 (primary_no_new_array -> ( name ) .)
    MINUSMINUS      reduce using rule 145 (primary_no_new_array -> ( name ) .)
    =               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    TIMES_ASSIGN    reduce using rule 145 (primary_no_new_array -> ( name ) .)
    DIVIDE_ASSIGN   reduce using rule 145 (primary_no_new_array -> ( name ) .)
    REMAINDER_ASSIGN reduce using rule 145 (primary_no_new_array -> ( name ) .)
    PLUS_ASSIGN     reduce using rule 145 (primary_no_new_array -> ( name ) .)
    MINUS_ASSIGN    reduce using rule 145 (primary_no_new_array -> ( name ) .)
    LSHIFT_ASSIGN   reduce using rule 145 (primary_no_new_array -> ( name ) .)
    RSHIFT_ASSIGN   reduce using rule 145 (primary_no_new_array -> ( name ) .)
    RRSHIFT_ASSIGN  reduce using rule 145 (primary_no_new_array -> ( name ) .)
    AND_ASSIGN      reduce using rule 145 (primary_no_new_array -> ( name ) .)
    OR_ASSIGN       reduce using rule 145 (primary_no_new_array -> ( name ) .)
    XOR_ASSIGN      reduce using rule 145 (primary_no_new_array -> ( name ) .)
    *               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    /               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    %               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    +               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    -               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    LSHIFT          reduce using rule 145 (primary_no_new_array -> ( name ) .)
    RSHIFT          reduce using rule 145 (primary_no_new_array -> ( name ) .)
    RRSHIFT         reduce using rule 145 (primary_no_new_array -> ( name ) .)
    >               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    <               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    GTEQ            reduce using rule 145 (primary_no_new_array -> ( name ) .)
    LTEQ            reduce using rule 145 (primary_no_new_array -> ( name ) .)
    INSTANCEOF      reduce using rule 145 (primary_no_new_array -> ( name ) .)
    EQ              reduce using rule 145 (primary_no_new_array -> ( name ) .)
    NEQ             reduce using rule 145 (primary_no_new_array -> ( name ) .)
    &               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ^               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    |               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    AND             reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ?               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    OR              reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ,               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    )               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ;               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    :               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    $end            reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ]               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    }               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 857
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    cast_expression                shift and go to state 177
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    post_increment_expression      shift and go to state 159

state 642

    (163) cast_expression -> ( name dims . ) unary_expression_not_plus_minus
    (150) primary_no_new_array -> name dims . . CLASS

    )               shift and go to state 858
    .               shift and go to state 557


state 643

    (159) cast_expression -> ( primitive_type dims_opt . ) unary_expression

    )               shift and go to state 859


state 644

    (151) primary_no_new_array -> primitive_type dims . . CLASS
    (153) dims_opt -> dims .

    .               shift and go to state 617
    )               reduce using rule 153 (dims_opt -> dims .)


state 645

    (147) primary_no_new_array -> name . THIS .

    [               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    .               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    PLUSPLUS        reduce using rule 147 (primary_no_new_array -> name . THIS .)
    MINUSMINUS      reduce using rule 147 (primary_no_new_array -> name . THIS .)
    ;               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    *               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    /               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    %               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    +               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    -               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    LSHIFT          reduce using rule 147 (primary_no_new_array -> name . THIS .)
    RSHIFT          reduce using rule 147 (primary_no_new_array -> name . THIS .)
    RRSHIFT         reduce using rule 147 (primary_no_new_array -> name . THIS .)
    >               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    <               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    GTEQ            reduce using rule 147 (primary_no_new_array -> name . THIS .)
    LTEQ            reduce using rule 147 (primary_no_new_array -> name . THIS .)
    INSTANCEOF      reduce using rule 147 (primary_no_new_array -> name . THIS .)
    EQ              reduce using rule 147 (primary_no_new_array -> name . THIS .)
    NEQ             reduce using rule 147 (primary_no_new_array -> name . THIS .)
    &               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    ^               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    |               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    AND             reduce using rule 147 (primary_no_new_array -> name . THIS .)
    ?               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    OR              reduce using rule 147 (primary_no_new_array -> name . THIS .)
    $end            reduce using rule 147 (primary_no_new_array -> name . THIS .)
    )               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    :               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    ]               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    ,               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    }               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    =               reduce using rule 147 (primary_no_new_array -> name . THIS .)
    TIMES_ASSIGN    reduce using rule 147 (primary_no_new_array -> name . THIS .)
    DIVIDE_ASSIGN   reduce using rule 147 (primary_no_new_array -> name . THIS .)
    REMAINDER_ASSIGN reduce using rule 147 (primary_no_new_array -> name . THIS .)
    PLUS_ASSIGN     reduce using rule 147 (primary_no_new_array -> name . THIS .)
    MINUS_ASSIGN    reduce using rule 147 (primary_no_new_array -> name . THIS .)
    LSHIFT_ASSIGN   reduce using rule 147 (primary_no_new_array -> name . THIS .)
    RSHIFT_ASSIGN   reduce using rule 147 (primary_no_new_array -> name . THIS .)
    RRSHIFT_ASSIGN  reduce using rule 147 (primary_no_new_array -> name . THIS .)
    AND_ASSIGN      reduce using rule 147 (primary_no_new_array -> name . THIS .)
    OR_ASSIGN       reduce using rule 147 (primary_no_new_array -> name . THIS .)
    XOR_ASSIGN      reduce using rule 147 (primary_no_new_array -> name . THIS .)


state 646

    (222) method_invocation -> name . type_arguments . NAME ( argument_list_opt )

    NAME            shift and go to state 789


state 647

    (148) primary_no_new_array -> name . SUPER .

    [               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    .               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    PLUSPLUS        reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    MINUSMINUS      reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    ;               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    *               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    /               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    %               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    +               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    -               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    LSHIFT          reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    RSHIFT          reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    RRSHIFT         reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    >               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    <               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    GTEQ            reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    LTEQ            reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    INSTANCEOF      reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    EQ              reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    NEQ             reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    &               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    ^               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    |               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    AND             reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    ?               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    OR              reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    $end            reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    )               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    :               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    ]               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    ,               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    }               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    =               reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    TIMES_ASSIGN    reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    DIVIDE_ASSIGN   reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    REMAINDER_ASSIGN reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    PLUS_ASSIGN     reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    MINUS_ASSIGN    reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    LSHIFT_ASSIGN   reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    RSHIFT_ASSIGN   reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    RRSHIFT_ASSIGN  reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    AND_ASSIGN      reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    OR_ASSIGN       reduce using rule 148 (primary_no_new_array -> name . SUPER .)
    XOR_ASSIGN      reduce using rule 148 (primary_no_new_array -> name . SUPER .)


state 648

    (31) conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .
    (36) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    ?               reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    ]               reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    :               reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    ,               reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    )               reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    $end            reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    ;               reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    }               reduce using rule 31 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    |               shift and go to state 360


state 649

    (26) conditional_or_expression -> conditional_or_expression OR conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    ?               reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    OR              reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    ,               reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    )               reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    ]               reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    ;               reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    $end            reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    :               reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    }               reduce using rule 26 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    AND             shift and go to state 365


state 650

    (21) conditional_expression -> conditional_or_expression ? expression . : conditional_expression

    :               shift and go to state 860


state 651

    (97) multiplicative_expression -> multiplicative_expression * unary_expression .

    *               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    /               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    %               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    +               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    -               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LSHIFT          reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    RSHIFT          reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    RRSHIFT         reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    INSTANCEOF      reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    EQ              reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    NEQ             reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    &               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ^               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    |               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    AND             reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ?               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    OR              reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    )               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ,               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    }               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ;               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    >               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    <               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GTEQ            reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LTEQ            reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    $end            reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    :               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ]               reduce using rule 97 (multiplicative_expression -> multiplicative_expression * unary_expression .)


state 652

    (99) multiplicative_expression -> multiplicative_expression % unary_expression .

    *               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    /               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    %               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    +               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    -               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LSHIFT          reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    RSHIFT          reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    RRSHIFT         reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    INSTANCEOF      reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    EQ              reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    NEQ             reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    &               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ^               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    |               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    AND             reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ?               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    OR              reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    )               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ,               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    }               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ;               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    >               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    <               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    GTEQ            reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LTEQ            reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    $end            reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    :               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ]               reduce using rule 99 (multiplicative_expression -> multiplicative_expression % unary_expression .)


state 653

    (98) multiplicative_expression -> multiplicative_expression / unary_expression .

    *               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    /               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    %               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    +               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    -               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LSHIFT          reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    RSHIFT          reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    RRSHIFT         reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    INSTANCEOF      reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    EQ              reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    NEQ             reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    &               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ^               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    |               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    AND             reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ?               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    OR              reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    )               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ,               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    }               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ;               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    >               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    <               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    GTEQ            reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LTEQ            reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    $end            reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    :               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ]               reduce using rule 98 (multiplicative_expression -> multiplicative_expression / unary_expression .)


state 654

    (79) shift_expression -> shift_expression RSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    LSHIFT          reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RRSHIFT         reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    >               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    <               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GTEQ            reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LTEQ            reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ              reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NEQ             reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    &               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ^               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    |               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AND             reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ?               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ,               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    )               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ;               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    $end            reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    :               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    ]               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    }               reduce using rule 79 (shift_expression -> shift_expression RSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 655

    (78) shift_expression -> shift_expression LSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    LSHIFT          reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RRSHIFT         reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    >               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    <               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GTEQ            reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LTEQ            reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ              reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NEQ             reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    &               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ^               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    |               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AND             reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ?               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ,               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    )               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ;               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    $end            reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    :               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    ]               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    }               reduce using rule 78 (shift_expression -> shift_expression LSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 656

    (80) shift_expression -> shift_expression RRSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    LSHIFT          reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    RSHIFT          reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    RRSHIFT         reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    >               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    <               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    GTEQ            reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    LTEQ            reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    EQ              reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    NEQ             reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    &               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    ^               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    |               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    AND             reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    ?               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    OR              reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    ,               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    )               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    ;               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    $end            reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    :               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    ]               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    }               reduce using rule 80 (shift_expression -> shift_expression RRSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 657

    (41) exclusive_or_expression -> exclusive_or_expression ^ and_expression .
    (46) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    |               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    AND             reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ?               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    OR              reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    )               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ,               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ;               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    :               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    $end            reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    }               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    ]               reduce using rule 41 (exclusive_or_expression -> exclusive_or_expression ^ and_expression .)
    &               shift and go to state 388


state 658

    (223) method_invocation -> primary . type_arguments . NAME ( argument_list_opt )

    NAME            shift and go to state 821


state 659

    (328) field_access -> primary . NAME .
    (226) method_invocation -> primary . NAME . ( argument_list_opt )

    [               reduce using rule 328 (field_access -> primary . NAME .)
    .               reduce using rule 328 (field_access -> primary . NAME .)
    PLUSPLUS        reduce using rule 328 (field_access -> primary . NAME .)
    MINUSMINUS      reduce using rule 328 (field_access -> primary . NAME .)
    *               reduce using rule 328 (field_access -> primary . NAME .)
    /               reduce using rule 328 (field_access -> primary . NAME .)
    %               reduce using rule 328 (field_access -> primary . NAME .)
    +               reduce using rule 328 (field_access -> primary . NAME .)
    -               reduce using rule 328 (field_access -> primary . NAME .)
    LSHIFT          reduce using rule 328 (field_access -> primary . NAME .)
    RSHIFT          reduce using rule 328 (field_access -> primary . NAME .)
    RRSHIFT         reduce using rule 328 (field_access -> primary . NAME .)
    >               reduce using rule 328 (field_access -> primary . NAME .)
    <               reduce using rule 328 (field_access -> primary . NAME .)
    GTEQ            reduce using rule 328 (field_access -> primary . NAME .)
    LTEQ            reduce using rule 328 (field_access -> primary . NAME .)
    INSTANCEOF      reduce using rule 328 (field_access -> primary . NAME .)
    EQ              reduce using rule 328 (field_access -> primary . NAME .)
    NEQ             reduce using rule 328 (field_access -> primary . NAME .)
    &               reduce using rule 328 (field_access -> primary . NAME .)
    ^               reduce using rule 328 (field_access -> primary . NAME .)
    |               reduce using rule 328 (field_access -> primary . NAME .)
    AND             reduce using rule 328 (field_access -> primary . NAME .)
    ?               reduce using rule 328 (field_access -> primary . NAME .)
    OR              reduce using rule 328 (field_access -> primary . NAME .)
    $end            reduce using rule 328 (field_access -> primary . NAME .)
    ;               reduce using rule 328 (field_access -> primary . NAME .)
    :               reduce using rule 328 (field_access -> primary . NAME .)
    )               reduce using rule 328 (field_access -> primary . NAME .)
    ]               reduce using rule 328 (field_access -> primary . NAME .)
    ,               reduce using rule 328 (field_access -> primary . NAME .)
    }               reduce using rule 328 (field_access -> primary . NAME .)
    =               reduce using rule 328 (field_access -> primary . NAME .)
    TIMES_ASSIGN    reduce using rule 328 (field_access -> primary . NAME .)
    DIVIDE_ASSIGN   reduce using rule 328 (field_access -> primary . NAME .)
    REMAINDER_ASSIGN reduce using rule 328 (field_access -> primary . NAME .)
    PLUS_ASSIGN     reduce using rule 328 (field_access -> primary . NAME .)
    MINUS_ASSIGN    reduce using rule 328 (field_access -> primary . NAME .)
    LSHIFT_ASSIGN   reduce using rule 328 (field_access -> primary . NAME .)
    RSHIFT_ASSIGN   reduce using rule 328 (field_access -> primary . NAME .)
    RRSHIFT_ASSIGN  reduce using rule 328 (field_access -> primary . NAME .)
    AND_ASSIGN      reduce using rule 328 (field_access -> primary . NAME .)
    OR_ASSIGN       reduce using rule 328 (field_access -> primary . NAME .)
    XOR_ASSIGN      reduce using rule 328 (field_access -> primary . NAME .)
    (               shift and go to state 820


state 660

    (89) additive_expression -> additive_expression + multiplicative_expression .
    (97) multiplicative_expression -> multiplicative_expression . * unary_expression
    (98) multiplicative_expression -> multiplicative_expression . / unary_expression
    (99) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    LSHIFT          reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    RSHIFT          reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    RRSHIFT         reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    GTEQ            reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    LTEQ            reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    INSTANCEOF      reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ              reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    NEQ             reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    ^               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    AND             reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    ?               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    OR              reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    }               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    $end            reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    :               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 89 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 369
    /               shift and go to state 371
    %               shift and go to state 370


state 661

    (90) additive_expression -> additive_expression - multiplicative_expression .
    (97) multiplicative_expression -> multiplicative_expression . * unary_expression
    (98) multiplicative_expression -> multiplicative_expression . / unary_expression
    (99) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    LSHIFT          reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    RSHIFT          reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    RRSHIFT         reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    GTEQ            reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    LTEQ            reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    INSTANCEOF      reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ              reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    NEQ             reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    ^               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    AND             reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    ?               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    OR              reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    }               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    $end            reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    :               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 90 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 369
    /               shift and go to state 371
    %               shift and go to state 370


state 662

    (66) relational_expression -> relational_expression GTEQ shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    >               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    <               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    GTEQ            reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    LTEQ            reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    INSTANCEOF      reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    EQ              reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    NEQ             reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    &               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    ^               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    |               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    AND             reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    ?               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    OR              reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    )               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    ;               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    ,               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    }               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    $end            reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    :               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    ]               reduce using rule 66 (relational_expression -> relational_expression GTEQ shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 663

    (67) relational_expression -> relational_expression LTEQ shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    >               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    <               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    GTEQ            reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    LTEQ            reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    INSTANCEOF      reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    EQ              reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    NEQ             reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    &               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    ^               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    |               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    AND             reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    ?               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    OR              reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    )               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    ;               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    ,               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    }               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    $end            reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    :               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    ]               reduce using rule 67 (relational_expression -> relational_expression LTEQ shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 664

    (65) relational_expression -> relational_expression < shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    >               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    <               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    GTEQ            reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    LTEQ            reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    INSTANCEOF      reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    EQ              reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    NEQ             reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    &               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    ^               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    |               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    AND             reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    ?               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    OR              reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    )               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    ;               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    ,               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    }               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    $end            reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    :               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    ]               reduce using rule 65 (relational_expression -> relational_expression < shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 665

    (64) relational_expression -> relational_expression > shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    >               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    <               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    GTEQ            reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    LTEQ            reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    INSTANCEOF      reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    EQ              reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    NEQ             reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    &               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    ^               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    |               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    AND             reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    ?               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    OR              reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    )               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    ;               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    ,               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    }               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    $end            reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    :               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    ]               reduce using rule 64 (relational_expression -> relational_expression > shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 666

    (51) equality_expression -> equality_expression EQ instanceof_expression .
    (59) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQ              reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    NEQ             reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    &               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    ^               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    |               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    AND             reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    ?               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    OR              reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    )               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    ,               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    $end            reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    :               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    }               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    ;               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    ]               reduce using rule 51 (equality_expression -> equality_expression EQ instanceof_expression .)
    INSTANCEOF      shift and go to state 386


state 667

    (52) equality_expression -> equality_expression NEQ instanceof_expression .
    (59) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQ              reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    NEQ             reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    &               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    ^               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    |               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    AND             reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    ?               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    OR              reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    )               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    ,               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    $end            reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    :               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    }               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    ;               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    ]               reduce using rule 52 (equality_expression -> equality_expression NEQ instanceof_expression .)
    INSTANCEOF      shift and go to state 386


state 668

    (59) instanceof_expression -> instanceof_expression INSTANCEOF reference_type .

    INSTANCEOF      reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    EQ              reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    NEQ             reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    &               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    ^               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    |               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    AND             reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    ?               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    OR              reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    )               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    ,               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    }               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    ;               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    ]               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    $end            reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)
    :               reduce using rule 59 (instanceof_expression -> instanceof_expression INSTANCEOF reference_type .)


state 669

    (46) and_expression -> and_expression & equality_expression .
    (51) equality_expression -> equality_expression . EQ instanceof_expression
    (52) equality_expression -> equality_expression . NEQ instanceof_expression

    &               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ^               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    AND             reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ?               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    OR              reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    }               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    :               reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    $end            reduce using rule 46 (and_expression -> and_expression & equality_expression .)
    EQ              shift and go to state 384
    NEQ             shift and go to state 385


state 670

    (329) field_access -> SUPER . NAME .
    (227) method_invocation -> SUPER . NAME . ( argument_list_opt )

    [               reduce using rule 329 (field_access -> SUPER . NAME .)
    .               reduce using rule 329 (field_access -> SUPER . NAME .)
    PLUSPLUS        reduce using rule 329 (field_access -> SUPER . NAME .)
    MINUSMINUS      reduce using rule 329 (field_access -> SUPER . NAME .)
    *               reduce using rule 329 (field_access -> SUPER . NAME .)
    /               reduce using rule 329 (field_access -> SUPER . NAME .)
    %               reduce using rule 329 (field_access -> SUPER . NAME .)
    +               reduce using rule 329 (field_access -> SUPER . NAME .)
    -               reduce using rule 329 (field_access -> SUPER . NAME .)
    LSHIFT          reduce using rule 329 (field_access -> SUPER . NAME .)
    RSHIFT          reduce using rule 329 (field_access -> SUPER . NAME .)
    RRSHIFT         reduce using rule 329 (field_access -> SUPER . NAME .)
    >               reduce using rule 329 (field_access -> SUPER . NAME .)
    <               reduce using rule 329 (field_access -> SUPER . NAME .)
    GTEQ            reduce using rule 329 (field_access -> SUPER . NAME .)
    LTEQ            reduce using rule 329 (field_access -> SUPER . NAME .)
    INSTANCEOF      reduce using rule 329 (field_access -> SUPER . NAME .)
    EQ              reduce using rule 329 (field_access -> SUPER . NAME .)
    NEQ             reduce using rule 329 (field_access -> SUPER . NAME .)
    &               reduce using rule 329 (field_access -> SUPER . NAME .)
    ^               reduce using rule 329 (field_access -> SUPER . NAME .)
    |               reduce using rule 329 (field_access -> SUPER . NAME .)
    AND             reduce using rule 329 (field_access -> SUPER . NAME .)
    ?               reduce using rule 329 (field_access -> SUPER . NAME .)
    OR              reduce using rule 329 (field_access -> SUPER . NAME .)
    $end            reduce using rule 329 (field_access -> SUPER . NAME .)
    ;               reduce using rule 329 (field_access -> SUPER . NAME .)
    :               reduce using rule 329 (field_access -> SUPER . NAME .)
    )               reduce using rule 329 (field_access -> SUPER . NAME .)
    ]               reduce using rule 329 (field_access -> SUPER . NAME .)
    ,               reduce using rule 329 (field_access -> SUPER . NAME .)
    }               reduce using rule 329 (field_access -> SUPER . NAME .)
    =               reduce using rule 329 (field_access -> SUPER . NAME .)
    TIMES_ASSIGN    reduce using rule 329 (field_access -> SUPER . NAME .)
    DIVIDE_ASSIGN   reduce using rule 329 (field_access -> SUPER . NAME .)
    REMAINDER_ASSIGN reduce using rule 329 (field_access -> SUPER . NAME .)
    PLUS_ASSIGN     reduce using rule 329 (field_access -> SUPER . NAME .)
    MINUS_ASSIGN    reduce using rule 329 (field_access -> SUPER . NAME .)
    LSHIFT_ASSIGN   reduce using rule 329 (field_access -> SUPER . NAME .)
    RSHIFT_ASSIGN   reduce using rule 329 (field_access -> SUPER . NAME .)
    RRSHIFT_ASSIGN  reduce using rule 329 (field_access -> SUPER . NAME .)
    AND_ASSIGN      reduce using rule 329 (field_access -> SUPER . NAME .)
    OR_ASSIGN       reduce using rule 329 (field_access -> SUPER . NAME .)
    XOR_ASSIGN      reduce using rule 329 (field_access -> SUPER . NAME .)
    (               shift and go to state 851


state 671

    (542) enum_constant_header_name -> modifiers_opt NAME .

    (               reduce using rule 542 (enum_constant_header_name -> modifiers_opt NAME .)
    {               reduce using rule 542 (enum_constant_header_name -> modifiers_opt NAME .)
    ,               reduce using rule 542 (enum_constant_header_name -> modifiers_opt NAME .)
    ;               reduce using rule 542 (enum_constant_header_name -> modifiers_opt NAME .)
    }               reduce using rule 542 (enum_constant_header_name -> modifiers_opt NAME .)


state 672

    (533) enum_body -> { enum_body_declarations_opt } .

    ;               reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    @               reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    PUBLIC          reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    PROTECTED       reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    PRIVATE         reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    STATIC          reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    ABSTRACT        reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    FINAL           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    NATIVE          reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    SYNCHRONIZED    reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    TRANSIENT       reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    VOLATILE        reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    STRICTFP        reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    ENUM            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    CLASS           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    INTERFACE       reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    $end            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    IF              reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    WHILE           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    FOR             reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    {               reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    ASSERT          reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    SWITCH          reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    DO              reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    BREAK           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    CONTINUE        reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    RETURN          reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    THROW           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    TRY             reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    NAME            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    BOOLEAN         reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    VOID            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    BYTE            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    SHORT           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    INT             reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    LONG            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    CHAR            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    FLOAT           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    DOUBLE          reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    THIS            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    SUPER           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    PLUSPLUS        reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    MINUSMINUS      reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    NEW             reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    <               reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    (               reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    NUM             reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    CHAR_LITERAL    reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    STRING_LITERAL  reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    TRUE            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    FALSE           reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    NULL            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    }               reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    CASE            reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)
    DEFAULT         reduce using rule 533 (enum_body -> { enum_body_declarations_opt } .)


state 673

    (535) enum_body -> { enum_constants , . enum_body_declarations_opt }
    (538) enum_constants -> enum_constants , . enum_constant
    (550) enum_body_declarations_opt -> . enum_declarations
    (551) enum_body_declarations_opt -> . empty
    (539) enum_constant -> . enum_constant_header class_body
    (540) enum_constant -> . enum_constant_header
    (552) enum_declarations -> . ; class_body_declarations_opt
    (623) empty -> .
    (541) enum_constant_header -> . enum_constant_header_name arguments_opt
    (542) enum_constant_header_name -> . modifiers_opt NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    ;               shift and go to state 400
    }               reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 402

    annotation_name                shift and go to state 38
    enum_constant_header           shift and go to state 405
    enum_constant_header_name      shift and go to state 403
    enum_constant                  shift and go to state 862
    marker_annotation              shift and go to state 22
    single_member_annotation       shift and go to state 18
    enum_declarations              shift and go to state 396
    enum_body_declarations_opt     shift and go to state 861
    modifiers                      shift and go to state 406
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 51
    annotation                     shift and go to state 10
    empty                          shift and go to state 401
    modifiers_opt                  shift and go to state 395

state 674

    (536) enum_body -> { enum_constants enum_body_declarations_opt . }

    }               shift and go to state 863


state 675

    (551) enum_body_declarations_opt -> empty .

    }               reduce using rule 551 (enum_body_declarations_opt -> empty .)


state 676

    (534) enum_body -> { , enum_body_declarations_opt . }

    }               shift and go to state 864


state 677

    (552) enum_declarations -> ; class_body_declarations_opt .

    }               reduce using rule 552 (enum_declarations -> ; class_body_declarations_opt .)


state 678

    (545) arguments -> ( . argument_list_opt )
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 865
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 679

    (543) arguments_opt -> arguments .

    {               reduce using rule 543 (arguments_opt -> arguments .)
    ,               reduce using rule 543 (arguments_opt -> arguments .)
    ;               reduce using rule 543 (arguments_opt -> arguments .)
    }               reduce using rule 543 (arguments_opt -> arguments .)


state 680

    (541) enum_constant_header -> enum_constant_header_name arguments_opt .

    {               reduce using rule 541 (enum_constant_header -> enum_constant_header_name arguments_opt .)
    ,               reduce using rule 541 (enum_constant_header -> enum_constant_header_name arguments_opt .)
    ;               reduce using rule 541 (enum_constant_header -> enum_constant_header_name arguments_opt .)
    }               reduce using rule 541 (enum_constant_header -> enum_constant_header_name arguments_opt .)


state 681

    (544) arguments_opt -> empty .

    {               reduce using rule 544 (arguments_opt -> empty .)
    ,               reduce using rule 544 (arguments_opt -> empty .)
    ;               reduce using rule 544 (arguments_opt -> empty .)
    }               reduce using rule 544 (arguments_opt -> empty .)


state 682

    (539) enum_constant -> enum_constant_header class_body .

    ,               reduce using rule 539 (enum_constant -> enum_constant_header class_body .)
    ;               reduce using rule 539 (enum_constant -> enum_constant_header class_body .)
    }               reduce using rule 539 (enum_constant -> enum_constant_header class_body .)


state 683

    (440) type_parameter_list1 -> type_parameter_list , . type_parameter1
    (432) type_parameter_list -> type_parameter_list , . type_parameter
    (441) type_parameter1 -> . type_parameter_header >
    (442) type_parameter1 -> . type_parameter_header EXTENDS reference_type1
    (443) type_parameter1 -> . type_parameter_header EXTENDS reference_type additional_bound_list1
    (433) type_parameter -> . type_parameter_header
    (434) type_parameter -> . type_parameter_header EXTENDS reference_type
    (435) type_parameter -> . type_parameter_header EXTENDS reference_type additional_bound_list
    (429) type_parameter_header -> . NAME

    NAME            shift and go to state 408

    type_parameter_header          shift and go to state 409
    type_parameter1                shift and go to state 866
    type_parameter                 shift and go to state 867

state 684

    (442) type_parameter1 -> type_parameter_header EXTENDS . reference_type1
    (443) type_parameter1 -> type_parameter_header EXTENDS . reference_type additional_bound_list1
    (434) type_parameter -> type_parameter_header EXTENDS . reference_type
    (435) type_parameter -> type_parameter_header EXTENDS . reference_type additional_bound_list
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 291
    reference_type                 shift and go to state 868
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    generic_type                   shift and go to state 284
    reference_type1                shift and go to state 869
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 685

    (441) type_parameter1 -> type_parameter_header > .

    EXTENDS         reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    IMPLEMENTS      reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    {               reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    NAME            reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    BOOLEAN         reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    VOID            reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    BYTE            reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    SHORT           reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    INT             reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    LONG            reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    CHAR            reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    FLOAT           reduce using rule 441 (type_parameter1 -> type_parameter_header > .)
    DOUBLE          reduce using rule 441 (type_parameter1 -> type_parameter_header > .)


state 686

    (464) interface_type_list -> interface_type_list , . interface_type
    (465) interface_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 335
    class_or_interface             shift and go to state 144
    interface_type                 shift and go to state 870
    generic_type                   shift and go to state 331
    class_or_interface_type        shift and go to state 415
    simple_name                    shift and go to state 64

state 687

    (559) annotation_type_body -> { annotation_type_member_declarations_opt } .

    ;               reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    @               reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    PUBLIC          reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    PROTECTED       reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    PRIVATE         reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    STATIC          reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    ABSTRACT        reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    FINAL           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    NATIVE          reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    SYNCHRONIZED    reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    TRANSIENT       reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    VOLATILE        reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    STRICTFP        reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    ENUM            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    CLASS           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    INTERFACE       reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    $end            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    IF              reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    WHILE           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    FOR             reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    {               reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    ASSERT          reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    SWITCH          reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    DO              reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    BREAK           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    CONTINUE        reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    RETURN          reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    THROW           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    TRY             reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    NAME            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    BOOLEAN         reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    VOID            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    BYTE            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    SHORT           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    INT             reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    LONG            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    CHAR            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    FLOAT           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    DOUBLE          reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    THIS            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    SUPER           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    PLUSPLUS        reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    MINUSMINUS      reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    NEW             reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    <               reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    (               reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    NUM             reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    CHAR_LITERAL    reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    STRING_LITERAL  reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    TRUE            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    FALSE           reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    NULL            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    }               reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    CASE            reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)
    DEFAULT         reduce using rule 559 (annotation_type_body -> { annotation_type_member_declarations_opt } .)


state 688

    (492) formal_parameter -> modifiers_opt . type variable_declarator_id
    (493) formal_parameter -> modifiers_opt . type ELLIPSIS variable_declarator_id
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_or_interface             shift and go to state 144
    type                           shift and go to state 871
    reference_type                 shift and go to state 91
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 88
    name                           shift and go to state 342

state 689

    (485) constructor_header -> constructor_header_name formal_parameter_list_opt . ) method_header_throws_clause_opt

    )               shift and go to state 872


state 690

    (489) formal_parameter_list_opt -> empty .
    (352) modifiers_opt -> empty .

    )               reduce using rule 489 (formal_parameter_list_opt -> empty .)
    BOOLEAN         reduce using rule 352 (modifiers_opt -> empty .)
    VOID            reduce using rule 352 (modifiers_opt -> empty .)
    BYTE            reduce using rule 352 (modifiers_opt -> empty .)
    SHORT           reduce using rule 352 (modifiers_opt -> empty .)
    INT             reduce using rule 352 (modifiers_opt -> empty .)
    LONG            reduce using rule 352 (modifiers_opt -> empty .)
    CHAR            reduce using rule 352 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 352 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 352 (modifiers_opt -> empty .)
    NAME            reduce using rule 352 (modifiers_opt -> empty .)


state 691

    (488) formal_parameter_list_opt -> formal_parameter_list .
    (491) formal_parameter_list -> formal_parameter_list . , formal_parameter

    )               reduce using rule 488 (formal_parameter_list_opt -> formal_parameter_list .)
    ,               shift and go to state 873


state 692

    (490) formal_parameter_list -> formal_parameter .

    ,               reduce using rule 490 (formal_parameter_list -> formal_parameter .)
    )               reduce using rule 490 (formal_parameter_list -> formal_parameter .)


state 693

    (569) annotation_method_header_name -> modifiers_opt type_parameters . type NAME (
    (486) constructor_header_name -> modifiers_opt type_parameters . NAME (
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 875
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    qualified_name                 shift and go to state 141
    class_or_interface             shift and go to state 144
    class_or_interface_type        shift and go to state 88
    reference_type                 shift and go to state 91
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    type                           shift and go to state 874
    name                           shift and go to state 342

state 694

    (487) constructor_header_name -> modifiers_opt NAME . (
    (343) simple_name -> NAME .

    (               shift and go to state 876
    .               reduce using rule 343 (simple_name -> NAME .)
    [               reduce using rule 343 (simple_name -> NAME .)
    <               reduce using rule 343 (simple_name -> NAME .)
    NAME            reduce using rule 343 (simple_name -> NAME .)


state 695

    (570) annotation_method_header_name -> modifiers_opt type . NAME (
    (482) field_declaration -> modifiers_opt type . variable_declarators ;
    (178) variable_declarators -> . variable_declarator
    (179) variable_declarators -> . variable_declarators , variable_declarator
    (180) variable_declarator -> . variable_declarator_id
    (181) variable_declarator -> . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 878

    variable_declarators           shift and go to state 877
    variable_declarator            shift and go to state 346
    variable_declarator_id         shift and go to state 347

state 696

    (564) annotation_type_member_declaration -> annotation_method_header ; .

    ;               reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    @               reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    PUBLIC          reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    PROTECTED       reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    PRIVATE         reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    STATIC          reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    ABSTRACT        reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    FINAL           reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    NATIVE          reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    SYNCHRONIZED    reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    TRANSIENT       reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    VOLATILE        reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    STRICTFP        reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    NAME            reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    ENUM            reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    CLASS           reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    INTERFACE       reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    <               reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    BOOLEAN         reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    VOID            reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    BYTE            reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    SHORT           reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    INT             reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    LONG            reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    CHAR            reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    FLOAT           reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    DOUBLE          reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)
    }               reduce using rule 564 (annotation_type_member_declaration -> annotation_method_header ; .)


state 697

    (568) annotation_method_header -> annotation_method_header_name formal_parameter_list_opt . ) method_header_extended_dims annotation_method_header_default_value_opt

    )               shift and go to state 879


state 698

    (563) annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .

    ;               reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    @               reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    PUBLIC          reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    PROTECTED       reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    PRIVATE         reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    STATIC          reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    ABSTRACT        reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    FINAL           reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    NATIVE          reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    SYNCHRONIZED    reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    TRANSIENT       reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    VOLATILE        reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    STRICTFP        reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    NAME            reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    ENUM            reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    CLASS           reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    INTERFACE       reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    <               reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    BOOLEAN         reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    VOID            reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    BYTE            reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    SHORT           reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    INT             reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    LONG            reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    CHAR            reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    FLOAT           reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    DOUBLE          reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)
    }               reduce using rule 563 (annotation_type_member_declarations -> annotation_type_member_declarations annotation_type_member_declaration .)


state 699

    (484) constructor_declaration -> constructor_header method_body .

    ;               reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    @               reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    PUBLIC          reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    PROTECTED       reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    PRIVATE         reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    STATIC          reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    ABSTRACT        reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    FINAL           reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    NATIVE          reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    SYNCHRONIZED    reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    TRANSIENT       reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    VOLATILE        reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    STRICTFP        reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    NAME            reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    ENUM            reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    CLASS           reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    INTERFACE       reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    <               reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    BOOLEAN         reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    VOID            reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    BYTE            reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    SHORT           reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    INT             reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    LONG            reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    CHAR            reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    FLOAT           reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    DOUBLE          reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    }               reduce using rule 484 (constructor_declaration -> constructor_header method_body .)
    {               reduce using rule 484 (constructor_declaration -> constructor_header method_body .)


state 700

    (500) method_body -> { . block_statements_opt }
    (165) block_statements_opt -> . block_statements
    (166) block_statements_opt -> . empty
    (167) block_statements -> . block_statement
    (168) block_statements -> . block_statements block_statement
    (623) empty -> .
    (169) block_statement -> . local_variable_declaration_statement
    (170) block_statement -> . statement
    (171) block_statement -> . class_declaration
    (172) block_statement -> . interface_declaration
    (173) block_statement -> . annotation_type_declaration
    (174) block_statement -> . enum_declaration
    (175) local_variable_declaration_statement -> . local_variable_declaration ;
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (529) enum_declaration -> . enum_header enum_body
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    }               reduce using rule 623 (empty -> .)
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 84
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    @               shift and go to state 30
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    expression_statement           shift and go to state 54
    enum_header                    shift and go to state 7
    explicit_constructor_invocation shift and go to state 55
    throw_statement                shift and go to state 57
    generic_type                   shift and go to state 58
    post_decrement_expression      shift and go to state 60
    block_statements_opt           shift and go to state 880
    assert_statement               shift and go to state 61
    statement_expression           shift and go to state 66
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    local_variable_declaration_statement shift and go to state 70
    try_statement                  shift and go to state 71
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 73
    labeled_statement              shift and go to state 77
    post_increment_expression      shift and go to state 78
    enum_header_name               shift and go to state 43
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    interface_declaration          shift and go to state 83
    type_arguments                 shift and go to state 85
    break_statement                shift and go to state 86
    class_or_interface_type        shift and go to state 88
    switch_statement               shift and go to state 89
    array_access                   shift and go to state 90
    single_member_annotation       shift and go to state 18
    reference_type                 shift and go to state 91
    label                          shift and go to state 92
    continue_statement             shift and go to state 93
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    statement_without_trailing_substatement shift and go to state 99
    array_creation_with_array_initializer shift and go to state 101
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation_name                shift and go to state 38
    interface_header_name          shift and go to state 14
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_header_init shift and go to state 105
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108
    modifiers_opt                  shift and go to state 26
    primary                        shift and go to state 109
    marker_annotation              shift and go to state 22
    block_statement                shift and go to state 325
    if_then_statement              shift and go to state 113
    array_creation_without_array_initializer shift and go to state 95
    while_statement                shift and go to state 65
    synchronized_statement         shift and go to state 115
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    statement                      shift and go to state 119
    method_invocation              shift and go to state 120
    empty                          shift and go to state 326
    annotation_type_declaration_header_name shift and go to state 31
    class_instance_creation_expression_name shift and go to state 122
    class_header                   shift and go to state 36
    modifiers                      shift and go to state 125
    type                           shift and go to state 128
    enum_declaration               shift and go to state 129
    empty_statement                shift and go to state 130
    local_variable_declaration     shift and go to state 134
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 135
    enhanced_for_statement         shift and go to state 138
    class_header_name1             shift and go to state 8
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    qualified_name                 shift and go to state 141
    class_header_name              shift and go to state 5
    postfix_expression             shift and go to state 59
    return_statement               shift and go to state 142
    do_statement                   shift and go to state 143
    block_statements               shift and go to state 327
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    annotation                     shift and go to state 10
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 151

state 701

    (532) enum_header_name -> modifiers_opt ENUM NAME type_parameters .

    IMPLEMENTS      reduce using rule 532 (enum_header_name -> modifiers_opt ENUM NAME type_parameters .)
    {               reduce using rule 532 (enum_header_name -> modifiers_opt ENUM NAME type_parameters .)


state 702

    (615) type_import_on_demand_declaration -> IMPORT name . * . ;

    ;               shift and go to state 881


state 703

    (617) static_import_on_demand_declaration -> IMPORT STATIC name . . * ;
    (344) qualified_name -> name . . simple_name
    (343) simple_name -> . NAME

    *               shift and go to state 882
    NAME            shift and go to state 212

    simple_name                    shift and go to state 560

state 704

    (616) single_static_import_declaration -> IMPORT STATIC name ; .

    ;               reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    IMPORT          reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    @               reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    PUBLIC          reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    PROTECTED       reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    PRIVATE         reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    STATIC          reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    ABSTRACT        reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    FINAL           reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    NATIVE          reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    SYNCHRONIZED    reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    TRANSIENT       reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    VOLATILE        reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    STRICTFP        reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    ENUM            reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    CLASS           reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    INTERFACE       reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)
    $end            reduce using rule 616 (single_static_import_declaration -> IMPORT STATIC name ; .)


state 705

    (557) annotation_type_declaration_header_name -> @ INTERFACE NAME type_parameters .

    EXTENDS         reduce using rule 557 (annotation_type_declaration_header_name -> @ INTERFACE NAME type_parameters .)
    IMPLEMENTS      reduce using rule 557 (annotation_type_declaration_header_name -> @ INTERFACE NAME type_parameters .)
    {               reduce using rule 557 (annotation_type_declaration_header_name -> @ INTERFACE NAME type_parameters .)


state 706

    (470) class_body_declarations -> class_body_declarations class_body_declaration .

    ;               reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    STATIC          reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    {               reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    @               reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    PUBLIC          reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    PROTECTED       reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    PRIVATE         reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    ABSTRACT        reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    FINAL           reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    NATIVE          reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    SYNCHRONIZED    reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    TRANSIENT       reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    VOLATILE        reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    STRICTFP        reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    NAME            reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    ENUM            reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    CLASS           reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    INTERFACE       reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    <               reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    BOOLEAN         reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    VOID            reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    BYTE            reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    SHORT           reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    INT             reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    LONG            reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    CHAR            reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    FLOAT           reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    DOUBLE          reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)
    }               reduce using rule 470 (class_body_declarations -> class_body_declarations class_body_declaration .)


state 707

    (483) static_initializer -> STATIC block .

    ;               reduce using rule 483 (static_initializer -> STATIC block .)
    STATIC          reduce using rule 483 (static_initializer -> STATIC block .)
    {               reduce using rule 483 (static_initializer -> STATIC block .)
    @               reduce using rule 483 (static_initializer -> STATIC block .)
    PUBLIC          reduce using rule 483 (static_initializer -> STATIC block .)
    PROTECTED       reduce using rule 483 (static_initializer -> STATIC block .)
    PRIVATE         reduce using rule 483 (static_initializer -> STATIC block .)
    ABSTRACT        reduce using rule 483 (static_initializer -> STATIC block .)
    FINAL           reduce using rule 483 (static_initializer -> STATIC block .)
    NATIVE          reduce using rule 483 (static_initializer -> STATIC block .)
    SYNCHRONIZED    reduce using rule 483 (static_initializer -> STATIC block .)
    TRANSIENT       reduce using rule 483 (static_initializer -> STATIC block .)
    VOLATILE        reduce using rule 483 (static_initializer -> STATIC block .)
    STRICTFP        reduce using rule 483 (static_initializer -> STATIC block .)
    NAME            reduce using rule 483 (static_initializer -> STATIC block .)
    ENUM            reduce using rule 483 (static_initializer -> STATIC block .)
    CLASS           reduce using rule 483 (static_initializer -> STATIC block .)
    INTERFACE       reduce using rule 483 (static_initializer -> STATIC block .)
    <               reduce using rule 483 (static_initializer -> STATIC block .)
    BOOLEAN         reduce using rule 483 (static_initializer -> STATIC block .)
    VOID            reduce using rule 483 (static_initializer -> STATIC block .)
    BYTE            reduce using rule 483 (static_initializer -> STATIC block .)
    SHORT           reduce using rule 483 (static_initializer -> STATIC block .)
    INT             reduce using rule 483 (static_initializer -> STATIC block .)
    LONG            reduce using rule 483 (static_initializer -> STATIC block .)
    CHAR            reduce using rule 483 (static_initializer -> STATIC block .)
    FLOAT           reduce using rule 483 (static_initializer -> STATIC block .)
    DOUBLE          reduce using rule 483 (static_initializer -> STATIC block .)
    }               reduce using rule 483 (static_initializer -> STATIC block .)


state 708

    (486) constructor_header_name -> modifiers_opt type_parameters . NAME (
    (505) method_header_name -> modifiers_opt type_parameters . type NAME (
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 875
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    qualified_name                 shift and go to state 141
    class_or_interface             shift and go to state 144
    class_or_interface_type        shift and go to state 88
    reference_type                 shift and go to state 91
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    type                           shift and go to state 883
    name                           shift and go to state 342

state 709

    (482) field_declaration -> modifiers_opt type . variable_declarators ;
    (506) method_header_name -> modifiers_opt type . NAME (
    (178) variable_declarators -> . variable_declarator
    (179) variable_declarators -> . variable_declarators , variable_declarator
    (180) variable_declarator -> . variable_declarator_id
    (181) variable_declarator -> . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 884

    variable_declarators           shift and go to state 877
    variable_declarator            shift and go to state 346
    variable_declarator_id         shift and go to state 347

state 710

    (504) method_header -> method_header_name formal_parameter_list_opt . ) method_header_extended_dims method_header_throws_clause_opt

    )               shift and go to state 885


state 711

    (502) method_declaration -> method_header method_body .

    ;               reduce using rule 502 (method_declaration -> method_header method_body .)
    STATIC          reduce using rule 502 (method_declaration -> method_header method_body .)
    {               reduce using rule 502 (method_declaration -> method_header method_body .)
    @               reduce using rule 502 (method_declaration -> method_header method_body .)
    PUBLIC          reduce using rule 502 (method_declaration -> method_header method_body .)
    PROTECTED       reduce using rule 502 (method_declaration -> method_header method_body .)
    PRIVATE         reduce using rule 502 (method_declaration -> method_header method_body .)
    ABSTRACT        reduce using rule 502 (method_declaration -> method_header method_body .)
    FINAL           reduce using rule 502 (method_declaration -> method_header method_body .)
    NATIVE          reduce using rule 502 (method_declaration -> method_header method_body .)
    SYNCHRONIZED    reduce using rule 502 (method_declaration -> method_header method_body .)
    TRANSIENT       reduce using rule 502 (method_declaration -> method_header method_body .)
    VOLATILE        reduce using rule 502 (method_declaration -> method_header method_body .)
    STRICTFP        reduce using rule 502 (method_declaration -> method_header method_body .)
    NAME            reduce using rule 502 (method_declaration -> method_header method_body .)
    ENUM            reduce using rule 502 (method_declaration -> method_header method_body .)
    CLASS           reduce using rule 502 (method_declaration -> method_header method_body .)
    INTERFACE       reduce using rule 502 (method_declaration -> method_header method_body .)
    <               reduce using rule 502 (method_declaration -> method_header method_body .)
    BOOLEAN         reduce using rule 502 (method_declaration -> method_header method_body .)
    VOID            reduce using rule 502 (method_declaration -> method_header method_body .)
    BYTE            reduce using rule 502 (method_declaration -> method_header method_body .)
    SHORT           reduce using rule 502 (method_declaration -> method_header method_body .)
    INT             reduce using rule 502 (method_declaration -> method_header method_body .)
    LONG            reduce using rule 502 (method_declaration -> method_header method_body .)
    CHAR            reduce using rule 502 (method_declaration -> method_header method_body .)
    FLOAT           reduce using rule 502 (method_declaration -> method_header method_body .)
    DOUBLE          reduce using rule 502 (method_declaration -> method_header method_body .)
    }               reduce using rule 502 (method_declaration -> method_header method_body .)


state 712

    (503) abstract_method_declaration -> method_header ; .

    ;               reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    STATIC          reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    {               reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    @               reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    PUBLIC          reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    PROTECTED       reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    PRIVATE         reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    ABSTRACT        reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    FINAL           reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    NATIVE          reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    SYNCHRONIZED    reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    TRANSIENT       reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    VOLATILE        reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    STRICTFP        reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    NAME            reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    ENUM            reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    CLASS           reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    INTERFACE       reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    <               reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    BOOLEAN         reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    VOID            reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    BYTE            reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    SHORT           reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    INT             reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    LONG            reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    CHAR            reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    FLOAT           reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    DOUBLE          reduce using rule 503 (abstract_method_declaration -> method_header ; .)
    }               reduce using rule 503 (abstract_method_declaration -> method_header ; .)


state 713

    (466) class_body -> { class_body_declarations_opt } .

    ;               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    @               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    PUBLIC          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    PROTECTED       reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    PRIVATE         reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    STATIC          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    ABSTRACT        reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    FINAL           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    NATIVE          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    SYNCHRONIZED    reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    TRANSIENT       reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    VOLATILE        reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    STRICTFP        reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    ENUM            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    CLASS           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    INTERFACE       reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    $end            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    IF              reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    WHILE           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    FOR             reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    {               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    ASSERT          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    SWITCH          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    DO              reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    BREAK           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    CONTINUE        reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    RETURN          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    THROW           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    TRY             reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    NAME            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    BOOLEAN         reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    VOID            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    BYTE            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    SHORT           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    INT             reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    LONG            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    CHAR            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    FLOAT           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    DOUBLE          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    THIS            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    SUPER           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    PLUSPLUS        reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    MINUSMINUS      reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    NEW             reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    <               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    (               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    NUM             reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    CHAR_LITERAL    reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    STRING_LITERAL  reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    TRUE            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    FALSE           reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    NULL            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    }               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    CASE            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    DEFAULT         reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    [               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    .               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    =               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    TIMES_ASSIGN    reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    DIVIDE_ASSIGN   reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    REMAINDER_ASSIGN reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    PLUS_ASSIGN     reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    MINUS_ASSIGN    reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    LSHIFT_ASSIGN   reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    RSHIFT_ASSIGN   reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    RRSHIFT_ASSIGN  reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    AND_ASSIGN      reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    OR_ASSIGN       reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    XOR_ASSIGN      reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    *               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    /               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    %               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    +               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    -               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    LSHIFT          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    RSHIFT          reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    RRSHIFT         reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    >               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    GTEQ            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    LTEQ            reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    INSTANCEOF      reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    EQ              reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    NEQ             reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    &               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    ^               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    |               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    AND             reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    ?               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    OR              reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    )               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    :               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    ]               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)
    ,               reduce using rule 466 (class_body -> { class_body_declarations_opt } .)


state 714

    (595) single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .

    @               reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    PUBLIC          reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    PROTECTED       reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    PRIVATE         reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    STATIC          reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    ABSTRACT        reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    FINAL           reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    NATIVE          reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    SYNCHRONIZED    reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    TRANSIENT       reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    VOLATILE        reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    STRICTFP        reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    ENUM            reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    CLASS           reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    INTERFACE       reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    NAME            reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    <               reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    BOOLEAN         reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    VOID            reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    BYTE            reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    SHORT           reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    INT             reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    LONG            reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    CHAR            reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    FLOAT           reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    DOUBLE          reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    PACKAGE         reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    )               reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    ,               reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    }               reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)
    ;               reduce using rule 595 (single_member_annotation -> annotation_name ( single_member_annotation_member_value ) .)


state 715

    (587) normal_annotation -> annotation_name ( member_value_pairs_opt ) .

    PACKAGE         reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    @               reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    PUBLIC          reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    PROTECTED       reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    PRIVATE         reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    STATIC          reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    ABSTRACT        reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    FINAL           reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    NATIVE          reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    SYNCHRONIZED    reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    TRANSIENT       reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    VOLATILE        reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    STRICTFP        reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    ENUM            reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    CLASS           reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    INTERFACE       reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    BOOLEAN         reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    VOID            reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    BYTE            reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    SHORT           reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    INT             reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    LONG            reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    CHAR            reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    FLOAT           reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    DOUBLE          reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    NAME            reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    ,               reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    }               reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    <               reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    )               reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)
    ;               reduce using rule 587 (normal_annotation -> annotation_name ( member_value_pairs_opt ) .)


state 716

    (592) member_value_pairs -> member_value_pairs , . member_value_pair
    (593) member_value_pair -> . simple_name = member_value
    (343) simple_name -> . NAME

    NAME            shift and go to state 212

    member_value_pair              shift and go to state 886
    simple_name                    shift and go to state 887

state 717

    (580) member_value_array_initializer -> { , . }

    }               shift and go to state 888


state 718

    (578) member_value_array_initializer -> { member_values . , }
    (579) member_value_array_initializer -> { member_values . }
    (583) member_values -> member_values . , member_value

    ,               shift and go to state 890
    }               shift and go to state 889


state 719

    (582) member_values -> member_value .

    ,               reduce using rule 582 (member_values -> member_value .)
    }               reduce using rule 582 (member_values -> member_value .)


state 720

    (581) member_value_array_initializer -> { } .

    ,               reduce using rule 581 (member_value_array_initializer -> { } .)
    )               reduce using rule 581 (member_value_array_initializer -> { } .)
    ;               reduce using rule 581 (member_value_array_initializer -> { } .)
    }               reduce using rule 581 (member_value_array_initializer -> { } .)


state 721

    (593) member_value_pair -> simple_name = . member_value
    (574) member_value -> . conditional_expression_not_name
    (575) member_value -> . name
    (576) member_value -> . annotation
    (577) member_value -> . member_value_array_initializer
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name ? expression : conditional_expression
    (24) conditional_expression_not_name -> . name ? expression : conditional_expression
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (578) member_value_array_initializer -> . { member_values , }
    (579) member_value_array_initializer -> . { member_values }
    (580) member_value_array_initializer -> . { , }
    (581) member_value_array_initializer -> . { }
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name OR conditional_and_expression
    (29) conditional_or_expression_not_name -> . name OR conditional_and_expression
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name AND inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name AND inclusive_or_expression
    (588) annotation_name -> . @ name
    (37) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (38) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name | exclusive_or_expression
    (39) inclusive_or_expression_not_name -> . name | exclusive_or_expression
    (42) exclusive_or_expression_not_name -> . and_expression_not_name
    (43) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name ^ and_expression
    (44) exclusive_or_expression_not_name -> . name ^ and_expression
    (47) and_expression_not_name -> . equality_expression_not_name
    (48) and_expression_not_name -> . and_expression_not_name & equality_expression
    (49) and_expression_not_name -> . name & equality_expression
    (53) equality_expression_not_name -> . instanceof_expression_not_name
    (54) equality_expression_not_name -> . equality_expression_not_name EQ instanceof_expression
    (55) equality_expression_not_name -> . name EQ instanceof_expression
    (56) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (57) equality_expression_not_name -> . name NEQ instanceof_expression
    (60) instanceof_expression_not_name -> . relational_expression_not_name
    (61) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (62) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (68) relational_expression_not_name -> . shift_expression_not_name
    (69) relational_expression_not_name -> . shift_expression_not_name < shift_expression
    (70) relational_expression_not_name -> . name < shift_expression
    (71) relational_expression_not_name -> . shift_expression_not_name > shift_expression
    (72) relational_expression_not_name -> . name > shift_expression
    (73) relational_expression_not_name -> . shift_expression_not_name GTEQ shift_expression
    (74) relational_expression_not_name -> . name GTEQ shift_expression
    (75) relational_expression_not_name -> . shift_expression_not_name LTEQ shift_expression
    (76) relational_expression_not_name -> . name LTEQ shift_expression
    (81) shift_expression_not_name -> . additive_expression_not_name
    (82) shift_expression_not_name -> . shift_expression_not_name LSHIFT additive_expression
    (83) shift_expression_not_name -> . name LSHIFT additive_expression
    (84) shift_expression_not_name -> . shift_expression_not_name RSHIFT additive_expression
    (85) shift_expression_not_name -> . name RSHIFT additive_expression
    (86) shift_expression_not_name -> . shift_expression_not_name RRSHIFT additive_expression
    (87) shift_expression_not_name -> . name RRSHIFT additive_expression
    (91) additive_expression_not_name -> . multiplicative_expression_not_name
    (92) additive_expression_not_name -> . additive_expression_not_name + multiplicative_expression
    (93) additive_expression_not_name -> . name + multiplicative_expression
    (94) additive_expression_not_name -> . additive_expression_not_name - multiplicative_expression
    (95) additive_expression_not_name -> . name - multiplicative_expression
    (100) multiplicative_expression_not_name -> . unary_expression_not_name
    (101) multiplicative_expression_not_name -> . multiplicative_expression_not_name * unary_expression
    (102) multiplicative_expression_not_name -> . name * unary_expression
    (103) multiplicative_expression_not_name -> . multiplicative_expression_not_name / unary_expression
    (104) multiplicative_expression_not_name -> . name / unary_expression
    (105) multiplicative_expression_not_name -> . multiplicative_expression_not_name % unary_expression
    (106) multiplicative_expression_not_name -> . name % unary_expression
    (112) unary_expression_not_name -> . pre_increment_expression
    (113) unary_expression_not_name -> . pre_decrement_expression
    (114) unary_expression_not_name -> . + unary_expression
    (115) unary_expression_not_name -> . - unary_expression
    (116) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (123) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (124) unary_expression_not_plus_minus_not_name -> . ~ unary_expression
    (125) unary_expression_not_plus_minus_not_name -> . ! unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . cast_expression
    (131) postfix_expression_not_name -> . primary
    (132) postfix_expression_not_name -> . post_increment_expression
    (133) postfix_expression_not_name -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    {               shift and go to state 467
    NAME            shift and go to state 179
    @               shift and go to state 402
    +               shift and go to state 264
    -               shift and go to state 278
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 267
    !               shift and go to state 277
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    array_creation_without_array_initializer shift and go to state 95
    relational_expression_not_name shift and go to state 262
    array_access                   shift and go to state 90
    primary                        shift and go to state 468
    exclusive_or_expression_not_name shift and go to state 254
    inclusive_or_expression_not_name shift and go to state 269
    multiplicative_expression_not_name shift and go to state 276
    simple_name                    shift and go to state 64
    primitive_type                 shift and go to state 174
    postfix_expression_not_name    shift and go to state 265
    member_value                   shift and go to state 891
    post_decrement_expression      shift and go to state 460
    pre_increment_expression       shift and go to state 266
    postfix_expression             shift and go to state 472
    conditional_expression_not_name shift and go to state 473
    literal                        shift and go to state 146
    instanceof_expression_not_name shift and go to state 273
    cast_expression                shift and go to state 270
    shift_expression_not_name      shift and go to state 256
    unary_expression_not_name      shift and go to state 280
    equality_expression_not_name   shift and go to state 281
    primary_no_new_array           shift and go to state 87
    field_access                   shift and go to state 96
    unary_expression_not_plus_minus_not_name shift and go to state 257
    pre_decrement_expression       shift and go to state 261
    qualified_name                 shift and go to state 141
    single_member_annotation       shift and go to state 18
    conditional_and_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 122
    member_value_array_initializer shift and go to state 474
    array_creation_with_array_initializer shift and go to state 101
    method_invocation              shift and go to state 176
    normal_annotation              shift and go to state 50
    and_expression_not_name        shift and go to state 271
    annotation                     shift and go to state 475
    annotation_name                shift and go to state 38
    name                           shift and go to state 462
    conditional_or_expression_not_name shift and go to state 272
    marker_annotation              shift and go to state 22
    post_increment_expression      shift and go to state 463
    class_instance_creation_expression shift and go to state 156
    additive_expression_not_name   shift and go to state 274

state 722

    (555) annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME .
    (556) annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME . type_parameters
    (430) type_parameters -> . < type_parameter_list1

    EXTENDS         reduce using rule 555 (annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME .)
    IMPLEMENTS      reduce using rule 555 (annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME .)
    {               reduce using rule 555 (annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME .)
    <               shift and go to state 197

    type_parameters                shift and go to state 892

state 723

    (520) interface_member_declarations -> interface_member_declarations interface_member_declaration .

    ;               reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    @               reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PUBLIC          reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PROTECTED       reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    PRIVATE         reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    STATIC          reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    ABSTRACT        reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    FINAL           reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    NATIVE          reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    SYNCHRONIZED    reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    TRANSIENT       reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    VOLATILE        reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    STRICTFP        reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    ENUM            reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    CLASS           reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    INTERFACE       reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    <               reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    BOOLEAN         reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    VOID            reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    BYTE            reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    SHORT           reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    INT             reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    LONG            reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    CHAR            reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    FLOAT           reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    DOUBLE          reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    NAME            reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)
    }               reduce using rule 520 (interface_member_declarations -> interface_member_declarations interface_member_declaration .)


state 724

    (505) method_header_name -> modifiers_opt type_parameters . type NAME (
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_or_interface             shift and go to state 144
    class_or_interface_type        shift and go to state 88
    reference_type                 shift and go to state 91
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    array_type                     shift and go to state 102
    simple_name                    shift and go to state 64
    type                           shift and go to state 883
    name                           shift and go to state 342

state 725

    (516) interface_body -> { interface_member_declarations_opt } .

    ;               reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    @               reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    PUBLIC          reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    PROTECTED       reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    PRIVATE         reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    STATIC          reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    ABSTRACT        reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    FINAL           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    NATIVE          reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    SYNCHRONIZED    reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    TRANSIENT       reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    VOLATILE        reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    STRICTFP        reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    ENUM            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    CLASS           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    INTERFACE       reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    $end            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    IF              reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    WHILE           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    FOR             reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    {               reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    ASSERT          reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    SWITCH          reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    DO              reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    BREAK           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    CONTINUE        reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    RETURN          reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    THROW           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    TRY             reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    NAME            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    BOOLEAN         reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    VOID            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    BYTE            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    SHORT           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    INT             reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    LONG            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    CHAR            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    FLOAT           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    DOUBLE          reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    THIS            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    SUPER           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    PLUSPLUS        reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    MINUSMINUS      reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    NEW             reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    <               reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    (               reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    NUM             reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    CHAR_LITERAL    reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    STRING_LITERAL  reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    TRUE            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    FALSE           reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    NULL            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    }               reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    CASE            reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)
    DEFAULT         reduce using rule 516 (interface_body -> { interface_member_declarations_opt } .)


state 726

    (390) array_type -> generic_type . name dims .

    >               reduce using rule 390 (array_type -> generic_type . name dims .)
    ,               reduce using rule 390 (array_type -> generic_type . name dims .)
    RRSHIFT         reduce using rule 390 (array_type -> generic_type . name dims .)
    RSHIFT          reduce using rule 390 (array_type -> generic_type . name dims .)
    NAME            reduce using rule 390 (array_type -> generic_type . name dims .)
    |               reduce using rule 390 (array_type -> generic_type . name dims .)
    &               reduce using rule 390 (array_type -> generic_type . name dims .)
    INSTANCEOF      reduce using rule 390 (array_type -> generic_type . name dims .)
    EQ              reduce using rule 390 (array_type -> generic_type . name dims .)
    NEQ             reduce using rule 390 (array_type -> generic_type . name dims .)
    ^               reduce using rule 390 (array_type -> generic_type . name dims .)
    AND             reduce using rule 390 (array_type -> generic_type . name dims .)
    ?               reduce using rule 390 (array_type -> generic_type . name dims .)
    OR              reduce using rule 390 (array_type -> generic_type . name dims .)
    )               reduce using rule 390 (array_type -> generic_type . name dims .)
    }               reduce using rule 390 (array_type -> generic_type . name dims .)
    ;               reduce using rule 390 (array_type -> generic_type . name dims .)
    $end            reduce using rule 390 (array_type -> generic_type . name dims .)
    :               reduce using rule 390 (array_type -> generic_type . name dims .)
    ]               reduce using rule 390 (array_type -> generic_type . name dims .)
    ELLIPSIS        reduce using rule 390 (array_type -> generic_type . name dims .)


state 727

    (43) exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .
    (46) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    |               reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    AND             reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    ?               reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    OR              reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    ,               reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    }               reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    ;               reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    )               reduce using rule 43 (exclusive_or_expression_not_name -> exclusive_or_expression_not_name ^ and_expression .)
    &               shift and go to state 388


state 728

    (84) shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    >               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    GTEQ            reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    LTEQ            reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    LSHIFT          reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    RSHIFT          reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    RRSHIFT         reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    EQ              reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    NEQ             reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    &               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    ^               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    |               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    AND             reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    ?               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    OR              reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    ,               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    }               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    )               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    ;               reduce using rule 84 (shift_expression_not_name -> shift_expression_not_name RSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 729

    (73) relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    EQ              reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    NEQ             reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    &               reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    ^               reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    |               reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    AND             reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    ?               reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    OR              reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    ,               reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    )               reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    ;               reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    }               reduce using rule 73 (relational_expression_not_name -> shift_expression_not_name GTEQ shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 730

    (75) relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    EQ              reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    NEQ             reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    &               reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    ^               reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    |               reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    AND             reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    ?               reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    OR              reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    ,               reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    )               reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    ;               reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    }               reduce using rule 75 (relational_expression_not_name -> shift_expression_not_name LTEQ shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 731

    (82) shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    >               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    GTEQ            reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    LTEQ            reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    LSHIFT          reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    RSHIFT          reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    RRSHIFT         reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    EQ              reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    NEQ             reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    &               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    ^               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    |               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    AND             reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    ?               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    OR              reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    ,               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    }               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    )               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    ;               reduce using rule 82 (shift_expression_not_name -> shift_expression_not_name LSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 732

    (86) shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    >               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    GTEQ            reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    LTEQ            reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    LSHIFT          reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    RSHIFT          reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    RRSHIFT         reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    EQ              reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    NEQ             reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    &               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    ^               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    |               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    AND             reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    ?               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    OR              reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    ,               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    }               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    )               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    ;               reduce using rule 86 (shift_expression_not_name -> shift_expression_not_name RRSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 733

    (69) relational_expression_not_name -> shift_expression_not_name < shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    EQ              reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    NEQ             reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    &               reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    ^               reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    |               reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    AND             reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    ?               reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    OR              reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    ,               reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    )               reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    ;               reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    }               reduce using rule 69 (relational_expression_not_name -> shift_expression_not_name < shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 734

    (71) relational_expression_not_name -> shift_expression_not_name > shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    EQ              reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    NEQ             reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    &               reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    ^               reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    |               reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    AND             reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    ?               reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    OR              reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    ,               reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    )               reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    ;               reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    }               reduce using rule 71 (relational_expression_not_name -> shift_expression_not_name > shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 735

    (33) conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression .
    (36) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression .)
    ?               reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression .)
    OR              reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression .)
    ,               reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression .)
    }               reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression .)
    )               reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression .)
    ;               reduce using rule 33 (conditional_and_expression_not_name -> conditional_and_expression_not_name AND inclusive_or_expression .)
    |               shift and go to state 360


state 736

    (85) shift_expression_not_name -> name RSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    >               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    GTEQ            reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    LTEQ            reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    LSHIFT          reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    RSHIFT          reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    RRSHIFT         reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    EQ              reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    NEQ             reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    &               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    ^               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    |               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    AND             reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    ?               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    OR              reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    ,               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    }               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    )               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    ;               reduce using rule 85 (shift_expression_not_name -> name RSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 737

    (74) relational_expression_not_name -> name GTEQ shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    EQ              reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    NEQ             reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    &               reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    ^               reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    |               reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    AND             reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    ?               reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    OR              reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    ,               reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    )               reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    ;               reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    }               reduce using rule 74 (relational_expression_not_name -> name GTEQ shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 738

    (95) additive_expression_not_name -> name - multiplicative_expression .
    (97) multiplicative_expression -> multiplicative_expression . * unary_expression
    (98) multiplicative_expression -> multiplicative_expression . / unary_expression
    (99) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    -               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    <               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    >               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    GTEQ            reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    LTEQ            reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    LSHIFT          reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    RSHIFT          reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    RRSHIFT         reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    INSTANCEOF      reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    EQ              reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    NEQ             reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    &               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    ^               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    |               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    AND             reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    ?               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    OR              reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    )               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    ,               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    }               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    ;               reduce using rule 95 (additive_expression_not_name -> name - multiplicative_expression .)
    *               shift and go to state 369
    /               shift and go to state 371
    %               shift and go to state 370


state 739

    (70) relational_expression_not_name -> name < shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    EQ              reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    NEQ             reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    &               reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    ^               reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    |               reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    AND             reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    ?               reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    OR              reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    ,               reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    )               reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    ;               reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    }               reduce using rule 70 (relational_expression_not_name -> name < shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 740

    (44) exclusive_or_expression_not_name -> name ^ and_expression .
    (46) and_expression -> and_expression . & equality_expression

    ^               reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    |               reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    AND             reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    ?               reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    OR              reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    ,               reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    }               reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    ;               reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    )               reduce using rule 44 (exclusive_or_expression_not_name -> name ^ and_expression .)
    &               shift and go to state 388


state 741

    (83) shift_expression_not_name -> name LSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    >               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    GTEQ            reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    LTEQ            reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    LSHIFT          reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    RSHIFT          reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    RRSHIFT         reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    EQ              reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    NEQ             reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    &               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    ^               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    |               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    AND             reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    ?               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    OR              reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    ,               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    }               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    )               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    ;               reduce using rule 83 (shift_expression_not_name -> name LSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 742

    (106) multiplicative_expression_not_name -> name % unary_expression .

    *               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    /               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    %               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    +               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    -               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    <               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    >               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    GTEQ            reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    LTEQ            reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    LSHIFT          reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    RSHIFT          reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    RRSHIFT         reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    INSTANCEOF      reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    EQ              reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    NEQ             reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    &               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    ^               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    |               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    AND             reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    ?               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    OR              reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    ,               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    }               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    )               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)
    ;               reduce using rule 106 (multiplicative_expression_not_name -> name % unary_expression .)


state 743

    (57) equality_expression_not_name -> name NEQ instanceof_expression .
    (59) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQ              reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    NEQ             reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    &               reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    ^               reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    |               reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    AND             reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    ?               reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    OR              reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    )               reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    ,               reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    ;               reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    }               reduce using rule 57 (equality_expression_not_name -> name NEQ instanceof_expression .)
    INSTANCEOF      shift and go to state 386


state 744

    (49) and_expression_not_name -> name & equality_expression .
    (51) equality_expression -> equality_expression . EQ instanceof_expression
    (52) equality_expression -> equality_expression . NEQ instanceof_expression

    &               reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    ^               reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    |               reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    AND             reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    ?               reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    OR              reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    )               reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    ,               reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    }               reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    ;               reduce using rule 49 (and_expression_not_name -> name & equality_expression .)
    EQ              shift and go to state 384
    NEQ             shift and go to state 385


state 745

    (93) additive_expression_not_name -> name + multiplicative_expression .
    (97) multiplicative_expression -> multiplicative_expression . * unary_expression
    (98) multiplicative_expression -> multiplicative_expression . / unary_expression
    (99) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    -               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    <               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    >               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    GTEQ            reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    LTEQ            reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    LSHIFT          reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    RSHIFT          reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    RRSHIFT         reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    INSTANCEOF      reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    EQ              reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    NEQ             reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    &               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    ^               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    |               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    AND             reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    ?               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    OR              reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    )               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    ,               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    }               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    ;               reduce using rule 93 (additive_expression_not_name -> name + multiplicative_expression .)
    *               shift and go to state 369
    /               shift and go to state 371
    %               shift and go to state 370


state 746

    (102) multiplicative_expression_not_name -> name * unary_expression .

    *               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    /               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    %               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    +               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    -               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    <               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    >               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    GTEQ            reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    LTEQ            reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    LSHIFT          reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    RSHIFT          reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    RRSHIFT         reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    INSTANCEOF      reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    EQ              reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    NEQ             reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    &               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    ^               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    |               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    AND             reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    ?               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    OR              reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    ,               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    }               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    )               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)
    ;               reduce using rule 102 (multiplicative_expression_not_name -> name * unary_expression .)


state 747

    (104) multiplicative_expression_not_name -> name / unary_expression .

    *               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    /               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    %               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    +               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    -               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    <               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    >               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    GTEQ            reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    LTEQ            reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    LSHIFT          reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    RSHIFT          reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    RRSHIFT         reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    INSTANCEOF      reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    EQ              reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    NEQ             reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    &               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    ^               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    |               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    AND             reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    ?               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    OR              reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    ,               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    }               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    )               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)
    ;               reduce using rule 104 (multiplicative_expression_not_name -> name / unary_expression .)


state 748

    (24) conditional_expression_not_name -> name ? expression . : conditional_expression

    :               shift and go to state 893


state 749

    (72) relational_expression_not_name -> name > shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    EQ              reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    NEQ             reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    &               reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    ^               reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    |               reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    AND             reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    ?               reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    OR              reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    ,               reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    )               reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    ;               reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    }               reduce using rule 72 (relational_expression_not_name -> name > shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 750

    (61) instanceof_expression_not_name -> name INSTANCEOF reference_type .

    INSTANCEOF      reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    EQ              reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    NEQ             reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    &               reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    ^               reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    |               reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    AND             reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    ?               reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    OR              reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    ,               reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    )               reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    }               reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)
    ;               reduce using rule 61 (instanceof_expression_not_name -> name INSTANCEOF reference_type .)


state 751

    (34) conditional_and_expression_not_name -> name AND inclusive_or_expression .
    (36) inclusive_or_expression -> inclusive_or_expression . | exclusive_or_expression

    AND             reduce using rule 34 (conditional_and_expression_not_name -> name AND inclusive_or_expression .)
    ?               reduce using rule 34 (conditional_and_expression_not_name -> name AND inclusive_or_expression .)
    OR              reduce using rule 34 (conditional_and_expression_not_name -> name AND inclusive_or_expression .)
    ,               reduce using rule 34 (conditional_and_expression_not_name -> name AND inclusive_or_expression .)
    }               reduce using rule 34 (conditional_and_expression_not_name -> name AND inclusive_or_expression .)
    )               reduce using rule 34 (conditional_and_expression_not_name -> name AND inclusive_or_expression .)
    ;               reduce using rule 34 (conditional_and_expression_not_name -> name AND inclusive_or_expression .)
    |               shift and go to state 360


state 752

    (29) conditional_or_expression_not_name -> name OR conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    ?               reduce using rule 29 (conditional_or_expression_not_name -> name OR conditional_and_expression .)
    OR              reduce using rule 29 (conditional_or_expression_not_name -> name OR conditional_and_expression .)
    )               reduce using rule 29 (conditional_or_expression_not_name -> name OR conditional_and_expression .)
    ,               reduce using rule 29 (conditional_or_expression_not_name -> name OR conditional_and_expression .)
    }               reduce using rule 29 (conditional_or_expression_not_name -> name OR conditional_and_expression .)
    ;               reduce using rule 29 (conditional_or_expression_not_name -> name OR conditional_and_expression .)
    AND             shift and go to state 365


state 753

    (55) equality_expression_not_name -> name EQ instanceof_expression .
    (59) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQ              reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    NEQ             reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    &               reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    ^               reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    |               reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    AND             reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    ?               reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    OR              reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    )               reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    ,               reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    ;               reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    }               reduce using rule 55 (equality_expression_not_name -> name EQ instanceof_expression .)
    INSTANCEOF      shift and go to state 386


state 754

    (76) relational_expression_not_name -> name LTEQ shift_expression .
    (78) shift_expression -> shift_expression . LSHIFT additive_expression
    (79) shift_expression -> shift_expression . RSHIFT additive_expression
    (80) shift_expression -> shift_expression . RRSHIFT additive_expression

    INSTANCEOF      reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    EQ              reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    NEQ             reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    &               reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    ^               reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    |               reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    AND             reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    ?               reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    OR              reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    ,               reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    )               reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    ;               reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    }               reduce using rule 76 (relational_expression_not_name -> name LTEQ shift_expression .)
    LSHIFT          shift and go to state 373
    RSHIFT          shift and go to state 372
    RRSHIFT         shift and go to state 374


state 755

    (87) shift_expression_not_name -> name RRSHIFT additive_expression .
    (89) additive_expression -> additive_expression . + multiplicative_expression
    (90) additive_expression -> additive_expression . - multiplicative_expression

    <               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    >               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    GTEQ            reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    LTEQ            reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    LSHIFT          reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    RSHIFT          reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    RRSHIFT         reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    INSTANCEOF      reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    EQ              reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    NEQ             reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    &               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    ^               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    |               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    AND             reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    ?               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    OR              reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    ,               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    }               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    )               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    ;               reduce using rule 87 (shift_expression_not_name -> name RRSHIFT additive_expression .)
    +               shift and go to state 377
    -               shift and go to state 378


state 756

    (39) inclusive_or_expression_not_name -> name | exclusive_or_expression .
    (41) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 39 (inclusive_or_expression_not_name -> name | exclusive_or_expression .)
    AND             reduce using rule 39 (inclusive_or_expression_not_name -> name | exclusive_or_expression .)
    ?               reduce using rule 39 (inclusive_or_expression_not_name -> name | exclusive_or_expression .)
    OR              reduce using rule 39 (inclusive_or_expression_not_name -> name | exclusive_or_expression .)
    ;               reduce using rule 39 (inclusive_or_expression_not_name -> name | exclusive_or_expression .)
    ,               reduce using rule 39 (inclusive_or_expression_not_name -> name | exclusive_or_expression .)
    }               reduce using rule 39 (inclusive_or_expression_not_name -> name | exclusive_or_expression .)
    )               reduce using rule 39 (inclusive_or_expression_not_name -> name | exclusive_or_expression .)
    ^               shift and go to state 375


state 757

    (38) inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .
    (41) exclusive_or_expression -> exclusive_or_expression . ^ and_expression

    |               reduce using rule 38 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .)
    AND             reduce using rule 38 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .)
    ?               reduce using rule 38 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .)
    OR              reduce using rule 38 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .)
    ;               reduce using rule 38 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .)
    ,               reduce using rule 38 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .)
    }               reduce using rule 38 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .)
    )               reduce using rule 38 (inclusive_or_expression_not_name -> inclusive_or_expression_not_name | exclusive_or_expression .)
    ^               shift and go to state 375


state 758

    (48) and_expression_not_name -> and_expression_not_name & equality_expression .
    (51) equality_expression -> equality_expression . EQ instanceof_expression
    (52) equality_expression -> equality_expression . NEQ instanceof_expression

    &               reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    ^               reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    |               reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    AND             reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    ?               reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    OR              reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    )               reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    ,               reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    }               reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    ;               reduce using rule 48 (and_expression_not_name -> and_expression_not_name & equality_expression .)
    EQ              shift and go to state 384
    NEQ             shift and go to state 385


state 759

    (28) conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression .
    (31) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    ?               reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression .)
    OR              reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression .)
    )               reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression .)
    ,               reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression .)
    }               reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression .)
    ;               reduce using rule 28 (conditional_or_expression_not_name -> conditional_or_expression_not_name OR conditional_and_expression .)
    AND             shift and go to state 365


state 760

    (23) conditional_expression_not_name -> conditional_or_expression_not_name ? expression . : conditional_expression

    :               shift and go to state 894


state 761

    (62) instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .

    INSTANCEOF      reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    EQ              reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    NEQ             reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    &               reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    ^               reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    |               reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    AND             reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    ?               reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    OR              reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    ,               reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    )               reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    }               reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)
    ;               reduce using rule 62 (instanceof_expression_not_name -> instanceof_expression_not_name INSTANCEOF reference_type .)


state 762

    (92) additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .
    (97) multiplicative_expression -> multiplicative_expression . * unary_expression
    (98) multiplicative_expression -> multiplicative_expression . / unary_expression
    (99) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    -               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    <               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    >               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    GTEQ            reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    LTEQ            reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    LSHIFT          reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    RSHIFT          reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    RRSHIFT         reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    INSTANCEOF      reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    EQ              reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    NEQ             reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    &               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    ^               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    |               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    AND             reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    ?               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    OR              reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    )               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    ,               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    }               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    ;               reduce using rule 92 (additive_expression_not_name -> additive_expression_not_name + multiplicative_expression .)
    *               shift and go to state 369
    /               shift and go to state 371
    %               shift and go to state 370


state 763

    (94) additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .
    (97) multiplicative_expression -> multiplicative_expression . * unary_expression
    (98) multiplicative_expression -> multiplicative_expression . / unary_expression
    (99) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    -               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    <               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    >               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    GTEQ            reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    LTEQ            reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    LSHIFT          reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    RSHIFT          reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    RRSHIFT         reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    INSTANCEOF      reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    EQ              reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    NEQ             reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    &               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    ^               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    |               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    AND             reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    ?               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    OR              reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    )               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    ,               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    }               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    ;               reduce using rule 94 (additive_expression_not_name -> additive_expression_not_name - multiplicative_expression .)
    *               shift and go to state 369
    /               shift and go to state 371
    %               shift and go to state 370


state 764

    (101) multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .

    *               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    /               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    %               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    +               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    -               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    <               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    >               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    GTEQ            reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    LTEQ            reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    LSHIFT          reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    RSHIFT          reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    RRSHIFT         reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    INSTANCEOF      reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    EQ              reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    NEQ             reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    &               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    ^               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    |               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    AND             reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    ?               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    OR              reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    ,               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    }               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    )               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)
    ;               reduce using rule 101 (multiplicative_expression_not_name -> multiplicative_expression_not_name * unary_expression .)


state 765

    (105) multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .

    *               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    /               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    %               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    +               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    -               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    <               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    >               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    GTEQ            reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    LTEQ            reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    LSHIFT          reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    RSHIFT          reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    RRSHIFT         reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    INSTANCEOF      reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    EQ              reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    NEQ             reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    &               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    ^               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    |               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    AND             reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    ?               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    OR              reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    ,               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    }               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    )               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)
    ;               reduce using rule 105 (multiplicative_expression_not_name -> multiplicative_expression_not_name % unary_expression .)


state 766

    (103) multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .

    *               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    /               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    %               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    +               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    -               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    <               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    >               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    GTEQ            reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    LTEQ            reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    LSHIFT          reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    RSHIFT          reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    RRSHIFT         reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    INSTANCEOF      reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    EQ              reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    NEQ             reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    &               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    ^               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    |               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    AND             reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    ?               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    OR              reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    ,               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    }               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    )               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)
    ;               reduce using rule 103 (multiplicative_expression_not_name -> multiplicative_expression_not_name / unary_expression .)


state 767

    (56) equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .
    (59) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQ              reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    NEQ             reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    &               reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    ^               reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    |               reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    AND             reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    ?               reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    OR              reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    )               reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    ,               reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    ;               reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    }               reduce using rule 56 (equality_expression_not_name -> equality_expression_not_name NEQ instanceof_expression .)
    INSTANCEOF      shift and go to state 386


state 768

    (54) equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .
    (59) instanceof_expression -> instanceof_expression . INSTANCEOF reference_type

    EQ              reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    NEQ             reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    &               reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    ^               reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    |               reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    AND             reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    ?               reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    OR              reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    )               reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    ,               reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    ;               reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    }               reduce using rule 54 (equality_expression_not_name -> equality_expression_not_name EQ instanceof_expression .)
    INSTANCEOF      shift and go to state 386


state 769

    (384) class_or_interface -> generic_type . name .
    (390) array_type -> generic_type . name . dims
    (344) qualified_name -> name . . simple_name
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    <               reduce using rule 384 (class_or_interface -> generic_type . name .)
    RRSHIFT         reduce using rule 384 (class_or_interface -> generic_type . name .)
    RSHIFT          reduce using rule 384 (class_or_interface -> generic_type . name .)
    >               reduce using rule 384 (class_or_interface -> generic_type . name .)
    ,               reduce using rule 384 (class_or_interface -> generic_type . name .)
    &               reduce using rule 384 (class_or_interface -> generic_type . name .)
    .               shift and go to state 437
    [               shift and go to state 238

    dims                           shift and go to state 726
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 770

    (419) wildcard_bounds1 -> EXTENDS reference_type1 .

    .               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    [               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    >               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    ,               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    &               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    RSHIFT          reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    RRSHIFT         reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    SUPER           reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    THIS            reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    NAME            reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    (               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    IMPLEMENTS      reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    {               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    INSTANCEOF      reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    EQ              reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    NEQ             reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    ^               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    |               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    AND             reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    ?               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    OR              reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    $end            reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    ;               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    :               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    )               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    ]               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    }               reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)
    ELLIPSIS        reduce using rule 419 (wildcard_bounds1 -> EXTENDS reference_type1 .)


state 771

    (415) wildcard_bounds -> EXTENDS reference_type .
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 415 (wildcard_bounds -> EXTENDS reference_type .)
    >               shift and go to state 547


state 772

    (420) wildcard_bounds1 -> SUPER reference_type1 .

    .               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    [               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    >               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    ,               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    &               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    RSHIFT          reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    RRSHIFT         reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    SUPER           reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    THIS            reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    NAME            reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    (               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    IMPLEMENTS      reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    {               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    INSTANCEOF      reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    EQ              reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    NEQ             reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    ^               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    |               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    AND             reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    ?               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    OR              reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    $end            reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    ;               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    :               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    )               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    ]               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    }               reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)
    ELLIPSIS        reduce using rule 420 (wildcard_bounds1 -> SUPER reference_type1 .)


state 773

    (416) wildcard_bounds -> SUPER reference_type .
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 416 (wildcard_bounds -> SUPER reference_type .)
    >               shift and go to state 547


state 774

    (396) type_argument -> reference_type .
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 396 (type_argument -> reference_type .)
    >               shift and go to state 547


state 775

    (393) type_argument_list1 -> type_argument_list , type_argument1 .

    .               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    [               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    )               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    >               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    ,               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    &               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    SUPER           reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    THIS            reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    NAME            reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    (               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    IMPLEMENTS      reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    {               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    INSTANCEOF      reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    EQ              reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    NEQ             reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    ^               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    |               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    AND             reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    ?               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    OR              reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    $end            reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    ;               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    :               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    ]               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    }               reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    ELLIPSIS        reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    RSHIFT          reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)
    RRSHIFT         reduce using rule 393 (type_argument_list1 -> type_argument_list , type_argument1 .)


state 776

    (395) type_argument_list -> type_argument_list , type_argument .

    ,               reduce using rule 395 (type_argument_list -> type_argument_list , type_argument .)


state 777

    (401) reference_type1 -> class_or_interface < type_argument_list2 .

    SUPER           reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    THIS            reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    NAME            reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    .               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    [               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    (               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    IMPLEMENTS      reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    {               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    ,               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    INSTANCEOF      reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    EQ              reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    NEQ             reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    &               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    ^               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    |               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    AND             reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    ?               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    OR              reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    $end            reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    ;               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    :               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    )               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    ]               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    }               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    ELLIPSIS        reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    >               reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    RSHIFT          reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    RRSHIFT         reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    EXTENDS         reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    BOOLEAN         reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    VOID            reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    BYTE            reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    SHORT           reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    INT             reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    LONG            reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    CHAR            reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    FLOAT           reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)
    DOUBLE          reduce using rule 401 (reference_type1 -> class_or_interface < type_argument_list2 .)


state 778

    (406) reference_type2 -> reference_type . RSHIFT
    (396) type_argument -> reference_type .
    (400) reference_type1 -> reference_type . >

    RSHIFT          shift and go to state 895
    ,               reduce using rule 396 (type_argument -> reference_type .)
    >               shift and go to state 547


state 779

    (421) wildcard2 -> ? . RSHIFT
    (422) wildcard2 -> ? . wildcard_bounds2
    (417) wildcard1 -> ? . >
    (418) wildcard1 -> ? . wildcard_bounds1
    (413) wildcard -> ? .
    (414) wildcard -> ? . wildcard_bounds
    (423) wildcard_bounds2 -> . EXTENDS reference_type2
    (424) wildcard_bounds2 -> . SUPER reference_type2
    (419) wildcard_bounds1 -> . EXTENDS reference_type1
    (420) wildcard_bounds1 -> . SUPER reference_type1
    (415) wildcard_bounds -> . EXTENDS reference_type
    (416) wildcard_bounds -> . SUPER reference_type

    RSHIFT          shift and go to state 896
    >               shift and go to state 553
    ,               reduce using rule 413 (wildcard -> ? .)
    EXTENDS         shift and go to state 898
    SUPER           shift and go to state 899

    wildcard_bounds                shift and go to state 549
    wildcard_bounds2               shift and go to state 897
    wildcard_bounds1               shift and go to state 550

state 780

    (405) type_argument2 -> wildcard2 .

    SUPER           reduce using rule 405 (type_argument2 -> wildcard2 .)
    THIS            reduce using rule 405 (type_argument2 -> wildcard2 .)
    NAME            reduce using rule 405 (type_argument2 -> wildcard2 .)
    .               reduce using rule 405 (type_argument2 -> wildcard2 .)
    [               reduce using rule 405 (type_argument2 -> wildcard2 .)
    (               reduce using rule 405 (type_argument2 -> wildcard2 .)
    IMPLEMENTS      reduce using rule 405 (type_argument2 -> wildcard2 .)
    {               reduce using rule 405 (type_argument2 -> wildcard2 .)
    ,               reduce using rule 405 (type_argument2 -> wildcard2 .)
    INSTANCEOF      reduce using rule 405 (type_argument2 -> wildcard2 .)
    EQ              reduce using rule 405 (type_argument2 -> wildcard2 .)
    NEQ             reduce using rule 405 (type_argument2 -> wildcard2 .)
    &               reduce using rule 405 (type_argument2 -> wildcard2 .)
    ^               reduce using rule 405 (type_argument2 -> wildcard2 .)
    |               reduce using rule 405 (type_argument2 -> wildcard2 .)
    AND             reduce using rule 405 (type_argument2 -> wildcard2 .)
    ?               reduce using rule 405 (type_argument2 -> wildcard2 .)
    OR              reduce using rule 405 (type_argument2 -> wildcard2 .)
    $end            reduce using rule 405 (type_argument2 -> wildcard2 .)
    ;               reduce using rule 405 (type_argument2 -> wildcard2 .)
    :               reduce using rule 405 (type_argument2 -> wildcard2 .)
    )               reduce using rule 405 (type_argument2 -> wildcard2 .)
    ]               reduce using rule 405 (type_argument2 -> wildcard2 .)
    }               reduce using rule 405 (type_argument2 -> wildcard2 .)
    ELLIPSIS        reduce using rule 405 (type_argument2 -> wildcard2 .)
    >               reduce using rule 405 (type_argument2 -> wildcard2 .)
    EXTENDS         reduce using rule 405 (type_argument2 -> wildcard2 .)
    BOOLEAN         reduce using rule 405 (type_argument2 -> wildcard2 .)
    VOID            reduce using rule 405 (type_argument2 -> wildcard2 .)
    BYTE            reduce using rule 405 (type_argument2 -> wildcard2 .)
    SHORT           reduce using rule 405 (type_argument2 -> wildcard2 .)
    INT             reduce using rule 405 (type_argument2 -> wildcard2 .)
    LONG            reduce using rule 405 (type_argument2 -> wildcard2 .)
    CHAR            reduce using rule 405 (type_argument2 -> wildcard2 .)
    FLOAT           reduce using rule 405 (type_argument2 -> wildcard2 .)
    DOUBLE          reduce using rule 405 (type_argument2 -> wildcard2 .)
    RSHIFT          reduce using rule 405 (type_argument2 -> wildcard2 .)
    RRSHIFT         reduce using rule 405 (type_argument2 -> wildcard2 .)


state 781

    (403) type_argument_list2 -> type_argument_list . , type_argument2
    (393) type_argument_list1 -> type_argument_list . , type_argument1
    (395) type_argument_list -> type_argument_list . , type_argument

    ,               shift and go to state 900


state 782

    (407) reference_type2 -> class_or_interface . < type_argument_list3
    (401) reference_type1 -> class_or_interface . < type_argument_list2
    (380) class_or_interface_type -> class_or_interface .
    (385) generic_type -> class_or_interface . type_arguments
    (386) generic_type -> class_or_interface . < >
    (391) type_arguments -> . < type_argument_list1

    <               shift and go to state 901
    RSHIFT          reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    >               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    ,               reduce using rule 380 (class_or_interface_type -> class_or_interface .)
    RRSHIFT         reduce using rule 380 (class_or_interface_type -> class_or_interface .)

    type_arguments                 shift and go to state 353

state 783

    (402) type_argument_list2 -> type_argument2 .

    .               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    [               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    >               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    ,               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    &               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    RSHIFT          reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    RRSHIFT         reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    SUPER           reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    THIS            reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    NAME            reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    (               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    IMPLEMENTS      reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    {               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    INSTANCEOF      reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    EQ              reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    NEQ             reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    ^               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    |               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    AND             reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    ?               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    OR              reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    $end            reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    ;               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    :               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    )               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    ]               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    }               reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    ELLIPSIS        reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    EXTENDS         reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    BOOLEAN         reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    VOID            reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    BYTE            reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    SHORT           reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    INT             reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    LONG            reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    CHAR            reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    FLOAT           reduce using rule 402 (type_argument_list2 -> type_argument2 .)
    DOUBLE          reduce using rule 402 (type_argument_list2 -> type_argument2 .)


state 784

    (404) type_argument2 -> reference_type2 .

    SUPER           reduce using rule 404 (type_argument2 -> reference_type2 .)
    THIS            reduce using rule 404 (type_argument2 -> reference_type2 .)
    NAME            reduce using rule 404 (type_argument2 -> reference_type2 .)
    .               reduce using rule 404 (type_argument2 -> reference_type2 .)
    [               reduce using rule 404 (type_argument2 -> reference_type2 .)
    (               reduce using rule 404 (type_argument2 -> reference_type2 .)
    IMPLEMENTS      reduce using rule 404 (type_argument2 -> reference_type2 .)
    {               reduce using rule 404 (type_argument2 -> reference_type2 .)
    ,               reduce using rule 404 (type_argument2 -> reference_type2 .)
    INSTANCEOF      reduce using rule 404 (type_argument2 -> reference_type2 .)
    EQ              reduce using rule 404 (type_argument2 -> reference_type2 .)
    NEQ             reduce using rule 404 (type_argument2 -> reference_type2 .)
    &               reduce using rule 404 (type_argument2 -> reference_type2 .)
    ^               reduce using rule 404 (type_argument2 -> reference_type2 .)
    |               reduce using rule 404 (type_argument2 -> reference_type2 .)
    AND             reduce using rule 404 (type_argument2 -> reference_type2 .)
    ?               reduce using rule 404 (type_argument2 -> reference_type2 .)
    OR              reduce using rule 404 (type_argument2 -> reference_type2 .)
    $end            reduce using rule 404 (type_argument2 -> reference_type2 .)
    ;               reduce using rule 404 (type_argument2 -> reference_type2 .)
    :               reduce using rule 404 (type_argument2 -> reference_type2 .)
    )               reduce using rule 404 (type_argument2 -> reference_type2 .)
    ]               reduce using rule 404 (type_argument2 -> reference_type2 .)
    }               reduce using rule 404 (type_argument2 -> reference_type2 .)
    ELLIPSIS        reduce using rule 404 (type_argument2 -> reference_type2 .)
    >               reduce using rule 404 (type_argument2 -> reference_type2 .)
    EXTENDS         reduce using rule 404 (type_argument2 -> reference_type2 .)
    BOOLEAN         reduce using rule 404 (type_argument2 -> reference_type2 .)
    VOID            reduce using rule 404 (type_argument2 -> reference_type2 .)
    BYTE            reduce using rule 404 (type_argument2 -> reference_type2 .)
    SHORT           reduce using rule 404 (type_argument2 -> reference_type2 .)
    INT             reduce using rule 404 (type_argument2 -> reference_type2 .)
    LONG            reduce using rule 404 (type_argument2 -> reference_type2 .)
    CHAR            reduce using rule 404 (type_argument2 -> reference_type2 .)
    FLOAT           reduce using rule 404 (type_argument2 -> reference_type2 .)
    DOUBLE          reduce using rule 404 (type_argument2 -> reference_type2 .)
    RSHIFT          reduce using rule 404 (type_argument2 -> reference_type2 .)
    RRSHIFT         reduce using rule 404 (type_argument2 -> reference_type2 .)


state 785

    (150) primary_no_new_array -> name dims . CLASS .

    [               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    .               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    PLUSPLUS        reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    MINUSMINUS      reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    ;               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    *               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    /               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    %               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    +               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    -               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    LSHIFT          reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    RSHIFT          reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    RRSHIFT         reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    >               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    <               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    GTEQ            reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    LTEQ            reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    INSTANCEOF      reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    EQ              reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    NEQ             reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    &               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    ^               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    |               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    AND             reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    ?               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    OR              reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    $end            reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    )               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    :               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    ]               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    ,               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    }               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    =               reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    TIMES_ASSIGN    reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    DIVIDE_ASSIGN   reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    REMAINDER_ASSIGN reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    PLUS_ASSIGN     reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    MINUS_ASSIGN    reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    LSHIFT_ASSIGN   reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    RSHIFT_ASSIGN   reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    RRSHIFT_ASSIGN  reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    AND_ASSIGN      reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    OR_ASSIGN       reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)
    XOR_ASSIGN      reduce using rule 150 (primary_no_new_array -> name dims . CLASS .)


state 786

    (330) array_access -> name [ expression ] .

    [               reduce using rule 330 (array_access -> name [ expression ] .)
    .               reduce using rule 330 (array_access -> name [ expression ] .)
    PLUSPLUS        reduce using rule 330 (array_access -> name [ expression ] .)
    MINUSMINUS      reduce using rule 330 (array_access -> name [ expression ] .)
    *               reduce using rule 330 (array_access -> name [ expression ] .)
    /               reduce using rule 330 (array_access -> name [ expression ] .)
    %               reduce using rule 330 (array_access -> name [ expression ] .)
    +               reduce using rule 330 (array_access -> name [ expression ] .)
    -               reduce using rule 330 (array_access -> name [ expression ] .)
    LSHIFT          reduce using rule 330 (array_access -> name [ expression ] .)
    RSHIFT          reduce using rule 330 (array_access -> name [ expression ] .)
    RRSHIFT         reduce using rule 330 (array_access -> name [ expression ] .)
    >               reduce using rule 330 (array_access -> name [ expression ] .)
    <               reduce using rule 330 (array_access -> name [ expression ] .)
    GTEQ            reduce using rule 330 (array_access -> name [ expression ] .)
    LTEQ            reduce using rule 330 (array_access -> name [ expression ] .)
    INSTANCEOF      reduce using rule 330 (array_access -> name [ expression ] .)
    EQ              reduce using rule 330 (array_access -> name [ expression ] .)
    NEQ             reduce using rule 330 (array_access -> name [ expression ] .)
    &               reduce using rule 330 (array_access -> name [ expression ] .)
    ^               reduce using rule 330 (array_access -> name [ expression ] .)
    |               reduce using rule 330 (array_access -> name [ expression ] .)
    AND             reduce using rule 330 (array_access -> name [ expression ] .)
    ?               reduce using rule 330 (array_access -> name [ expression ] .)
    OR              reduce using rule 330 (array_access -> name [ expression ] .)
    $end            reduce using rule 330 (array_access -> name [ expression ] .)
    ;               reduce using rule 330 (array_access -> name [ expression ] .)
    :               reduce using rule 330 (array_access -> name [ expression ] .)
    )               reduce using rule 330 (array_access -> name [ expression ] .)
    ]               reduce using rule 330 (array_access -> name [ expression ] .)
    ,               reduce using rule 330 (array_access -> name [ expression ] .)
    }               reduce using rule 330 (array_access -> name [ expression ] .)
    =               reduce using rule 330 (array_access -> name [ expression ] .)
    TIMES_ASSIGN    reduce using rule 330 (array_access -> name [ expression ] .)
    DIVIDE_ASSIGN   reduce using rule 330 (array_access -> name [ expression ] .)
    REMAINDER_ASSIGN reduce using rule 330 (array_access -> name [ expression ] .)
    PLUS_ASSIGN     reduce using rule 330 (array_access -> name [ expression ] .)
    MINUS_ASSIGN    reduce using rule 330 (array_access -> name [ expression ] .)
    LSHIFT_ASSIGN   reduce using rule 330 (array_access -> name [ expression ] .)
    RSHIFT_ASSIGN   reduce using rule 330 (array_access -> name [ expression ] .)
    RRSHIFT_ASSIGN  reduce using rule 330 (array_access -> name [ expression ] .)
    AND_ASSIGN      reduce using rule 330 (array_access -> name [ expression ] .)
    OR_ASSIGN       reduce using rule 330 (array_access -> name [ expression ] .)
    XOR_ASSIGN      reduce using rule 330 (array_access -> name [ expression ] .)


state 787

    (318) explicit_constructor_invocation -> name . type_arguments THIS . ( argument_list_opt ) ;

    (               shift and go to state 902


state 788

    (316) explicit_constructor_invocation -> name . type_arguments SUPER . ( argument_list_opt ) ;

    (               shift and go to state 903


state 789

    (222) method_invocation -> name . type_arguments NAME . ( argument_list_opt )

    (               shift and go to state 904


state 790

    (314) explicit_constructor_invocation -> name . THIS ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 905
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 791

    (312) explicit_constructor_invocation -> name . SUPER ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 906
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 792

    (225) method_invocation -> name . NAME ( . argument_list_opt )
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 907
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 793

    (307) explicit_constructor_invocation -> THIS ( argument_list_opt ) . ;

    ;               shift and go to state 908


state 794

    (549) argument_list -> argument_list , . expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 909
    conditional_and_expression     shift and go to state 161

state 795

    (282) synchronized_statement -> SYNCHRONIZED ( expression ) . block
    (164) block -> . { block_statements_opt }

    {               shift and go to state 106

    block                          shift and go to state 910

state 796

    (310) explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt . ) ;

    )               shift and go to state 911


state 797

    (309) explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt . ) ;

    )               shift and go to state 912


state 798

    (331) array_access -> primary_no_new_array [ expression ] .

    [               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    .               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    PLUSPLUS        reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    MINUSMINUS      reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    *               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    /               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    %               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    +               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    -               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    LSHIFT          reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    RSHIFT          reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    RRSHIFT         reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    >               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    <               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    GTEQ            reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    LTEQ            reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    INSTANCEOF      reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    EQ              reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    NEQ             reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    &               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    ^               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    |               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    AND             reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    ?               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    OR              reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    $end            reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    ;               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    :               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    )               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    ]               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    ,               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    }               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    =               reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    TIMES_ASSIGN    reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    DIVIDE_ASSIGN   reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    REMAINDER_ASSIGN reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    PLUS_ASSIGN     reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    MINUS_ASSIGN    reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    LSHIFT_ASSIGN   reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    RSHIFT_ASSIGN   reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    RRSHIFT_ASSIGN  reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    AND_ASSIGN      reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    OR_ASSIGN       reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)
    XOR_ASSIGN      reduce using rule 331 (array_access -> primary_no_new_array [ expression ] .)


state 799

    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (344) qualified_name -> name . . simple_name
    (325) class_instance_creation_expression_name -> name . .
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (391) type_arguments -> . < type_argument_list1
    (343) simple_name -> . NAME

    NAME            shift and go to state 564
    NEW             reduce using rule 325 (class_instance_creation_expression_name -> name . .)
    THIS            shift and go to state 645
    SUPER           shift and go to state 647
    CLASS           shift and go to state 563
    <               shift and go to state 67

    simple_name                    shift and go to state 560
    type_arguments                 shift and go to state 646

state 800

    (243) statement_expression_list -> statement_expression_list , . statement_expression
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (325) class_instance_creation_expression_name -> . name .
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NAME            shift and go to state 584
    SUPER           shift and go to state 586
    NEW             shift and go to state 114
    THIS            shift and go to state 158
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    array_creation_without_array_initializer shift and go to state 95
    primary                        shift and go to state 579
    post_decrement_expression      shift and go to state 60
    array_access                   shift and go to state 90
    postfix_expression             shift and go to state 59
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    statement_expression           shift and go to state 913
    method_invocation              shift and go to state 120
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 914
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    pre_decrement_expression       shift and go to state 79

state 801

    (236) for_statement -> FOR ( for_init_opt ; . expression_opt ; for_update_opt ) statement
    (244) expression_opt -> . expression
    (245) expression_opt -> . empty
    (1) expression -> . assignment_expression
    (623) empty -> .
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    ;               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    additive_expression            shift and go to state 173
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    pre_increment_expression       shift and go to state 168
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 306
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    expression_opt                 shift and go to state 915
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    shift_expression               shift and go to state 167
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 305
    conditional_and_expression     shift and go to state 161

state 802

    (223) method_invocation -> primary . . type_arguments NAME ( argument_list_opt )
    (226) method_invocation -> primary . . NAME ( argument_list_opt )
    (321) class_instance_creation_expression -> primary . . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> primary . . NEW class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> primary . . NAME
    (391) type_arguments -> . < type_argument_list1

    NAME            shift and go to state 603
    NEW             shift and go to state 606
    <               shift and go to state 67

    type_arguments                 shift and go to state 658

state 803

    (252) enhanced_for_statement_header_init -> FOR ( type NAME . dims_opt
    (182) variable_declarator_id -> NAME . dims_opt
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    :               reduce using rule 623 (empty -> .)
    =               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    dims_opt                       shift and go to state 916
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 804

    (253) enhanced_for_statement_header_init -> FOR ( modifiers type . NAME dims_opt
    (177) local_variable_declaration -> modifiers type . variable_declarators
    (178) variable_declarators -> . variable_declarator
    (179) variable_declarators -> . variable_declarators , variable_declarator
    (180) variable_declarator -> . variable_declarator_id
    (181) variable_declarator -> . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 917

    variable_declarators           shift and go to state 621
    variable_declarator            shift and go to state 346
    variable_declarator_id         shift and go to state 347

state 805

    (162) cast_expression -> ( name ) . unary_expression_not_plus_minus
    (145) primary_no_new_array -> ( name ) .
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    [               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    .               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    PLUSPLUS        reduce using rule 145 (primary_no_new_array -> ( name ) .)
    MINUSMINUS      reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ;               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    *               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    /               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    %               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    +               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    -               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    LSHIFT          reduce using rule 145 (primary_no_new_array -> ( name ) .)
    RSHIFT          reduce using rule 145 (primary_no_new_array -> ( name ) .)
    RRSHIFT         reduce using rule 145 (primary_no_new_array -> ( name ) .)
    >               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    <               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    GTEQ            reduce using rule 145 (primary_no_new_array -> ( name ) .)
    LTEQ            reduce using rule 145 (primary_no_new_array -> ( name ) .)
    INSTANCEOF      reduce using rule 145 (primary_no_new_array -> ( name ) .)
    EQ              reduce using rule 145 (primary_no_new_array -> ( name ) .)
    NEQ             reduce using rule 145 (primary_no_new_array -> ( name ) .)
    &               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ^               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    |               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    AND             reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ?               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    OR              reduce using rule 145 (primary_no_new_array -> ( name ) .)
    $end            reduce using rule 145 (primary_no_new_array -> ( name ) .)
    )               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    :               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ]               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ,               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    }               reduce using rule 145 (primary_no_new_array -> ( name ) .)
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 857
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    cast_expression                shift and go to state 177
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    post_increment_expression      shift and go to state 159

state 806

    (298) resource_specification -> ( resources semi_opt . )

    )               shift and go to state 918


state 807

    (300) semi_opt -> empty .

    )               reduce using rule 300 (semi_opt -> empty .)


state 808

    (299) semi_opt -> ; .
    (303) trailing_semicolon -> ; .

    )               reduce using rule 299 (semi_opt -> ; .)
    BOOLEAN         reduce using rule 303 (trailing_semicolon -> ; .)
    VOID            reduce using rule 303 (trailing_semicolon -> ; .)
    BYTE            reduce using rule 303 (trailing_semicolon -> ; .)
    SHORT           reduce using rule 303 (trailing_semicolon -> ; .)
    INT             reduce using rule 303 (trailing_semicolon -> ; .)
    LONG            reduce using rule 303 (trailing_semicolon -> ; .)
    CHAR            reduce using rule 303 (trailing_semicolon -> ; .)
    FLOAT           reduce using rule 303 (trailing_semicolon -> ; .)
    DOUBLE          reduce using rule 303 (trailing_semicolon -> ; .)
    PUBLIC          reduce using rule 303 (trailing_semicolon -> ; .)
    PROTECTED       reduce using rule 303 (trailing_semicolon -> ; .)
    PRIVATE         reduce using rule 303 (trailing_semicolon -> ; .)
    STATIC          reduce using rule 303 (trailing_semicolon -> ; .)
    ABSTRACT        reduce using rule 303 (trailing_semicolon -> ; .)
    FINAL           reduce using rule 303 (trailing_semicolon -> ; .)
    NATIVE          reduce using rule 303 (trailing_semicolon -> ; .)
    SYNCHRONIZED    reduce using rule 303 (trailing_semicolon -> ; .)
    TRANSIENT       reduce using rule 303 (trailing_semicolon -> ; .)
    VOLATILE        reduce using rule 303 (trailing_semicolon -> ; .)
    STRICTFP        reduce using rule 303 (trailing_semicolon -> ; .)
    NAME            reduce using rule 303 (trailing_semicolon -> ; .)
    @               reduce using rule 303 (trailing_semicolon -> ; .)


state 809

    (302) resources -> resources trailing_semicolon . resource
    (304) resource -> . type variable_declarator_id = variable_initializer
    (305) resource -> . modifiers type variable_declarator_id = variable_initializer
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    NAME            shift and go to state 212
    @               shift and go to state 402

    generic_type                   shift and go to state 58
    marker_annotation              shift and go to state 22
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 91
    primitive_type                 shift and go to state 340
    type                           shift and go to state 591
    class_or_interface             shift and go to state 144
    single_member_annotation       shift and go to state 18
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation                     shift and go to state 10
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 589
    resource                       shift and go to state 919
    name                           shift and go to state 342
    modifier                       shift and go to state 51

state 810

    (305) resource -> modifiers type . variable_declarator_id = variable_initializer
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 345

    variable_declarator_id         shift and go to state 920

state 811

    (304) resource -> type variable_declarator_id . = variable_initializer

    =               shift and go to state 921


state 812

    (288) catches -> catches catch_clause .

    CATCH           reduce using rule 288 (catches -> catches catch_clause .)
    $end            reduce using rule 288 (catches -> catches catch_clause .)
    IF              reduce using rule 288 (catches -> catches catch_clause .)
    WHILE           reduce using rule 288 (catches -> catches catch_clause .)
    FOR             reduce using rule 288 (catches -> catches catch_clause .)
    {               reduce using rule 288 (catches -> catches catch_clause .)
    ASSERT          reduce using rule 288 (catches -> catches catch_clause .)
    ;               reduce using rule 288 (catches -> catches catch_clause .)
    SWITCH          reduce using rule 288 (catches -> catches catch_clause .)
    DO              reduce using rule 288 (catches -> catches catch_clause .)
    BREAK           reduce using rule 288 (catches -> catches catch_clause .)
    CONTINUE        reduce using rule 288 (catches -> catches catch_clause .)
    RETURN          reduce using rule 288 (catches -> catches catch_clause .)
    SYNCHRONIZED    reduce using rule 288 (catches -> catches catch_clause .)
    THROW           reduce using rule 288 (catches -> catches catch_clause .)
    TRY             reduce using rule 288 (catches -> catches catch_clause .)
    NAME            reduce using rule 288 (catches -> catches catch_clause .)
    @               reduce using rule 288 (catches -> catches catch_clause .)
    BOOLEAN         reduce using rule 288 (catches -> catches catch_clause .)
    VOID            reduce using rule 288 (catches -> catches catch_clause .)
    BYTE            reduce using rule 288 (catches -> catches catch_clause .)
    SHORT           reduce using rule 288 (catches -> catches catch_clause .)
    INT             reduce using rule 288 (catches -> catches catch_clause .)
    LONG            reduce using rule 288 (catches -> catches catch_clause .)
    CHAR            reduce using rule 288 (catches -> catches catch_clause .)
    FLOAT           reduce using rule 288 (catches -> catches catch_clause .)
    DOUBLE          reduce using rule 288 (catches -> catches catch_clause .)
    PUBLIC          reduce using rule 288 (catches -> catches catch_clause .)
    PROTECTED       reduce using rule 288 (catches -> catches catch_clause .)
    PRIVATE         reduce using rule 288 (catches -> catches catch_clause .)
    STATIC          reduce using rule 288 (catches -> catches catch_clause .)
    ABSTRACT        reduce using rule 288 (catches -> catches catch_clause .)
    FINAL           reduce using rule 288 (catches -> catches catch_clause .)
    NATIVE          reduce using rule 288 (catches -> catches catch_clause .)
    TRANSIENT       reduce using rule 288 (catches -> catches catch_clause .)
    VOLATILE        reduce using rule 288 (catches -> catches catch_clause .)
    STRICTFP        reduce using rule 288 (catches -> catches catch_clause .)
    THIS            reduce using rule 288 (catches -> catches catch_clause .)
    SUPER           reduce using rule 288 (catches -> catches catch_clause .)
    PLUSPLUS        reduce using rule 288 (catches -> catches catch_clause .)
    MINUSMINUS      reduce using rule 288 (catches -> catches catch_clause .)
    NEW             reduce using rule 288 (catches -> catches catch_clause .)
    <               reduce using rule 288 (catches -> catches catch_clause .)
    (               reduce using rule 288 (catches -> catches catch_clause .)
    NUM             reduce using rule 288 (catches -> catches catch_clause .)
    CHAR_LITERAL    reduce using rule 288 (catches -> catches catch_clause .)
    STRING_LITERAL  reduce using rule 288 (catches -> catches catch_clause .)
    TRUE            reduce using rule 288 (catches -> catches catch_clause .)
    FALSE           reduce using rule 288 (catches -> catches catch_clause .)
    NULL            reduce using rule 288 (catches -> catches catch_clause .)
    ENUM            reduce using rule 288 (catches -> catches catch_clause .)
    CLASS           reduce using rule 288 (catches -> catches catch_clause .)
    INTERFACE       reduce using rule 288 (catches -> catches catch_clause .)
    }               reduce using rule 288 (catches -> catches catch_clause .)
    CASE            reduce using rule 288 (catches -> catches catch_clause .)
    DEFAULT         reduce using rule 288 (catches -> catches catch_clause .)
    FINALLY         reduce using rule 288 (catches -> catches catch_clause .)
    ELSE            reduce using rule 288 (catches -> catches catch_clause .)


state 813

    (291) catch_clause -> CATCH ( . catch_formal_parameter ) block
    (292) catch_formal_parameter -> . modifiers_opt catch_type variable_declarator_id
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 402

    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 406
    modifiers_opt                  shift and go to state 922
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    empty                          shift and go to state 121
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 51
    annotation                     shift and go to state 10
    catch_formal_parameter         shift and go to state 923

state 814

    (306) finally -> FINALLY . block
    (164) block -> . { block_statements_opt }

    {               shift and go to state 106

    block                          shift and go to state 924

state 815

    (285) try_statement -> TRY try_block catches_opt finally .

    $end            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    IF              reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    WHILE           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    FOR             reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    {               reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    ASSERT          reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    ;               reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    SWITCH          reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    DO              reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    BREAK           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    CONTINUE        reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    RETURN          reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    SYNCHRONIZED    reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    THROW           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    TRY             reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    NAME            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    @               reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    BOOLEAN         reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    VOID            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    BYTE            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    SHORT           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    INT             reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    LONG            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    CHAR            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    FLOAT           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    DOUBLE          reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    PUBLIC          reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    PROTECTED       reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    PRIVATE         reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    STATIC          reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    ABSTRACT        reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    FINAL           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    NATIVE          reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    TRANSIENT       reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    VOLATILE        reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    STRICTFP        reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    THIS            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    SUPER           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    PLUSPLUS        reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    MINUSMINUS      reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    NEW             reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    <               reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    (               reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    NUM             reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    CHAR_LITERAL    reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    STRING_LITERAL  reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    TRUE            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    FALSE           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    NULL            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    ENUM            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    CLASS           reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    INTERFACE       reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    }               reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    CASE            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    DEFAULT         reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)
    ELSE            reduce using rule 285 (try_statement -> TRY try_block catches_opt finally .)


state 816

    (289) catches_opt -> catches .
    (288) catches -> catches . catch_clause
    (291) catch_clause -> . CATCH ( catch_formal_parameter ) block

    FINALLY         reduce using rule 289 (catches_opt -> catches .)
    $end            reduce using rule 289 (catches_opt -> catches .)
    IF              reduce using rule 289 (catches_opt -> catches .)
    WHILE           reduce using rule 289 (catches_opt -> catches .)
    FOR             reduce using rule 289 (catches_opt -> catches .)
    {               reduce using rule 289 (catches_opt -> catches .)
    ASSERT          reduce using rule 289 (catches_opt -> catches .)
    ;               reduce using rule 289 (catches_opt -> catches .)
    SWITCH          reduce using rule 289 (catches_opt -> catches .)
    DO              reduce using rule 289 (catches_opt -> catches .)
    BREAK           reduce using rule 289 (catches_opt -> catches .)
    CONTINUE        reduce using rule 289 (catches_opt -> catches .)
    RETURN          reduce using rule 289 (catches_opt -> catches .)
    SYNCHRONIZED    reduce using rule 289 (catches_opt -> catches .)
    THROW           reduce using rule 289 (catches_opt -> catches .)
    TRY             reduce using rule 289 (catches_opt -> catches .)
    NAME            reduce using rule 289 (catches_opt -> catches .)
    @               reduce using rule 289 (catches_opt -> catches .)
    BOOLEAN         reduce using rule 289 (catches_opt -> catches .)
    VOID            reduce using rule 289 (catches_opt -> catches .)
    BYTE            reduce using rule 289 (catches_opt -> catches .)
    SHORT           reduce using rule 289 (catches_opt -> catches .)
    INT             reduce using rule 289 (catches_opt -> catches .)
    LONG            reduce using rule 289 (catches_opt -> catches .)
    CHAR            reduce using rule 289 (catches_opt -> catches .)
    FLOAT           reduce using rule 289 (catches_opt -> catches .)
    DOUBLE          reduce using rule 289 (catches_opt -> catches .)
    PUBLIC          reduce using rule 289 (catches_opt -> catches .)
    PROTECTED       reduce using rule 289 (catches_opt -> catches .)
    PRIVATE         reduce using rule 289 (catches_opt -> catches .)
    STATIC          reduce using rule 289 (catches_opt -> catches .)
    ABSTRACT        reduce using rule 289 (catches_opt -> catches .)
    FINAL           reduce using rule 289 (catches_opt -> catches .)
    NATIVE          reduce using rule 289 (catches_opt -> catches .)
    TRANSIENT       reduce using rule 289 (catches_opt -> catches .)
    VOLATILE        reduce using rule 289 (catches_opt -> catches .)
    STRICTFP        reduce using rule 289 (catches_opt -> catches .)
    THIS            reduce using rule 289 (catches_opt -> catches .)
    SUPER           reduce using rule 289 (catches_opt -> catches .)
    PLUSPLUS        reduce using rule 289 (catches_opt -> catches .)
    MINUSMINUS      reduce using rule 289 (catches_opt -> catches .)
    NEW             reduce using rule 289 (catches_opt -> catches .)
    <               reduce using rule 289 (catches_opt -> catches .)
    (               reduce using rule 289 (catches_opt -> catches .)
    NUM             reduce using rule 289 (catches_opt -> catches .)
    CHAR_LITERAL    reduce using rule 289 (catches_opt -> catches .)
    STRING_LITERAL  reduce using rule 289 (catches_opt -> catches .)
    TRUE            reduce using rule 289 (catches_opt -> catches .)
    FALSE           reduce using rule 289 (catches_opt -> catches .)
    NULL            reduce using rule 289 (catches_opt -> catches .)
    ENUM            reduce using rule 289 (catches_opt -> catches .)
    CLASS           reduce using rule 289 (catches_opt -> catches .)
    INTERFACE       reduce using rule 289 (catches_opt -> catches .)
    }               reduce using rule 289 (catches_opt -> catches .)
    CASE            reduce using rule 289 (catches_opt -> catches .)
    DEFAULT         reduce using rule 289 (catches_opt -> catches .)
    ELSE            reduce using rule 289 (catches_opt -> catches .)
    CATCH           shift and go to state 594

    catch_clause                   shift and go to state 812

state 817

    (296) try_statement_with_resources -> TRY resource_specification try_block catches_opt .
    (297) try_statement_with_resources -> TRY resource_specification try_block catches_opt . finally
    (306) finally -> . FINALLY block

    $end            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    IF              reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    WHILE           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FOR             reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    {               reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ASSERT          reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ;               reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SWITCH          reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    DO              reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    BREAK           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CONTINUE        reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    RETURN          reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SYNCHRONIZED    reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    THROW           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    TRY             reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    NAME            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    @               reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    BOOLEAN         reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    VOID            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    BYTE            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SHORT           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    INT             reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    LONG            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CHAR            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FLOAT           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    DOUBLE          reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    PUBLIC          reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    PROTECTED       reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    PRIVATE         reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    STATIC          reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ABSTRACT        reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FINAL           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    NATIVE          reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    TRANSIENT       reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    VOLATILE        reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    STRICTFP        reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    THIS            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    SUPER           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    PLUSPLUS        reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    MINUSMINUS      reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    NEW             reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    <               reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    (               reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    NUM             reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CHAR_LITERAL    reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    STRING_LITERAL  reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    TRUE            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FALSE           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    NULL            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ENUM            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CLASS           reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    INTERFACE       reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    }               reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    CASE            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    DEFAULT         reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    ELSE            reduce using rule 296 (try_statement_with_resources -> TRY resource_specification try_block catches_opt .)
    FINALLY         shift and go to state 814

    finally                        shift and go to state 925

state 818

    (332) array_access -> array_creation_with_array_initializer [ expression ] .

    [               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    .               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    PLUSPLUS        reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    MINUSMINUS      reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    *               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    /               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    %               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    +               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    -               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    LSHIFT          reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    RSHIFT          reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    RRSHIFT         reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    >               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    <               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    GTEQ            reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    LTEQ            reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    INSTANCEOF      reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    EQ              reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    NEQ             reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    &               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    ^               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    |               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    AND             reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    ?               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    OR              reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    $end            reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    ;               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    :               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    )               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    ]               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    ,               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    }               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    =               reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    TIMES_ASSIGN    reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    DIVIDE_ASSIGN   reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    REMAINDER_ASSIGN reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    PLUS_ASSIGN     reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    MINUS_ASSIGN    reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    LSHIFT_ASSIGN   reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    RSHIFT_ASSIGN   reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    RRSHIFT_ASSIGN  reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    AND_ASSIGN      reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    OR_ASSIGN       reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)
    XOR_ASSIGN      reduce using rule 332 (array_access -> array_creation_with_array_initializer [ expression ] .)


state 819

    (251) enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .

    IF              reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    WHILE           reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    FOR             reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    {               reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    ASSERT          reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    ;               reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    SWITCH          reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    DO              reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    BREAK           reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    CONTINUE        reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    RETURN          reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    SYNCHRONIZED    reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    THROW           reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    TRY             reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    NAME            reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    THIS            reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    SUPER           reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    PLUSPLUS        reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    MINUSMINUS      reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    NEW             reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    <               reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    (               reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    NUM             reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    CHAR_LITERAL    reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    STRING_LITERAL  reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    TRUE            reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    FALSE           reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    NULL            reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    BOOLEAN         reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    VOID            reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    BYTE            reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    SHORT           reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    INT             reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    LONG            reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    CHAR            reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    FLOAT           reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)
    DOUBLE          reduce using rule 251 (enhanced_for_statement_header -> enhanced_for_statement_header_init : expression ) .)


state 820

    (226) method_invocation -> primary . NAME ( . argument_list_opt )
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 926
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 821

    (223) method_invocation -> primary . type_arguments NAME . ( argument_list_opt )

    (               shift and go to state 927


state 822

    (317) explicit_constructor_invocation -> primary . type_arguments THIS . ( argument_list_opt ) ;

    (               shift and go to state 928


state 823

    (315) explicit_constructor_invocation -> primary . type_arguments SUPER . ( argument_list_opt ) ;

    (               shift and go to state 929


state 824

    (313) explicit_constructor_invocation -> primary . THIS ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 930
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 825

    (322) class_instance_creation_expression -> primary . NEW class_type . ( argument_list_opt ) class_body_opt

    (               shift and go to state 931


state 826

    (321) class_instance_creation_expression -> primary . NEW type_arguments . class_type ( argument_list_opt ) class_body_opt
    (382) class_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type                     shift and go to state 932
    class_or_interface             shift and go to state 144
    generic_type                   shift and go to state 331
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 394
    name                           shift and go to state 335

state 827

    (311) explicit_constructor_invocation -> primary . SUPER ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 933
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 828

    (234) while_statement -> WHILE ( expression ) . statement
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    array_access                   shift and go to state 90
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 92
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 934
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    literal                        shift and go to state 146
    statement_without_trailing_substatement shift and go to state 99
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    labeled_statement              shift and go to state 77
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    block                          shift and go to state 107
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    if_then_else_statement         shift and go to state 108

state 829

    (319) class_instance_creation_expression -> NEW type_arguments class_type ( . argument_list_opt ) class_body_opt
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    assignment_expression          shift and go to state 186
    argument_list_opt              shift and go to state 935
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 830

    (384) class_or_interface -> generic_type . name .
    (344) qualified_name -> name . . simple_name

    <               reduce using rule 384 (class_or_interface -> generic_type . name .)
    [               reduce using rule 384 (class_or_interface -> generic_type . name .)
    )               reduce using rule 384 (class_or_interface -> generic_type . name .)
    (               reduce using rule 384 (class_or_interface -> generic_type . name .)
    ,               reduce using rule 384 (class_or_interface -> generic_type . name .)
    {               reduce using rule 384 (class_or_interface -> generic_type . name .)
    IMPLEMENTS      reduce using rule 384 (class_or_interface -> generic_type . name .)
    ;               reduce using rule 384 (class_or_interface -> generic_type . name .)
    .               shift and go to state 437


state 831

    (336) dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .

    {               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    [               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    .               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    PLUSPLUS        reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    MINUSMINUS      reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    =               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    TIMES_ASSIGN    reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    DIVIDE_ASSIGN   reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    REMAINDER_ASSIGN reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    PLUS_ASSIGN     reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    MINUS_ASSIGN    reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    LSHIFT_ASSIGN   reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    RSHIFT_ASSIGN   reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    RRSHIFT_ASSIGN  reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    AND_ASSIGN      reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    OR_ASSIGN       reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    XOR_ASSIGN      reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    *               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    /               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    %               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    +               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    -               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    LSHIFT          reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    RSHIFT          reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    RRSHIFT         reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    >               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    <               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    GTEQ            reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    LTEQ            reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    INSTANCEOF      reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    EQ              reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    NEQ             reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    &               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    ^               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    |               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    AND             reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    ?               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    OR              reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    $end            reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    )               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    ;               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    :               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    ]               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    ,               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)
    }               reduce using rule 336 (dim_with_or_without_exprs -> dim_with_or_without_exprs dim_with_or_without_expr .)


state 832

    (216) array_initializer -> { . comma_opt }
    (217) array_initializer -> { . variable_initializers }
    (218) array_initializer -> { . variable_initializers , }
    (214) comma_opt -> . ,
    (215) comma_opt -> . empty
    (219) variable_initializers -> . variable_initializer
    (220) variable_initializers -> . variable_initializers , variable_initializer
    (623) empty -> .
    (183) variable_initializer -> . expression
    (184) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (216) array_initializer -> . { comma_opt }
    (217) array_initializer -> . { variable_initializers }
    (218) array_initializer -> . { variable_initializers , }
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    ,               shift and go to state 936
    }               reduce using rule 623 (empty -> .)
    {               shift and go to state 832
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    array_creation_without_array_initializer shift and go to state 95
    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    assignment_expression          shift and go to state 186
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    variable_initializer           shift and go to state 938
    method_invocation              shift and go to state 176
    simple_name                    shift and go to state 64
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 939
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    variable_initializers          shift and go to state 937
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    array_initializer              shift and go to state 846
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    comma_opt                      shift and go to state 940
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 844
    conditional_and_expression     shift and go to state 161

state 833

    (334) array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .

    [               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    .               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    PLUSPLUS        reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    MINUSMINUS      reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    ;               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    *               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    /               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    %               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    +               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    -               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    LSHIFT          reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    RSHIFT          reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    RRSHIFT         reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    >               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    <               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    GTEQ            reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    LTEQ            reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    INSTANCEOF      reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    EQ              reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    NEQ             reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    &               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    ^               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    |               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    AND             reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    ?               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    OR              reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    $end            reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    )               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    :               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    ]               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    ,               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    }               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    =               reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    TIMES_ASSIGN    reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    DIVIDE_ASSIGN   reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    REMAINDER_ASSIGN reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    PLUS_ASSIGN     reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    MINUS_ASSIGN    reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    LSHIFT_ASSIGN   reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    RSHIFT_ASSIGN   reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    RRSHIFT_ASSIGN  reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    AND_ASSIGN      reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    OR_ASSIGN       reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)
    XOR_ASSIGN      reduce using rule 334 (array_creation_with_array_initializer -> NEW class_or_interface_type dim_with_or_without_exprs array_initializer .)


state 834

    (337) dim_with_or_without_expr -> [ expression . ]

    ]               shift and go to state 941


state 835

    (338) dim_with_or_without_expr -> [ ] .

    {               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    [               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    .               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    PLUSPLUS        reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    MINUSMINUS      reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    =               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    TIMES_ASSIGN    reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    DIVIDE_ASSIGN   reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    REMAINDER_ASSIGN reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    PLUS_ASSIGN     reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    MINUS_ASSIGN    reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    LSHIFT_ASSIGN   reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    RSHIFT_ASSIGN   reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    RRSHIFT_ASSIGN  reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    AND_ASSIGN      reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    OR_ASSIGN       reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    XOR_ASSIGN      reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    *               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    /               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    %               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    +               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    -               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    LSHIFT          reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    RSHIFT          reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    RRSHIFT         reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    >               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    <               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    GTEQ            reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    LTEQ            reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    INSTANCEOF      reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    EQ              reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    NEQ             reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    &               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    ^               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    |               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    AND             reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    ?               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    OR              reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    $end            reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    )               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    ;               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    :               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    ]               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    ,               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)
    }               reduce using rule 338 (dim_with_or_without_expr -> [ ] .)


state 836

    (333) array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .

    [               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    .               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    PLUSPLUS        reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    MINUSMINUS      reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    ;               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    *               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    /               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    %               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    +               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    -               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    LSHIFT          reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    RSHIFT          reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    RRSHIFT         reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    >               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    <               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    GTEQ            reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    LTEQ            reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    INSTANCEOF      reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    EQ              reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    NEQ             reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    &               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    ^               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    |               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    AND             reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    ?               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    OR              reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    $end            reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    )               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    :               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    ]               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    ,               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    }               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    =               reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    TIMES_ASSIGN    reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    DIVIDE_ASSIGN   reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    REMAINDER_ASSIGN reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    PLUS_ASSIGN     reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    MINUS_ASSIGN    reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    LSHIFT_ASSIGN   reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    RSHIFT_ASSIGN   reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    RRSHIFT_ASSIGN  reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    AND_ASSIGN      reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    OR_ASSIGN       reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)
    XOR_ASSIGN      reduce using rule 333 (array_creation_with_array_initializer -> NEW primitive_type dim_with_or_without_exprs array_initializer .)


state 837

    (320) class_instance_creation_expression -> NEW class_type ( argument_list_opt . ) class_body_opt

    )               shift and go to state 942


state 838

    (151) primary_no_new_array -> primitive_type dims . CLASS .

    [               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    .               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    PLUSPLUS        reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    MINUSMINUS      reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    ;               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    *               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    /               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    %               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    +               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    -               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    LSHIFT          reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    RSHIFT          reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    RRSHIFT         reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    >               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    <               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    GTEQ            reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    LTEQ            reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    INSTANCEOF      reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    EQ              reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    NEQ             reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    &               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    ^               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    |               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    AND             reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    ?               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    OR              reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    $end            reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    )               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    :               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    ]               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    ,               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    }               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    =               reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    TIMES_ASSIGN    reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    DIVIDE_ASSIGN   reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    REMAINDER_ASSIGN reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    PLUS_ASSIGN     reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    MINUS_ASSIGN    reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    LSHIFT_ASSIGN   reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    RSHIFT_ASSIGN   reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    RRSHIFT_ASSIGN  reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    AND_ASSIGN      reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    OR_ASSIGN       reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)
    XOR_ASSIGN      reduce using rule 151 (primary_no_new_array -> primitive_type dims . CLASS .)


state 839

    (263) switch_statement -> SWITCH ( expression ) . switch_block
    (264) switch_block -> . { }
    (265) switch_block -> . { switch_block_statements }
    (266) switch_block -> . { switch_labels }
    (267) switch_block -> . { switch_block_statements switch_labels }

    {               shift and go to state 944

    switch_block                   shift and go to state 943

state 840

    (323) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( . argument_list_opt ) class_body_opt
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    assignment_expression          shift and go to state 186
    argument_list_opt              shift and go to state 945
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 841

    (324) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type . ( argument_list_opt ) class_body_opt

    (               shift and go to state 946


state 842

    (221) method_invocation -> NAME ( argument_list_opt ) .

    ;               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    [               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    .               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    PLUSPLUS        reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    MINUSMINUS      reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    =               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    TIMES_ASSIGN    reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    DIVIDE_ASSIGN   reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    REMAINDER_ASSIGN reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    PLUS_ASSIGN     reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    MINUS_ASSIGN    reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    LSHIFT_ASSIGN   reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    RSHIFT_ASSIGN   reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    RRSHIFT_ASSIGN  reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    AND_ASSIGN      reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    OR_ASSIGN       reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    XOR_ASSIGN      reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    *               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    /               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    %               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    +               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    -               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    LSHIFT          reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    RSHIFT          reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    RRSHIFT         reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    >               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    <               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    GTEQ            reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    LTEQ            reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    INSTANCEOF      reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    EQ              reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    NEQ             reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    &               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    ^               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    |               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    AND             reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    ?               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    OR              reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    $end            reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    )               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    :               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    ]               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    ,               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)
    }               reduce using rule 221 (method_invocation -> NAME ( argument_list_opt ) .)


state 843

    (179) variable_declarators -> variable_declarators , variable_declarator .

    ,               reduce using rule 179 (variable_declarators -> variable_declarators , variable_declarator .)
    ;               reduce using rule 179 (variable_declarators -> variable_declarators , variable_declarator .)


state 844

    (183) variable_initializer -> expression .

    }               reduce using rule 183 (variable_initializer -> expression .)
    ,               reduce using rule 183 (variable_initializer -> expression .)
    ;               reduce using rule 183 (variable_initializer -> expression .)
    )               reduce using rule 183 (variable_initializer -> expression .)


state 845

    (181) variable_declarator -> variable_declarator_id = variable_initializer .

    ,               reduce using rule 181 (variable_declarator -> variable_declarator_id = variable_initializer .)
    ;               reduce using rule 181 (variable_declarator -> variable_declarator_id = variable_initializer .)


state 846

    (184) variable_initializer -> array_initializer .

    }               reduce using rule 184 (variable_initializer -> array_initializer .)
    ,               reduce using rule 184 (variable_initializer -> array_initializer .)
    ;               reduce using rule 184 (variable_initializer -> array_initializer .)
    )               reduce using rule 184 (variable_initializer -> array_initializer .)


state 847

    (276) do_statement -> DO statement WHILE ( . expression ) ;
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 947
    conditional_and_expression     shift and go to state 161

state 848

    (261) assert_statement -> ASSERT expression : expression . ;

    ;               shift and go to state 948


state 849

    (231) if_then_statement -> IF ( expression ) . statement
    (232) if_then_else_statement -> IF ( expression ) . statement_no_short_if ELSE statement
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (254) statement_no_short_if -> . statement_without_trailing_substatement
    (255) statement_no_short_if -> . labeled_statement_no_short_if
    (256) statement_no_short_if -> . if_then_else_statement_no_short_if
    (257) statement_no_short_if -> . while_statement_no_short_if
    (258) statement_no_short_if -> . for_statement_no_short_if
    (259) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (229) labeled_statement_no_short_if -> . label : statement_no_short_if
    (233) if_then_else_statement_no_short_if -> . IF ( expression ) statement_no_short_if ELSE statement_no_short_if
    (235) while_statement_no_short_if -> . WHILE ( expression ) statement_no_short_if
    (237) for_statement_no_short_if -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (250) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 961
    WHILE           shift and go to state 955
    FOR             shift and go to state 952
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    array_access                   shift and go to state 90
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    labeled_statement_no_short_if  shift and go to state 956
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_no_short_if shift and go to state 954
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 951
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 957
    literal                        shift and go to state 146
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    while_statement_no_short_if    shift and go to state 958
    enhanced_for_statement_header  shift and go to state 949
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    for_statement_no_short_if      shift and go to state 959
    statement_without_trailing_substatement shift and go to state 953
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    statement_no_short_if          shift and go to state 960
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    array_creation_with_array_initializer shift and go to state 101
    labeled_statement              shift and go to state 77
    if_then_else_statement_no_short_if shift and go to state 950
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 850

    (308) explicit_constructor_invocation -> SUPER ( argument_list_opt ) . ;

    ;               shift and go to state 962


state 851

    (227) method_invocation -> SUPER . NAME ( . argument_list_opt )
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 963
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 852

    (224) method_invocation -> SUPER . type_arguments NAME . ( argument_list_opt )

    (               shift and go to state 964


state 853

    (160) cast_expression -> ( name type_arguments dims_opt . ) unary_expression_not_plus_minus

    )               shift and go to state 965


state 854

    (161) cast_expression -> ( name type_arguments . . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 335
    class_or_interface             shift and go to state 144
    generic_type                   shift and go to state 331
    class_or_interface_type        shift and go to state 966
    simple_name                    shift and go to state 64

state 855

    (383) class_or_interface -> name .
    (388) array_type -> name . dims
    (128) postfix_expression -> name .
    (344) qualified_name -> name . . simple_name
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (330) array_access -> name . [ expression ]
    (325) class_instance_creation_expression_name -> name . .
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    <               reduce using rule 383 (class_or_interface -> name .)
    >               reduce using rule 383 (class_or_interface -> name .)
    ,               reduce using rule 383 (class_or_interface -> name .)
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    *               reduce using rule 128 (postfix_expression -> name .)
    /               reduce using rule 128 (postfix_expression -> name .)
    %               reduce using rule 128 (postfix_expression -> name .)
    +               reduce using rule 128 (postfix_expression -> name .)
    -               reduce using rule 128 (postfix_expression -> name .)
    LSHIFT          reduce using rule 128 (postfix_expression -> name .)
    RSHIFT          reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT         reduce using rule 128 (postfix_expression -> name .)
    INSTANCEOF      reduce using rule 128 (postfix_expression -> name .)
    EQ              reduce using rule 128 (postfix_expression -> name .)
    NEQ             reduce using rule 128 (postfix_expression -> name .)
    &               reduce using rule 128 (postfix_expression -> name .)
    ^               reduce using rule 128 (postfix_expression -> name .)
    |               reduce using rule 128 (postfix_expression -> name .)
    AND             reduce using rule 128 (postfix_expression -> name .)
    ?               reduce using rule 128 (postfix_expression -> name .)
    OR              reduce using rule 128 (postfix_expression -> name .)
    )               reduce using rule 128 (postfix_expression -> name .)
    .               shift and go to state 519
    [               shift and go to state 301

    dims                           shift and go to state 300
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 856

    (387) array_type -> primitive_type . dims
    (151) primary_no_new_array -> primitive_type . dims . CLASS
    (152) primary_no_new_array -> primitive_type . . CLASS
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               shift and go to state 336
    [               shift and go to state 238

    dims                           shift and go to state 337
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 857

    (162) cast_expression -> ( name ) unary_expression_not_plus_minus .

    *               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    /               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    %               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    +               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    -               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    RRSHIFT         reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    >               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    <               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    GTEQ            reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    LTEQ            reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    EQ              reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    NEQ             reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    &               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    ^               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    |               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    AND             reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    ?               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    OR              reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    )               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    ,               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    }               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    ;               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    $end            reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    :               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)
    ]               reduce using rule 162 (cast_expression -> ( name ) unary_expression_not_plus_minus .)


state 858

    (163) cast_expression -> ( name dims ) . unary_expression_not_plus_minus
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 967
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    cast_expression                shift and go to state 177
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    post_increment_expression      shift and go to state 159

state 859

    (159) cast_expression -> ( primitive_type dims_opt ) . unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 968
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    cast_expression                shift and go to state 177
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    pre_increment_expression       shift and go to state 168
    post_increment_expression      shift and go to state 159
    pre_decrement_expression       shift and go to state 160

state 860

    (21) conditional_expression -> conditional_or_expression ? expression : . conditional_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 154
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    conditional_or_expression      shift and go to state 165
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 969
    pre_decrement_expression       shift and go to state 160
    conditional_and_expression     shift and go to state 161
    class_instance_creation_expression shift and go to state 156

state 861

    (535) enum_body -> { enum_constants , enum_body_declarations_opt . }

    }               shift and go to state 970


state 862

    (538) enum_constants -> enum_constants , enum_constant .

    ,               reduce using rule 538 (enum_constants -> enum_constants , enum_constant .)
    ;               reduce using rule 538 (enum_constants -> enum_constants , enum_constant .)
    }               reduce using rule 538 (enum_constants -> enum_constants , enum_constant .)


state 863

    (536) enum_body -> { enum_constants enum_body_declarations_opt } .

    ;               reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    @               reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    PUBLIC          reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    PROTECTED       reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    PRIVATE         reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    STATIC          reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    ABSTRACT        reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    FINAL           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    NATIVE          reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    SYNCHRONIZED    reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    TRANSIENT       reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    VOLATILE        reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    STRICTFP        reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    ENUM            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    CLASS           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    INTERFACE       reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    $end            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    IF              reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    WHILE           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    FOR             reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    {               reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    ASSERT          reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    SWITCH          reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    DO              reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    BREAK           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    CONTINUE        reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    RETURN          reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    THROW           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    TRY             reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    NAME            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    BOOLEAN         reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    VOID            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    BYTE            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    SHORT           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    INT             reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    LONG            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    CHAR            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    FLOAT           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    DOUBLE          reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    THIS            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    SUPER           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    PLUSPLUS        reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    MINUSMINUS      reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    NEW             reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    <               reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    (               reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    NUM             reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    CHAR_LITERAL    reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    STRING_LITERAL  reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    TRUE            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    FALSE           reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    NULL            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    }               reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    CASE            reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)
    DEFAULT         reduce using rule 536 (enum_body -> { enum_constants enum_body_declarations_opt } .)


state 864

    (534) enum_body -> { , enum_body_declarations_opt } .

    ;               reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    @               reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    PUBLIC          reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    PROTECTED       reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    PRIVATE         reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    STATIC          reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    ABSTRACT        reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    FINAL           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    NATIVE          reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    SYNCHRONIZED    reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    TRANSIENT       reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    VOLATILE        reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    STRICTFP        reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    ENUM            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    CLASS           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    INTERFACE       reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    $end            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    IF              reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    WHILE           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    FOR             reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    {               reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    ASSERT          reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    SWITCH          reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    DO              reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    BREAK           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    CONTINUE        reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    RETURN          reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    THROW           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    TRY             reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    NAME            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    BOOLEAN         reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    VOID            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    BYTE            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    SHORT           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    INT             reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    LONG            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    CHAR            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    FLOAT           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    DOUBLE          reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    THIS            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    SUPER           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    PLUSPLUS        reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    MINUSMINUS      reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    NEW             reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    <               reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    (               reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    NUM             reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    CHAR_LITERAL    reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    STRING_LITERAL  reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    TRUE            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    FALSE           reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    NULL            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    }               reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    CASE            reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)
    DEFAULT         reduce using rule 534 (enum_body -> { , enum_body_declarations_opt } .)


state 865

    (545) arguments -> ( argument_list_opt . )

    )               shift and go to state 971


state 866

    (440) type_parameter_list1 -> type_parameter_list , type_parameter1 .

    EXTENDS         reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    IMPLEMENTS      reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    {               reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    NAME            reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    BOOLEAN         reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    VOID            reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    BYTE            reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    SHORT           reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    INT             reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    LONG            reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    CHAR            reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    FLOAT           reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)
    DOUBLE          reduce using rule 440 (type_parameter_list1 -> type_parameter_list , type_parameter1 .)


state 867

    (432) type_parameter_list -> type_parameter_list , type_parameter .

    ,               reduce using rule 432 (type_parameter_list -> type_parameter_list , type_parameter .)


state 868

    (443) type_parameter1 -> type_parameter_header EXTENDS reference_type . additional_bound_list1
    (434) type_parameter -> type_parameter_header EXTENDS reference_type .
    (435) type_parameter -> type_parameter_header EXTENDS reference_type . additional_bound_list
    (400) reference_type1 -> reference_type . >
    (444) additional_bound_list1 -> . additional_bound1
    (445) additional_bound_list1 -> . additional_bound_list additional_bound1
    (436) additional_bound_list -> . additional_bound
    (437) additional_bound_list -> . additional_bound_list additional_bound
    (446) additional_bound1 -> . & reference_type1
    (438) additional_bound -> . & reference_type

    ,               reduce using rule 434 (type_parameter -> type_parameter_header EXTENDS reference_type .)
    >               shift and go to state 547
    &               shift and go to state 972

    additional_bound_list          shift and go to state 975
    additional_bound               shift and go to state 974
    additional_bound_list1         shift and go to state 973
    additional_bound1              shift and go to state 976

state 869

    (442) type_parameter1 -> type_parameter_header EXTENDS reference_type1 .

    EXTENDS         reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    IMPLEMENTS      reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    {               reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    NAME            reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    BOOLEAN         reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    VOID            reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    BYTE            reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    SHORT           reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    INT             reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    LONG            reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    CHAR            reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    FLOAT           reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)
    DOUBLE          reduce using rule 442 (type_parameter1 -> type_parameter_header EXTENDS reference_type1 .)


state 870

    (464) interface_type_list -> interface_type_list , interface_type .

    ,               reduce using rule 464 (interface_type_list -> interface_type_list , interface_type .)
    {               reduce using rule 464 (interface_type_list -> interface_type_list , interface_type .)


state 871

    (492) formal_parameter -> modifiers_opt type . variable_declarator_id
    (493) formal_parameter -> modifiers_opt type . ELLIPSIS variable_declarator_id
    (182) variable_declarator_id -> . NAME dims_opt

    ELLIPSIS        shift and go to state 978
    NAME            shift and go to state 345

    variable_declarator_id         shift and go to state 977

state 872

    (485) constructor_header -> constructor_header_name formal_parameter_list_opt ) . method_header_throws_clause_opt
    (494) method_header_throws_clause_opt -> . method_header_throws_clause
    (495) method_header_throws_clause_opt -> . empty
    (496) method_header_throws_clause -> . THROWS class_type_list
    (623) empty -> .

    THROWS          shift and go to state 981
    {               reduce using rule 623 (empty -> .)

    method_header_throws_clause    shift and go to state 979
    method_header_throws_clause_opt shift and go to state 980
    empty                          shift and go to state 982

state 873

    (491) formal_parameter_list -> formal_parameter_list , . formal_parameter
    (492) formal_parameter -> . modifiers_opt type variable_declarator_id
    (493) formal_parameter -> . modifiers_opt type ELLIPSIS variable_declarator_id
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (623) empty -> .
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (588) annotation_name -> . @ name

    BOOLEAN         reduce using rule 623 (empty -> .)
    VOID            reduce using rule 623 (empty -> .)
    BYTE            reduce using rule 623 (empty -> .)
    SHORT           reduce using rule 623 (empty -> .)
    INT             reduce using rule 623 (empty -> .)
    LONG            reduce using rule 623 (empty -> .)
    CHAR            reduce using rule 623 (empty -> .)
    FLOAT           reduce using rule 623 (empty -> .)
    DOUBLE          reduce using rule 623 (empty -> .)
    NAME            reduce using rule 623 (empty -> .)
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    @               shift and go to state 402

    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 406
    modifiers_opt                  shift and go to state 688
    formal_parameter               shift and go to state 983
    single_member_annotation       shift and go to state 18
    marker_annotation              shift and go to state 22
    normal_annotation              shift and go to state 50
    modifier                       shift and go to state 51
    annotation                     shift and go to state 10
    empty                          shift and go to state 121

state 874

    (569) annotation_method_header_name -> modifiers_opt type_parameters type . NAME (

    NAME            shift and go to state 984


state 875

    (486) constructor_header_name -> modifiers_opt type_parameters NAME . (
    (343) simple_name -> NAME .

    (               shift and go to state 985
    .               reduce using rule 343 (simple_name -> NAME .)
    [               reduce using rule 343 (simple_name -> NAME .)
    <               reduce using rule 343 (simple_name -> NAME .)
    NAME            reduce using rule 343 (simple_name -> NAME .)


state 876

    (487) constructor_header_name -> modifiers_opt NAME ( .

    PUBLIC          reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    PROTECTED       reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    PRIVATE         reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    STATIC          reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    ABSTRACT        reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    FINAL           reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    NATIVE          reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    SYNCHRONIZED    reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    TRANSIENT       reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    VOLATILE        reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    STRICTFP        reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    @               reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    )               reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    BOOLEAN         reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    VOID            reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    BYTE            reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    SHORT           reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    INT             reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    LONG            reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    CHAR            reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    FLOAT           reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    DOUBLE          reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)
    NAME            reduce using rule 487 (constructor_header_name -> modifiers_opt NAME ( .)


state 877

    (482) field_declaration -> modifiers_opt type variable_declarators . ;
    (179) variable_declarators -> variable_declarators . , variable_declarator

    ;               shift and go to state 986
    ,               shift and go to state 623


state 878

    (570) annotation_method_header_name -> modifiers_opt type NAME . (
    (182) variable_declarator_id -> NAME . dims_opt
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    (               shift and go to state 987
    =               reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    dims_opt                       shift and go to state 624
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 879

    (568) annotation_method_header -> annotation_method_header_name formal_parameter_list_opt ) . method_header_extended_dims annotation_method_header_default_value_opt
    (507) method_header_extended_dims -> . dims_opt
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    DEFAULT         reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    method_header_extended_dims    shift and go to state 989
    dims_opt                       shift and go to state 988
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 880

    (500) method_body -> { block_statements_opt . }

    }               shift and go to state 990


state 881

    (615) type_import_on_demand_declaration -> IMPORT name . * ; .

    ;               reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    IMPORT          reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    @               reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    PUBLIC          reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    PROTECTED       reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    PRIVATE         reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    STATIC          reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    ABSTRACT        reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    FINAL           reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    NATIVE          reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    SYNCHRONIZED    reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    TRANSIENT       reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    VOLATILE        reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    STRICTFP        reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    ENUM            reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    CLASS           reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    INTERFACE       reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)
    $end            reduce using rule 615 (type_import_on_demand_declaration -> IMPORT name . * ; .)


state 882

    (617) static_import_on_demand_declaration -> IMPORT STATIC name . * . ;

    ;               shift and go to state 991


state 883

    (505) method_header_name -> modifiers_opt type_parameters type . NAME (

    NAME            shift and go to state 992


state 884

    (506) method_header_name -> modifiers_opt type NAME . (
    (182) variable_declarator_id -> NAME . dims_opt
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    (               shift and go to state 993
    =               reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    dims_opt                       shift and go to state 624
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 885

    (504) method_header -> method_header_name formal_parameter_list_opt ) . method_header_extended_dims method_header_throws_clause_opt
    (507) method_header_extended_dims -> . dims_opt
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    THROWS          reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    {               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    dims_opt                       shift and go to state 988
    method_header_extended_dims    shift and go to state 994
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 886

    (592) member_value_pairs -> member_value_pairs , member_value_pair .

    ,               reduce using rule 592 (member_value_pairs -> member_value_pairs , member_value_pair .)
    )               reduce using rule 592 (member_value_pairs -> member_value_pairs , member_value_pair .)


state 887

    (593) member_value_pair -> simple_name . = member_value

    =               shift and go to state 721


state 888

    (580) member_value_array_initializer -> { , } .

    ,               reduce using rule 580 (member_value_array_initializer -> { , } .)
    )               reduce using rule 580 (member_value_array_initializer -> { , } .)
    ;               reduce using rule 580 (member_value_array_initializer -> { , } .)
    }               reduce using rule 580 (member_value_array_initializer -> { , } .)


state 889

    (579) member_value_array_initializer -> { member_values } .

    ,               reduce using rule 579 (member_value_array_initializer -> { member_values } .)
    )               reduce using rule 579 (member_value_array_initializer -> { member_values } .)
    ;               reduce using rule 579 (member_value_array_initializer -> { member_values } .)
    }               reduce using rule 579 (member_value_array_initializer -> { member_values } .)


state 890

    (578) member_value_array_initializer -> { member_values , . }
    (583) member_values -> member_values , . member_value
    (574) member_value -> . conditional_expression_not_name
    (575) member_value -> . name
    (576) member_value -> . annotation
    (577) member_value -> . member_value_array_initializer
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name ? expression : conditional_expression
    (24) conditional_expression_not_name -> . name ? expression : conditional_expression
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (578) member_value_array_initializer -> . { member_values , }
    (579) member_value_array_initializer -> . { member_values }
    (580) member_value_array_initializer -> . { , }
    (581) member_value_array_initializer -> . { }
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name OR conditional_and_expression
    (29) conditional_or_expression_not_name -> . name OR conditional_and_expression
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name AND inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name AND inclusive_or_expression
    (588) annotation_name -> . @ name
    (37) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (38) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name | exclusive_or_expression
    (39) inclusive_or_expression_not_name -> . name | exclusive_or_expression
    (42) exclusive_or_expression_not_name -> . and_expression_not_name
    (43) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name ^ and_expression
    (44) exclusive_or_expression_not_name -> . name ^ and_expression
    (47) and_expression_not_name -> . equality_expression_not_name
    (48) and_expression_not_name -> . and_expression_not_name & equality_expression
    (49) and_expression_not_name -> . name & equality_expression
    (53) equality_expression_not_name -> . instanceof_expression_not_name
    (54) equality_expression_not_name -> . equality_expression_not_name EQ instanceof_expression
    (55) equality_expression_not_name -> . name EQ instanceof_expression
    (56) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (57) equality_expression_not_name -> . name NEQ instanceof_expression
    (60) instanceof_expression_not_name -> . relational_expression_not_name
    (61) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (62) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (68) relational_expression_not_name -> . shift_expression_not_name
    (69) relational_expression_not_name -> . shift_expression_not_name < shift_expression
    (70) relational_expression_not_name -> . name < shift_expression
    (71) relational_expression_not_name -> . shift_expression_not_name > shift_expression
    (72) relational_expression_not_name -> . name > shift_expression
    (73) relational_expression_not_name -> . shift_expression_not_name GTEQ shift_expression
    (74) relational_expression_not_name -> . name GTEQ shift_expression
    (75) relational_expression_not_name -> . shift_expression_not_name LTEQ shift_expression
    (76) relational_expression_not_name -> . name LTEQ shift_expression
    (81) shift_expression_not_name -> . additive_expression_not_name
    (82) shift_expression_not_name -> . shift_expression_not_name LSHIFT additive_expression
    (83) shift_expression_not_name -> . name LSHIFT additive_expression
    (84) shift_expression_not_name -> . shift_expression_not_name RSHIFT additive_expression
    (85) shift_expression_not_name -> . name RSHIFT additive_expression
    (86) shift_expression_not_name -> . shift_expression_not_name RRSHIFT additive_expression
    (87) shift_expression_not_name -> . name RRSHIFT additive_expression
    (91) additive_expression_not_name -> . multiplicative_expression_not_name
    (92) additive_expression_not_name -> . additive_expression_not_name + multiplicative_expression
    (93) additive_expression_not_name -> . name + multiplicative_expression
    (94) additive_expression_not_name -> . additive_expression_not_name - multiplicative_expression
    (95) additive_expression_not_name -> . name - multiplicative_expression
    (100) multiplicative_expression_not_name -> . unary_expression_not_name
    (101) multiplicative_expression_not_name -> . multiplicative_expression_not_name * unary_expression
    (102) multiplicative_expression_not_name -> . name * unary_expression
    (103) multiplicative_expression_not_name -> . multiplicative_expression_not_name / unary_expression
    (104) multiplicative_expression_not_name -> . name / unary_expression
    (105) multiplicative_expression_not_name -> . multiplicative_expression_not_name % unary_expression
    (106) multiplicative_expression_not_name -> . name % unary_expression
    (112) unary_expression_not_name -> . pre_increment_expression
    (113) unary_expression_not_name -> . pre_decrement_expression
    (114) unary_expression_not_name -> . + unary_expression
    (115) unary_expression_not_name -> . - unary_expression
    (116) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (123) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (124) unary_expression_not_plus_minus_not_name -> . ~ unary_expression
    (125) unary_expression_not_plus_minus_not_name -> . ! unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . cast_expression
    (131) postfix_expression_not_name -> . primary
    (132) postfix_expression_not_name -> . post_increment_expression
    (133) postfix_expression_not_name -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    }               shift and go to state 996
    {               shift and go to state 467
    NAME            shift and go to state 179
    @               shift and go to state 402
    +               shift and go to state 264
    -               shift and go to state 278
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 267
    !               shift and go to state 277
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    array_creation_without_array_initializer shift and go to state 95
    relational_expression_not_name shift and go to state 262
    array_access                   shift and go to state 90
    primary                        shift and go to state 468
    exclusive_or_expression_not_name shift and go to state 254
    inclusive_or_expression_not_name shift and go to state 269
    multiplicative_expression_not_name shift and go to state 276
    simple_name                    shift and go to state 64
    primitive_type                 shift and go to state 174
    postfix_expression_not_name    shift and go to state 265
    member_value                   shift and go to state 995
    post_decrement_expression      shift and go to state 460
    pre_increment_expression       shift and go to state 266
    postfix_expression             shift and go to state 472
    conditional_expression_not_name shift and go to state 473
    literal                        shift and go to state 146
    instanceof_expression_not_name shift and go to state 273
    cast_expression                shift and go to state 270
    shift_expression_not_name      shift and go to state 256
    unary_expression_not_name      shift and go to state 280
    equality_expression_not_name   shift and go to state 281
    primary_no_new_array           shift and go to state 87
    field_access                   shift and go to state 96
    unary_expression_not_plus_minus_not_name shift and go to state 257
    pre_decrement_expression       shift and go to state 261
    qualified_name                 shift and go to state 141
    single_member_annotation       shift and go to state 18
    conditional_and_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 122
    member_value_array_initializer shift and go to state 474
    array_creation_with_array_initializer shift and go to state 101
    method_invocation              shift and go to state 176
    normal_annotation              shift and go to state 50
    and_expression_not_name        shift and go to state 271
    annotation                     shift and go to state 475
    annotation_name                shift and go to state 38
    name                           shift and go to state 462
    conditional_or_expression_not_name shift and go to state 272
    marker_annotation              shift and go to state 22
    post_increment_expression      shift and go to state 463
    class_instance_creation_expression shift and go to state 156
    additive_expression_not_name   shift and go to state 274

state 891

    (593) member_value_pair -> simple_name = member_value .

    ,               reduce using rule 593 (member_value_pair -> simple_name = member_value .)
    )               reduce using rule 593 (member_value_pair -> simple_name = member_value .)


state 892

    (556) annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME type_parameters .

    EXTENDS         reduce using rule 556 (annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME type_parameters .)
    IMPLEMENTS      reduce using rule 556 (annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME type_parameters .)
    {               reduce using rule 556 (annotation_type_declaration_header_name -> modifiers @ INTERFACE NAME type_parameters .)


state 893

    (24) conditional_expression_not_name -> name ? expression : . conditional_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 154
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    conditional_or_expression      shift and go to state 165
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 997
    pre_decrement_expression       shift and go to state 160
    conditional_and_expression     shift and go to state 161
    class_instance_creation_expression shift and go to state 156

state 894

    (23) conditional_expression_not_name -> conditional_or_expression_not_name ? expression : . conditional_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 163
    post_decrement_expression      shift and go to state 153
    additive_expression            shift and go to state 173
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 154
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    simple_name                    shift and go to state 64
    conditional_or_expression      shift and go to state 165
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    method_invocation              shift and go to state 176
    shift_expression               shift and go to state 167
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 998
    pre_decrement_expression       shift and go to state 160
    conditional_and_expression     shift and go to state 161
    class_instance_creation_expression shift and go to state 156

state 895

    (406) reference_type2 -> reference_type RSHIFT .

    .               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    [               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    >               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    ,               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    &               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    RSHIFT          reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    RRSHIFT         reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    SUPER           reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    THIS            reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    NAME            reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    (               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    IMPLEMENTS      reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    {               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    INSTANCEOF      reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    EQ              reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    NEQ             reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    ^               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    |               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    AND             reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    ?               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    OR              reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    $end            reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    ;               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    :               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    )               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    ]               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    }               reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    ELLIPSIS        reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    EXTENDS         reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    BOOLEAN         reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    VOID            reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    BYTE            reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    SHORT           reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    INT             reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    LONG            reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    CHAR            reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    FLOAT           reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)
    DOUBLE          reduce using rule 406 (reference_type2 -> reference_type RSHIFT .)


state 896

    (421) wildcard2 -> ? RSHIFT .

    .               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    [               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    >               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    ,               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    &               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    RSHIFT          reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    RRSHIFT         reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    SUPER           reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    THIS            reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    NAME            reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    (               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    IMPLEMENTS      reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    {               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    INSTANCEOF      reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    EQ              reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    NEQ             reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    ^               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    |               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    AND             reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    ?               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    OR              reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    $end            reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    ;               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    :               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    )               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    ]               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    }               reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    ELLIPSIS        reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    EXTENDS         reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    BOOLEAN         reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    VOID            reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    BYTE            reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    SHORT           reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    INT             reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    LONG            reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    CHAR            reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    FLOAT           reduce using rule 421 (wildcard2 -> ? RSHIFT .)
    DOUBLE          reduce using rule 421 (wildcard2 -> ? RSHIFT .)


state 897

    (422) wildcard2 -> ? wildcard_bounds2 .

    .               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    [               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    >               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    ,               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    &               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    RSHIFT          reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    RRSHIFT         reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    SUPER           reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    THIS            reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    NAME            reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    (               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    IMPLEMENTS      reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    {               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    INSTANCEOF      reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    EQ              reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    NEQ             reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    ^               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    |               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    AND             reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    ?               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    OR              reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    $end            reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    ;               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    :               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    )               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    ]               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    }               reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    ELLIPSIS        reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    EXTENDS         reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    BOOLEAN         reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    VOID            reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    BYTE            reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    SHORT           reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    INT             reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    LONG            reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    CHAR            reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    FLOAT           reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)
    DOUBLE          reduce using rule 422 (wildcard2 -> ? wildcard_bounds2 .)


state 898

    (423) wildcard_bounds2 -> EXTENDS . reference_type2
    (419) wildcard_bounds1 -> EXTENDS . reference_type1
    (415) wildcard_bounds -> EXTENDS . reference_type
    (406) reference_type2 -> . reference_type RSHIFT
    (407) reference_type2 -> . class_or_interface < type_argument_list3
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 782
    reference_type                 shift and go to state 999
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    reference_type1                shift and go to state 770
    reference_type2                shift and go to state 1000
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 899

    (424) wildcard_bounds2 -> SUPER . reference_type2
    (420) wildcard_bounds1 -> SUPER . reference_type1
    (416) wildcard_bounds -> SUPER . reference_type
    (406) reference_type2 -> . reference_type RSHIFT
    (407) reference_type2 -> . class_or_interface < type_argument_list3
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 782
    reference_type                 shift and go to state 1001
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    reference_type1                shift and go to state 772
    reference_type2                shift and go to state 1002
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 900

    (403) type_argument_list2 -> type_argument_list , . type_argument2
    (393) type_argument_list1 -> type_argument_list , . type_argument1
    (395) type_argument_list -> type_argument_list , . type_argument
    (404) type_argument2 -> . reference_type2
    (405) type_argument2 -> . wildcard2
    (398) type_argument1 -> . reference_type1
    (399) type_argument1 -> . wildcard1
    (396) type_argument -> . reference_type
    (397) type_argument -> . wildcard
    (406) reference_type2 -> . reference_type RSHIFT
    (407) reference_type2 -> . class_or_interface < type_argument_list3
    (421) wildcard2 -> . ? RSHIFT
    (422) wildcard2 -> . ? wildcard_bounds2
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (417) wildcard1 -> . ? >
    (418) wildcard1 -> . ? wildcard_bounds1
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (413) wildcard -> . ?
    (414) wildcard -> . ? wildcard_bounds
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    ?               shift and go to state 779
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    generic_type                   shift and go to state 284
    reference_type1                shift and go to state 293
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 1003
    primitive_type                 shift and go to state 287
    wildcard2                      shift and go to state 780
    wildcard1                      shift and go to state 289
    class_or_interface             shift and go to state 782
    type_argument1                 shift and go to state 775
    type_argument2                 shift and go to state 1004
    array_type                     shift and go to state 102
    reference_type2                shift and go to state 784
    type_argument                  shift and go to state 776
    name                           shift and go to state 295
    wildcard                       shift and go to state 296

state 901

    (407) reference_type2 -> class_or_interface < . type_argument_list3
    (401) reference_type1 -> class_or_interface < . type_argument_list2
    (386) generic_type -> class_or_interface < . >
    (391) type_arguments -> < . type_argument_list1
    (408) type_argument_list3 -> . type_argument3
    (409) type_argument_list3 -> . type_argument_list , type_argument3
    (402) type_argument_list2 -> . type_argument2
    (403) type_argument_list2 -> . type_argument_list , type_argument2
    (392) type_argument_list1 -> . type_argument1
    (393) type_argument_list1 -> . type_argument_list , type_argument1
    (410) type_argument3 -> . reference_type3
    (411) type_argument3 -> . wildcard3
    (394) type_argument_list -> . type_argument
    (395) type_argument_list -> . type_argument_list , type_argument
    (404) type_argument2 -> . reference_type2
    (405) type_argument2 -> . wildcard2
    (398) type_argument1 -> . reference_type1
    (399) type_argument1 -> . wildcard1
    (412) reference_type3 -> . reference_type RRSHIFT
    (425) wildcard3 -> . ? RRSHIFT
    (426) wildcard3 -> . ? wildcard_bounds3
    (396) type_argument -> . reference_type
    (397) type_argument -> . wildcard
    (406) reference_type2 -> . reference_type RSHIFT
    (407) reference_type2 -> . class_or_interface < type_argument_list3
    (421) wildcard2 -> . ? RSHIFT
    (422) wildcard2 -> . ? wildcard_bounds2
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (417) wildcard1 -> . ? >
    (418) wildcard1 -> . ? wildcard_bounds1
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (413) wildcard -> . ?
    (414) wildcard -> . ? wildcard_bounds
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    >               shift and go to state 632
    ?               shift and go to state 1007
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    generic_type                   shift and go to state 284
    type_argument_list1            shift and go to state 285
    type_argument_list2            shift and go to state 777
    type_argument_list3            shift and go to state 1005
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 1006
    primitive_type                 shift and go to state 287
    wildcard3                      shift and go to state 1008
    wildcard2                      shift and go to state 780
    wildcard1                      shift and go to state 289
    type_argument_list             shift and go to state 1009
    class_or_interface             shift and go to state 782
    type_argument1                 shift and go to state 292
    type_argument2                 shift and go to state 783
    type_argument3                 shift and go to state 1010
    reference_type1                shift and go to state 293
    reference_type3                shift and go to state 1011
    reference_type2                shift and go to state 784
    type_argument                  shift and go to state 294
    name                           shift and go to state 295
    array_type                     shift and go to state 102
    wildcard                       shift and go to state 296

state 902

    (318) explicit_constructor_invocation -> name . type_arguments THIS ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 1012
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 903

    (316) explicit_constructor_invocation -> name . type_arguments SUPER ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 1013
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 904

    (222) method_invocation -> name . type_arguments NAME ( . argument_list_opt )
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 1014
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 905

    (314) explicit_constructor_invocation -> name . THIS ( argument_list_opt . ) ;

    )               shift and go to state 1015


state 906

    (312) explicit_constructor_invocation -> name . SUPER ( argument_list_opt . ) ;

    )               shift and go to state 1016


state 907

    (225) method_invocation -> name . NAME ( argument_list_opt . )

    )               shift and go to state 1017


state 908

    (307) explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .

    $end            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    IF              reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    WHILE           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    FOR             reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    {               reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    ;               reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    DO              reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    BREAK           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    RETURN          reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    THROW           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    TRY             reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    NAME            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    @               reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    VOID            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    BYTE            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    SHORT           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    INT             reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    LONG            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    CHAR            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    STATIC          reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    FINAL           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    THIS            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    SUPER           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    NEW             reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    <               reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    (               reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    NUM             reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    TRUE            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    FALSE           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    NULL            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    ENUM            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    CLASS           reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    }               reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    CASE            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)
    ELSE            reduce using rule 307 (explicit_constructor_invocation -> THIS ( argument_list_opt ) ; .)


state 909

    (549) argument_list -> argument_list , expression .

    ,               reduce using rule 549 (argument_list -> argument_list , expression .)
    )               reduce using rule 549 (argument_list -> argument_list , expression .)


state 910

    (282) synchronized_statement -> SYNCHRONIZED ( expression ) block .

    $end            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    IF              reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    WHILE           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    FOR             reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    {               reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    ASSERT          reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    ;               reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    SWITCH          reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    DO              reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    BREAK           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    CONTINUE        reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    RETURN          reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    SYNCHRONIZED    reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    THROW           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    TRY             reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    NAME            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    @               reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    BOOLEAN         reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    VOID            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    BYTE            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    SHORT           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    INT             reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    LONG            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    CHAR            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    FLOAT           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    DOUBLE          reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    PUBLIC          reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    PROTECTED       reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    PRIVATE         reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    STATIC          reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    ABSTRACT        reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    FINAL           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    NATIVE          reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    TRANSIENT       reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    VOLATILE        reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    STRICTFP        reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    THIS            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    SUPER           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    PLUSPLUS        reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    MINUSMINUS      reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    NEW             reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    <               reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    (               reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    NUM             reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    CHAR_LITERAL    reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    STRING_LITERAL  reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    TRUE            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    FALSE           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    NULL            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    ENUM            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    CLASS           reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    INTERFACE       reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    }               reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    CASE            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    DEFAULT         reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)
    ELSE            reduce using rule 282 (synchronized_statement -> SYNCHRONIZED ( expression ) block .)


state 911

    (310) explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) . ;

    ;               shift and go to state 1018


state 912

    (309) explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) . ;

    ;               shift and go to state 1019


state 913

    (243) statement_expression_list -> statement_expression_list , statement_expression .

    ,               reduce using rule 243 (statement_expression_list -> statement_expression_list , statement_expression .)
    )               reduce using rule 243 (statement_expression_list -> statement_expression_list , statement_expression .)
    ;               reduce using rule 243 (statement_expression_list -> statement_expression_list , statement_expression .)


state 914

    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (128) postfix_expression -> name .
    (325) class_instance_creation_expression_name -> name . .
    (344) qualified_name -> name . . simple_name
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (150) primary_no_new_array -> name . dims . CLASS
    (330) array_access -> name . [ expression ]
    (155) dims -> . dims_loop
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    .               shift and go to state 1020
    PLUSPLUS        reduce using rule 128 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 128 (postfix_expression -> name .)
    =               reduce using rule 128 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 128 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 128 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 128 (postfix_expression -> name .)
    LSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RSHIFT_ASSIGN   reduce using rule 128 (postfix_expression -> name .)
    RRSHIFT_ASSIGN  reduce using rule 128 (postfix_expression -> name .)
    AND_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    OR_ASSIGN       reduce using rule 128 (postfix_expression -> name .)
    XOR_ASSIGN      reduce using rule 128 (postfix_expression -> name .)
    [               shift and go to state 301

    dims                           shift and go to state 364
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237

state 915

    (236) for_statement -> FOR ( for_init_opt ; expression_opt . ; for_update_opt ) statement

    ;               shift and go to state 1021


state 916

    (252) enhanced_for_statement_header_init -> FOR ( type NAME dims_opt .
    (182) variable_declarator_id -> NAME dims_opt .

    :               reduce using rule 252 (enhanced_for_statement_header_init -> FOR ( type NAME dims_opt .)
    =               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)
    ,               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)
    ;               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)


state 917

    (253) enhanced_for_statement_header_init -> FOR ( modifiers type NAME . dims_opt
    (182) variable_declarator_id -> NAME . dims_opt
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    :               reduce using rule 623 (empty -> .)
    =               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    ;               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    dims_opt                       shift and go to state 1022
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 918

    (298) resource_specification -> ( resources semi_opt ) .

    {               reduce using rule 298 (resource_specification -> ( resources semi_opt ) .)


state 919

    (302) resources -> resources trailing_semicolon resource .

    ;               reduce using rule 302 (resources -> resources trailing_semicolon resource .)
    )               reduce using rule 302 (resources -> resources trailing_semicolon resource .)


state 920

    (305) resource -> modifiers type variable_declarator_id . = variable_initializer

    =               shift and go to state 1023


state 921

    (304) resource -> type variable_declarator_id = . variable_initializer
    (183) variable_initializer -> . expression
    (184) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (216) array_initializer -> . { comma_opt }
    (217) array_initializer -> . { variable_initializers }
    (218) array_initializer -> . { variable_initializers , }
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    {               shift and go to state 832
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    cast_expression                shift and go to state 177
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    variable_initializer           shift and go to state 1024
    post_increment_expression      shift and go to state 159
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    array_initializer              shift and go to state 846
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 844
    conditional_and_expression     shift and go to state 161

state 922

    (292) catch_formal_parameter -> modifiers_opt . catch_type variable_declarator_id
    (293) catch_type -> . union_type
    (294) union_type -> . type
    (295) union_type -> . union_type | type
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_or_interface             shift and go to state 144
    class_or_interface_type        shift and go to state 88
    union_type                     shift and go to state 1025
    reference_type                 shift and go to state 91
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    array_type                     shift and go to state 102
    catch_type                     shift and go to state 1026
    simple_name                    shift and go to state 64
    type                           shift and go to state 1027
    name                           shift and go to state 342

state 923

    (291) catch_clause -> CATCH ( catch_formal_parameter . ) block

    )               shift and go to state 1028


state 924

    (306) finally -> FINALLY block .

    $end            reduce using rule 306 (finally -> FINALLY block .)
    IF              reduce using rule 306 (finally -> FINALLY block .)
    WHILE           reduce using rule 306 (finally -> FINALLY block .)
    FOR             reduce using rule 306 (finally -> FINALLY block .)
    {               reduce using rule 306 (finally -> FINALLY block .)
    ASSERT          reduce using rule 306 (finally -> FINALLY block .)
    ;               reduce using rule 306 (finally -> FINALLY block .)
    SWITCH          reduce using rule 306 (finally -> FINALLY block .)
    DO              reduce using rule 306 (finally -> FINALLY block .)
    BREAK           reduce using rule 306 (finally -> FINALLY block .)
    CONTINUE        reduce using rule 306 (finally -> FINALLY block .)
    RETURN          reduce using rule 306 (finally -> FINALLY block .)
    SYNCHRONIZED    reduce using rule 306 (finally -> FINALLY block .)
    THROW           reduce using rule 306 (finally -> FINALLY block .)
    TRY             reduce using rule 306 (finally -> FINALLY block .)
    NAME            reduce using rule 306 (finally -> FINALLY block .)
    @               reduce using rule 306 (finally -> FINALLY block .)
    BOOLEAN         reduce using rule 306 (finally -> FINALLY block .)
    VOID            reduce using rule 306 (finally -> FINALLY block .)
    BYTE            reduce using rule 306 (finally -> FINALLY block .)
    SHORT           reduce using rule 306 (finally -> FINALLY block .)
    INT             reduce using rule 306 (finally -> FINALLY block .)
    LONG            reduce using rule 306 (finally -> FINALLY block .)
    CHAR            reduce using rule 306 (finally -> FINALLY block .)
    FLOAT           reduce using rule 306 (finally -> FINALLY block .)
    DOUBLE          reduce using rule 306 (finally -> FINALLY block .)
    PUBLIC          reduce using rule 306 (finally -> FINALLY block .)
    PROTECTED       reduce using rule 306 (finally -> FINALLY block .)
    PRIVATE         reduce using rule 306 (finally -> FINALLY block .)
    STATIC          reduce using rule 306 (finally -> FINALLY block .)
    ABSTRACT        reduce using rule 306 (finally -> FINALLY block .)
    FINAL           reduce using rule 306 (finally -> FINALLY block .)
    NATIVE          reduce using rule 306 (finally -> FINALLY block .)
    TRANSIENT       reduce using rule 306 (finally -> FINALLY block .)
    VOLATILE        reduce using rule 306 (finally -> FINALLY block .)
    STRICTFP        reduce using rule 306 (finally -> FINALLY block .)
    THIS            reduce using rule 306 (finally -> FINALLY block .)
    SUPER           reduce using rule 306 (finally -> FINALLY block .)
    PLUSPLUS        reduce using rule 306 (finally -> FINALLY block .)
    MINUSMINUS      reduce using rule 306 (finally -> FINALLY block .)
    NEW             reduce using rule 306 (finally -> FINALLY block .)
    <               reduce using rule 306 (finally -> FINALLY block .)
    (               reduce using rule 306 (finally -> FINALLY block .)
    NUM             reduce using rule 306 (finally -> FINALLY block .)
    CHAR_LITERAL    reduce using rule 306 (finally -> FINALLY block .)
    STRING_LITERAL  reduce using rule 306 (finally -> FINALLY block .)
    TRUE            reduce using rule 306 (finally -> FINALLY block .)
    FALSE           reduce using rule 306 (finally -> FINALLY block .)
    NULL            reduce using rule 306 (finally -> FINALLY block .)
    ENUM            reduce using rule 306 (finally -> FINALLY block .)
    CLASS           reduce using rule 306 (finally -> FINALLY block .)
    INTERFACE       reduce using rule 306 (finally -> FINALLY block .)
    }               reduce using rule 306 (finally -> FINALLY block .)
    CASE            reduce using rule 306 (finally -> FINALLY block .)
    DEFAULT         reduce using rule 306 (finally -> FINALLY block .)
    ELSE            reduce using rule 306 (finally -> FINALLY block .)


state 925

    (297) try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .

    $end            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    IF              reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    WHILE           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FOR             reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    {               reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ASSERT          reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ;               reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SWITCH          reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    DO              reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    BREAK           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CONTINUE        reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    RETURN          reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SYNCHRONIZED    reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    THROW           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    TRY             reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    NAME            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    @               reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    BOOLEAN         reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    VOID            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    BYTE            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SHORT           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    INT             reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    LONG            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CHAR            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FLOAT           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    DOUBLE          reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    PUBLIC          reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    PROTECTED       reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    PRIVATE         reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    STATIC          reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ABSTRACT        reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FINAL           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    NATIVE          reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    TRANSIENT       reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    VOLATILE        reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    STRICTFP        reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    THIS            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    SUPER           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    PLUSPLUS        reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    MINUSMINUS      reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    NEW             reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    <               reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    (               reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    NUM             reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CHAR_LITERAL    reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    STRING_LITERAL  reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    TRUE            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    FALSE           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    NULL            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ENUM            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CLASS           reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    INTERFACE       reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    }               reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    CASE            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    DEFAULT         reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)
    ELSE            reduce using rule 297 (try_statement_with_resources -> TRY resource_specification try_block catches_opt finally .)


state 926

    (226) method_invocation -> primary . NAME ( argument_list_opt . )

    )               shift and go to state 1029


state 927

    (223) method_invocation -> primary . type_arguments NAME ( . argument_list_opt )
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 1030
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 928

    (317) explicit_constructor_invocation -> primary . type_arguments THIS ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 1031
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 929

    (315) explicit_constructor_invocation -> primary . type_arguments SUPER ( . argument_list_opt ) ;
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 1032
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 930

    (313) explicit_constructor_invocation -> primary . THIS ( argument_list_opt . ) ;

    )               shift and go to state 1033


state 931

    (322) class_instance_creation_expression -> primary . NEW class_type ( . argument_list_opt ) class_body_opt
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    assignment_expression          shift and go to state 186
    argument_list_opt              shift and go to state 1034
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 932

    (321) class_instance_creation_expression -> primary . NEW type_arguments class_type . ( argument_list_opt ) class_body_opt

    (               shift and go to state 1035


state 933

    (311) explicit_constructor_invocation -> primary . SUPER ( argument_list_opt . ) ;

    )               shift and go to state 1036


state 934

    (234) while_statement -> WHILE ( expression ) statement .

    IF              reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    WHILE           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    FOR             reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    {               reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    ASSERT          reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    ;               reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    SWITCH          reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    DO              reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    BREAK           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    CONTINUE        reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    RETURN          reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    SYNCHRONIZED    reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    THROW           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    TRY             reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    NAME            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    @               reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    BOOLEAN         reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    VOID            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    BYTE            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    SHORT           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    INT             reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    LONG            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    CHAR            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    FLOAT           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    DOUBLE          reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    PUBLIC          reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    PROTECTED       reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    PRIVATE         reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    STATIC          reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    ABSTRACT        reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    FINAL           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    NATIVE          reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    TRANSIENT       reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    VOLATILE        reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    STRICTFP        reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    THIS            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    SUPER           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    PLUSPLUS        reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    MINUSMINUS      reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    NEW             reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    <               reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    (               reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    NUM             reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    CHAR_LITERAL    reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    STRING_LITERAL  reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    TRUE            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    FALSE           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    NULL            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    ENUM            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    CLASS           reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    INTERFACE       reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    }               reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    $end            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    CASE            reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)
    DEFAULT         reduce using rule 234 (while_statement -> WHILE ( expression ) statement .)


state 935

    (319) class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt . ) class_body_opt

    )               shift and go to state 1037


state 936

    (214) comma_opt -> , .

    }               reduce using rule 214 (comma_opt -> , .)


state 937

    (217) array_initializer -> { variable_initializers . }
    (218) array_initializer -> { variable_initializers . , }
    (220) variable_initializers -> variable_initializers . , variable_initializer

    }               shift and go to state 1038
    ,               shift and go to state 1039


state 938

    (219) variable_initializers -> variable_initializer .

    }               reduce using rule 219 (variable_initializers -> variable_initializer .)
    ,               reduce using rule 219 (variable_initializers -> variable_initializer .)


state 939

    (215) comma_opt -> empty .

    }               reduce using rule 215 (comma_opt -> empty .)


state 940

    (216) array_initializer -> { comma_opt . }

    }               shift and go to state 1040


state 941

    (337) dim_with_or_without_expr -> [ expression ] .

    {               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    [               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    .               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    PLUSPLUS        reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    MINUSMINUS      reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    =               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    TIMES_ASSIGN    reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    DIVIDE_ASSIGN   reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    REMAINDER_ASSIGN reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    PLUS_ASSIGN     reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    MINUS_ASSIGN    reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    LSHIFT_ASSIGN   reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    RSHIFT_ASSIGN   reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    RRSHIFT_ASSIGN  reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    AND_ASSIGN      reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    OR_ASSIGN       reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    XOR_ASSIGN      reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    *               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    /               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    %               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    +               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    -               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    LSHIFT          reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    RSHIFT          reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    RRSHIFT         reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    >               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    <               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    GTEQ            reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    LTEQ            reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    INSTANCEOF      reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    EQ              reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    NEQ             reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    &               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    ^               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    |               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    AND             reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    ?               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    OR              reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    $end            reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    )               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    ;               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    :               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    ]               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    ,               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)
    }               reduce using rule 337 (dim_with_or_without_expr -> [ expression ] .)


state 942

    (320) class_instance_creation_expression -> NEW class_type ( argument_list_opt ) . class_body_opt
    (326) class_body_opt -> . class_body
    (327) class_body_opt -> . empty
    (466) class_body -> . { class_body_declarations_opt }
    (623) empty -> .

    {               shift and go to state 220
    ;               reduce using rule 623 (empty -> .)
    [               reduce using rule 623 (empty -> .)
    .               reduce using rule 623 (empty -> .)
    PLUSPLUS        reduce using rule 623 (empty -> .)
    MINUSMINUS      reduce using rule 623 (empty -> .)
    =               reduce using rule 623 (empty -> .)
    TIMES_ASSIGN    reduce using rule 623 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 623 (empty -> .)
    REMAINDER_ASSIGN reduce using rule 623 (empty -> .)
    PLUS_ASSIGN     reduce using rule 623 (empty -> .)
    MINUS_ASSIGN    reduce using rule 623 (empty -> .)
    LSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RRSHIFT_ASSIGN  reduce using rule 623 (empty -> .)
    AND_ASSIGN      reduce using rule 623 (empty -> .)
    OR_ASSIGN       reduce using rule 623 (empty -> .)
    XOR_ASSIGN      reduce using rule 623 (empty -> .)
    *               reduce using rule 623 (empty -> .)
    /               reduce using rule 623 (empty -> .)
    %               reduce using rule 623 (empty -> .)
    +               reduce using rule 623 (empty -> .)
    -               reduce using rule 623 (empty -> .)
    LSHIFT          reduce using rule 623 (empty -> .)
    RSHIFT          reduce using rule 623 (empty -> .)
    RRSHIFT         reduce using rule 623 (empty -> .)
    >               reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    GTEQ            reduce using rule 623 (empty -> .)
    LTEQ            reduce using rule 623 (empty -> .)
    INSTANCEOF      reduce using rule 623 (empty -> .)
    EQ              reduce using rule 623 (empty -> .)
    NEQ             reduce using rule 623 (empty -> .)
    &               reduce using rule 623 (empty -> .)
    ^               reduce using rule 623 (empty -> .)
    |               reduce using rule 623 (empty -> .)
    AND             reduce using rule 623 (empty -> .)
    ?               reduce using rule 623 (empty -> .)
    OR              reduce using rule 623 (empty -> .)
    $end            reduce using rule 623 (empty -> .)
    )               reduce using rule 623 (empty -> .)
    :               reduce using rule 623 (empty -> .)
    ]               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    }               reduce using rule 623 (empty -> .)

    class_body                     shift and go to state 1041
    class_body_opt                 shift and go to state 1042
    empty                          shift and go to state 1043

state 943

    (263) switch_statement -> SWITCH ( expression ) switch_block .

    $end            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    IF              reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    WHILE           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    FOR             reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    {               reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    ASSERT          reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    ;               reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    SWITCH          reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    DO              reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    BREAK           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    CONTINUE        reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    RETURN          reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    SYNCHRONIZED    reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    THROW           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    TRY             reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    NAME            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    @               reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    BOOLEAN         reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    VOID            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    BYTE            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    SHORT           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    INT             reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    LONG            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    CHAR            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    FLOAT           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    DOUBLE          reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    PUBLIC          reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    PROTECTED       reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    PRIVATE         reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    STATIC          reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    ABSTRACT        reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    FINAL           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    NATIVE          reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    TRANSIENT       reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    VOLATILE        reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    STRICTFP        reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    THIS            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    SUPER           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    PLUSPLUS        reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    MINUSMINUS      reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    NEW             reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    <               reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    (               reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    NUM             reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    CHAR_LITERAL    reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    STRING_LITERAL  reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    TRUE            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    FALSE           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    NULL            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    ENUM            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    CLASS           reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    INTERFACE       reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    }               reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    CASE            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    DEFAULT         reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)
    ELSE            reduce using rule 263 (switch_statement -> SWITCH ( expression ) switch_block .)


state 944

    (264) switch_block -> { . }
    (265) switch_block -> { . switch_block_statements }
    (266) switch_block -> { . switch_labels }
    (267) switch_block -> { . switch_block_statements switch_labels }
    (268) switch_block_statements -> . switch_block_statement
    (269) switch_block_statements -> . switch_block_statements switch_block_statement
    (271) switch_labels -> . switch_label
    (272) switch_labels -> . switch_labels switch_label
    (270) switch_block_statement -> . switch_labels block_statements
    (273) switch_label -> . CASE constant_expression :
    (274) switch_label -> . DEFAULT :

    }               shift and go to state 1046
    CASE            shift and go to state 1044
    DEFAULT         shift and go to state 1045

    switch_labels                  shift and go to state 1047
    switch_block_statement         shift and go to state 1050
    switch_label                   shift and go to state 1048
    switch_block_statements        shift and go to state 1049

state 945

    (323) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt . ) class_body_opt

    )               shift and go to state 1051


state 946

    (324) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( . argument_list_opt ) class_body_opt
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    array_creation_without_array_initializer shift and go to state 95
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    simple_name                    shift and go to state 64
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    assignment_expression          shift and go to state 186
    argument_list_opt              shift and go to state 1052
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 947

    (276) do_statement -> DO statement WHILE ( expression . ) ;

    )               shift and go to state 1053


state 948

    (261) assert_statement -> ASSERT expression : expression ; .

    $end            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    IF              reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    WHILE           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    FOR             reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    {               reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    ASSERT          reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    ;               reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    SWITCH          reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    DO              reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    BREAK           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    CONTINUE        reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    RETURN          reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    SYNCHRONIZED    reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    THROW           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    TRY             reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    NAME            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    @               reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    BOOLEAN         reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    VOID            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    BYTE            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    SHORT           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    INT             reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    LONG            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    CHAR            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    FLOAT           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    DOUBLE          reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    PUBLIC          reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    PROTECTED       reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    PRIVATE         reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    STATIC          reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    ABSTRACT        reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    FINAL           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    NATIVE          reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    TRANSIENT       reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    VOLATILE        reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    STRICTFP        reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    THIS            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    SUPER           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    PLUSPLUS        reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    MINUSMINUS      reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    NEW             reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    <               reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    (               reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    NUM             reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    CHAR_LITERAL    reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    STRING_LITERAL  reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    TRUE            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    FALSE           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    NULL            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    ENUM            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    CLASS           reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    INTERFACE       reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    }               reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    CASE            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    DEFAULT         reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)
    ELSE            reduce using rule 261 (assert_statement -> ASSERT expression : expression ; .)


state 949

    (249) enhanced_for_statement -> enhanced_for_statement_header . statement
    (250) enhanced_for_statement_no_short_if -> enhanced_for_statement_header . statement_no_short_if
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (254) statement_no_short_if -> . statement_without_trailing_substatement
    (255) statement_no_short_if -> . labeled_statement_no_short_if
    (256) statement_no_short_if -> . if_then_else_statement_no_short_if
    (257) statement_no_short_if -> . while_statement_no_short_if
    (258) statement_no_short_if -> . for_statement_no_short_if
    (259) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (229) labeled_statement_no_short_if -> . label : statement_no_short_if
    (233) if_then_else_statement_no_short_if -> . IF ( expression ) statement_no_short_if ELSE statement_no_short_if
    (235) while_statement_no_short_if -> . WHILE ( expression ) statement_no_short_if
    (237) for_statement_no_short_if -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (250) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 961
    WHILE           shift and go to state 955
    FOR             shift and go to state 952
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    array_access                   shift and go to state 90
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    labeled_statement_no_short_if  shift and go to state 956
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_no_short_if shift and go to state 954
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 951
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 299
    literal                        shift and go to state 146
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    while_statement_no_short_if    shift and go to state 958
    enhanced_for_statement_header  shift and go to state 949
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    for_statement_no_short_if      shift and go to state 959
    statement_without_trailing_substatement shift and go to state 953
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    statement_no_short_if          shift and go to state 1054
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    array_creation_with_array_initializer shift and go to state 101
    labeled_statement              shift and go to state 77
    if_then_else_statement_no_short_if shift and go to state 950
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 950

    (256) statement_no_short_if -> if_then_else_statement_no_short_if .

    ELSE            reduce using rule 256 (statement_no_short_if -> if_then_else_statement_no_short_if .)


state 951

    (228) labeled_statement -> label . : statement
    (229) labeled_statement_no_short_if -> label . : statement_no_short_if

    :               shift and go to state 1055


state 952

    (236) for_statement -> FOR . ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (237) for_statement_no_short_if -> FOR . ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (252) enhanced_for_statement_header_init -> FOR . ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> FOR . ( modifiers type NAME dims_opt

    (               shift and go to state 1056


state 953

    (185) statement -> statement_without_trailing_substatement .
    (254) statement_no_short_if -> statement_without_trailing_substatement .

    $end            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    IF              reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    WHILE           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    FOR             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    {               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ASSERT          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ;               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    SWITCH          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    DO              reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    BREAK           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CONTINUE        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    RETURN          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    SYNCHRONIZED    reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    THROW           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    TRY             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NAME            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    @               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    BOOLEAN         reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    VOID            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    BYTE            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    SHORT           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    INT             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    LONG            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CHAR            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    FLOAT           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    DOUBLE          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    PUBLIC          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    PROTECTED       reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    PRIVATE         reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    STATIC          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ABSTRACT        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    FINAL           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NATIVE          reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    TRANSIENT       reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    VOLATILE        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    STRICTFP        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    THIS            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    SUPER           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    PLUSPLUS        reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    MINUSMINUS      reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NEW             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    <               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    (               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NUM             reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CHAR_LITERAL    reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    STRING_LITERAL  reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    TRUE            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    FALSE           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    NULL            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ENUM            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CLASS           reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    INTERFACE       reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    }               reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    CASE            reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    DEFAULT         reduce using rule 185 (statement -> statement_without_trailing_substatement .)
    ELSE            reduce using rule 254 (statement_no_short_if -> statement_without_trailing_substatement .)


state 954

    (259) statement_no_short_if -> enhanced_for_statement_no_short_if .

    ELSE            reduce using rule 259 (statement_no_short_if -> enhanced_for_statement_no_short_if .)


state 955

    (234) while_statement -> WHILE . ( expression ) statement
    (235) while_statement_no_short_if -> WHILE . ( expression ) statement_no_short_if

    (               shift and go to state 1057


state 956

    (255) statement_no_short_if -> labeled_statement_no_short_if .

    ELSE            reduce using rule 255 (statement_no_short_if -> labeled_statement_no_short_if .)


state 957

    (231) if_then_statement -> IF ( expression ) statement .

    $end            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    IF              reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    WHILE           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    FOR             reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    {               reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    ASSERT          reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    ;               reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    SWITCH          reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    DO              reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    BREAK           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    CONTINUE        reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    RETURN          reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    SYNCHRONIZED    reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    THROW           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    TRY             reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    NAME            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    @               reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    BOOLEAN         reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    VOID            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    BYTE            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    SHORT           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    INT             reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    LONG            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    CHAR            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    FLOAT           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    DOUBLE          reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    PUBLIC          reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    PROTECTED       reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    PRIVATE         reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    STATIC          reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    ABSTRACT        reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    FINAL           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    NATIVE          reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    TRANSIENT       reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    VOLATILE        reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    STRICTFP        reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    THIS            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    SUPER           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    PLUSPLUS        reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    MINUSMINUS      reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    NEW             reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    <               reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    (               reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    NUM             reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    CHAR_LITERAL    reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    STRING_LITERAL  reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    TRUE            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    FALSE           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    NULL            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    ENUM            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    CLASS           reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    INTERFACE       reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    }               reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    CASE            reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)
    DEFAULT         reduce using rule 231 (if_then_statement -> IF ( expression ) statement .)


state 958

    (257) statement_no_short_if -> while_statement_no_short_if .

    ELSE            reduce using rule 257 (statement_no_short_if -> while_statement_no_short_if .)


state 959

    (258) statement_no_short_if -> for_statement_no_short_if .

    ELSE            reduce using rule 258 (statement_no_short_if -> for_statement_no_short_if .)


state 960

    (232) if_then_else_statement -> IF ( expression ) statement_no_short_if . ELSE statement

    ELSE            shift and go to state 1058


state 961

    (231) if_then_statement -> IF . ( expression ) statement
    (232) if_then_else_statement -> IF . ( expression ) statement_no_short_if ELSE statement
    (233) if_then_else_statement_no_short_if -> IF . ( expression ) statement_no_short_if ELSE statement_no_short_if

    (               shift and go to state 1059


state 962

    (308) explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .

    $end            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    IF              reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    WHILE           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    FOR             reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    {               reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    ;               reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    DO              reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    BREAK           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    RETURN          reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    THROW           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    TRY             reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    NAME            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    @               reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    VOID            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    BYTE            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    SHORT           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    INT             reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    LONG            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    CHAR            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    STATIC          reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    FINAL           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    THIS            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    SUPER           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    NEW             reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    <               reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    (               reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    NUM             reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    TRUE            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    FALSE           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    NULL            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    ENUM            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    CLASS           reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    }               reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    CASE            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)
    ELSE            reduce using rule 308 (explicit_constructor_invocation -> SUPER ( argument_list_opt ) ; .)


state 963

    (227) method_invocation -> SUPER . NAME ( argument_list_opt . )

    )               shift and go to state 1060


state 964

    (224) method_invocation -> SUPER . type_arguments NAME ( . argument_list_opt )
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    argument_list_opt              shift and go to state 1061
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 965

    (160) cast_expression -> ( name type_arguments dims_opt ) . unary_expression_not_plus_minus
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 1062
    simple_name                    shift and go to state 64
    post_decrement_expression      shift and go to state 153
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    cast_expression                shift and go to state 177
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    post_increment_expression      shift and go to state 159

state 966

    (161) cast_expression -> ( name type_arguments . class_or_interface_type . dims_opt ) unary_expression_not_plus_minus
    (153) dims_opt -> . dims
    (154) dims_opt -> . empty
    (155) dims -> . dims_loop
    (623) empty -> .
    (156) dims_loop -> . one_dim_loop
    (157) dims_loop -> . dims_loop one_dim_loop
    (158) one_dim_loop -> . [ ]

    )               reduce using rule 623 (empty -> .)
    [               shift and go to state 238

    dims_opt                       shift and go to state 1063
    dims                           shift and go to state 625
    dims_loop                      shift and go to state 236
    one_dim_loop                   shift and go to state 237
    empty                          shift and go to state 626

state 967

    (163) cast_expression -> ( name dims ) unary_expression_not_plus_minus .

    *               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    /               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    %               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    +               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    -               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    RRSHIFT         reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    >               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    <               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    GTEQ            reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    LTEQ            reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    EQ              reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    NEQ             reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    &               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    ^               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    |               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    AND             reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    ?               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    OR              reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    )               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    ,               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    }               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    ;               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    $end            reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    :               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)
    ]               reduce using rule 163 (cast_expression -> ( name dims ) unary_expression_not_plus_minus .)


state 968

    (159) cast_expression -> ( primitive_type dims_opt ) unary_expression .

    *               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    /               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    %               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    +               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    -               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    LSHIFT          reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    RSHIFT          reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    RRSHIFT         reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    >               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    <               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    GTEQ            reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    LTEQ            reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    INSTANCEOF      reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    EQ              reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    NEQ             reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    &               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    ^               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    |               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    AND             reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    ?               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    OR              reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    )               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    ,               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    }               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    ;               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    $end            reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    :               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)
    ]               reduce using rule 159 (cast_expression -> ( primitive_type dims_opt ) unary_expression .)


state 969

    (21) conditional_expression -> conditional_or_expression ? expression : conditional_expression .

    ,               reduce using rule 21 (conditional_expression -> conditional_or_expression ? expression : conditional_expression .)
    )               reduce using rule 21 (conditional_expression -> conditional_or_expression ? expression : conditional_expression .)
    ;               reduce using rule 21 (conditional_expression -> conditional_or_expression ? expression : conditional_expression .)
    ]               reduce using rule 21 (conditional_expression -> conditional_or_expression ? expression : conditional_expression .)
    $end            reduce using rule 21 (conditional_expression -> conditional_or_expression ? expression : conditional_expression .)
    :               reduce using rule 21 (conditional_expression -> conditional_or_expression ? expression : conditional_expression .)
    }               reduce using rule 21 (conditional_expression -> conditional_or_expression ? expression : conditional_expression .)


state 970

    (535) enum_body -> { enum_constants , enum_body_declarations_opt } .

    ;               reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    @               reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    PUBLIC          reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    PROTECTED       reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    PRIVATE         reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    STATIC          reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    ABSTRACT        reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    FINAL           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    NATIVE          reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    SYNCHRONIZED    reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    TRANSIENT       reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    VOLATILE        reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    STRICTFP        reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    ENUM            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    CLASS           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    INTERFACE       reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    $end            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    IF              reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    WHILE           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    FOR             reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    {               reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    ASSERT          reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    SWITCH          reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    DO              reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    BREAK           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    CONTINUE        reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    RETURN          reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    THROW           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    TRY             reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    NAME            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    BOOLEAN         reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    VOID            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    BYTE            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    SHORT           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    INT             reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    LONG            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    CHAR            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    FLOAT           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    DOUBLE          reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    THIS            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    SUPER           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    PLUSPLUS        reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    MINUSMINUS      reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    NEW             reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    <               reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    (               reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    NUM             reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    CHAR_LITERAL    reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    STRING_LITERAL  reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    TRUE            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    FALSE           reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    NULL            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    }               reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    CASE            reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)
    DEFAULT         reduce using rule 535 (enum_body -> { enum_constants , enum_body_declarations_opt } .)


state 971

    (545) arguments -> ( argument_list_opt ) .

    {               reduce using rule 545 (arguments -> ( argument_list_opt ) .)
    ,               reduce using rule 545 (arguments -> ( argument_list_opt ) .)
    ;               reduce using rule 545 (arguments -> ( argument_list_opt ) .)
    }               reduce using rule 545 (arguments -> ( argument_list_opt ) .)


state 972

    (446) additional_bound1 -> & . reference_type1
    (438) additional_bound -> & . reference_type
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 291
    reference_type                 shift and go to state 1065
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    reference_type1                shift and go to state 1064
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 973

    (443) type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .

    EXTENDS         reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    IMPLEMENTS      reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    {               reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    NAME            reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    BOOLEAN         reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    VOID            reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    BYTE            reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    SHORT           reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    INT             reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    LONG            reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    CHAR            reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    FLOAT           reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)
    DOUBLE          reduce using rule 443 (type_parameter1 -> type_parameter_header EXTENDS reference_type additional_bound_list1 .)


state 974

    (436) additional_bound_list -> additional_bound .

    &               reduce using rule 436 (additional_bound_list -> additional_bound .)
    ,               reduce using rule 436 (additional_bound_list -> additional_bound .)


state 975

    (435) type_parameter -> type_parameter_header EXTENDS reference_type additional_bound_list .
    (445) additional_bound_list1 -> additional_bound_list . additional_bound1
    (437) additional_bound_list -> additional_bound_list . additional_bound
    (446) additional_bound1 -> . & reference_type1
    (438) additional_bound -> . & reference_type

    ,               reduce using rule 435 (type_parameter -> type_parameter_header EXTENDS reference_type additional_bound_list .)
    &               shift and go to state 972

    additional_bound               shift and go to state 1066
    additional_bound1              shift and go to state 1067

state 976

    (444) additional_bound_list1 -> additional_bound1 .

    EXTENDS         reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    IMPLEMENTS      reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    {               reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    NAME            reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    BOOLEAN         reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    VOID            reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    BYTE            reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    SHORT           reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    INT             reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    LONG            reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    CHAR            reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    FLOAT           reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)
    DOUBLE          reduce using rule 444 (additional_bound_list1 -> additional_bound1 .)


state 977

    (492) formal_parameter -> modifiers_opt type variable_declarator_id .

    ,               reduce using rule 492 (formal_parameter -> modifiers_opt type variable_declarator_id .)
    )               reduce using rule 492 (formal_parameter -> modifiers_opt type variable_declarator_id .)


state 978

    (493) formal_parameter -> modifiers_opt type ELLIPSIS . variable_declarator_id
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 345

    variable_declarator_id         shift and go to state 1068

state 979

    (494) method_header_throws_clause_opt -> method_header_throws_clause .

    ;               reduce using rule 494 (method_header_throws_clause_opt -> method_header_throws_clause .)
    {               reduce using rule 494 (method_header_throws_clause_opt -> method_header_throws_clause .)


state 980

    (485) constructor_header -> constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt .

    {               reduce using rule 485 (constructor_header -> constructor_header_name formal_parameter_list_opt ) method_header_throws_clause_opt .)


state 981

    (496) method_header_throws_clause -> THROWS . class_type_list
    (497) class_type_list -> . class_type_elt
    (498) class_type_list -> . class_type_list , class_type_elt
    (499) class_type_elt -> . class_type
    (382) class_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type_elt                 shift and go to state 1071
    class_or_interface             shift and go to state 144
    class_type_list                shift and go to state 1070
    generic_type                   shift and go to state 331
    name                           shift and go to state 335
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 394
    class_type                     shift and go to state 1069

state 982

    (495) method_header_throws_clause_opt -> empty .

    ;               reduce using rule 495 (method_header_throws_clause_opt -> empty .)
    {               reduce using rule 495 (method_header_throws_clause_opt -> empty .)


state 983

    (491) formal_parameter_list -> formal_parameter_list , formal_parameter .

    ,               reduce using rule 491 (formal_parameter_list -> formal_parameter_list , formal_parameter .)
    )               reduce using rule 491 (formal_parameter_list -> formal_parameter_list , formal_parameter .)


state 984

    (569) annotation_method_header_name -> modifiers_opt type_parameters type NAME . (

    (               shift and go to state 1072


state 985

    (486) constructor_header_name -> modifiers_opt type_parameters NAME ( .

    PUBLIC          reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    PROTECTED       reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    PRIVATE         reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    STATIC          reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    ABSTRACT        reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    FINAL           reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    NATIVE          reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    SYNCHRONIZED    reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    TRANSIENT       reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    VOLATILE        reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    STRICTFP        reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    @               reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    )               reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    BOOLEAN         reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    VOID            reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    BYTE            reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    SHORT           reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    INT             reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    LONG            reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    CHAR            reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    FLOAT           reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    DOUBLE          reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)
    NAME            reduce using rule 486 (constructor_header_name -> modifiers_opt type_parameters NAME ( .)


state 986

    (482) field_declaration -> modifiers_opt type variable_declarators ; .

    ;               reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    @               reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    PUBLIC          reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    PROTECTED       reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    PRIVATE         reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    STATIC          reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    ABSTRACT        reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    FINAL           reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    NATIVE          reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    SYNCHRONIZED    reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    TRANSIENT       reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    VOLATILE        reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    STRICTFP        reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    NAME            reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    ENUM            reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    CLASS           reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    INTERFACE       reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    <               reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    BOOLEAN         reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    VOID            reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    BYTE            reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    SHORT           reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    INT             reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    LONG            reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    CHAR            reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    FLOAT           reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    DOUBLE          reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    }               reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)
    {               reduce using rule 482 (field_declaration -> modifiers_opt type variable_declarators ; .)


state 987

    (570) annotation_method_header_name -> modifiers_opt type NAME ( .

    PUBLIC          reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    PROTECTED       reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    PRIVATE         reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    STATIC          reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    ABSTRACT        reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    FINAL           reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    NATIVE          reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    SYNCHRONIZED    reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    TRANSIENT       reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    VOLATILE        reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    STRICTFP        reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    @               reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    )               reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    BOOLEAN         reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    VOID            reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    BYTE            reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    SHORT           reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    INT             reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    LONG            reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    CHAR            reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    FLOAT           reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    DOUBLE          reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)
    NAME            reduce using rule 570 (annotation_method_header_name -> modifiers_opt type NAME ( .)


state 988

    (507) method_header_extended_dims -> dims_opt .

    THROWS          reduce using rule 507 (method_header_extended_dims -> dims_opt .)
    ;               reduce using rule 507 (method_header_extended_dims -> dims_opt .)
    {               reduce using rule 507 (method_header_extended_dims -> dims_opt .)
    DEFAULT         reduce using rule 507 (method_header_extended_dims -> dims_opt .)


state 989

    (568) annotation_method_header -> annotation_method_header_name formal_parameter_list_opt ) method_header_extended_dims . annotation_method_header_default_value_opt
    (571) annotation_method_header_default_value_opt -> . default_value
    (572) annotation_method_header_default_value_opt -> . empty
    (573) default_value -> . DEFAULT member_value
    (623) empty -> .

    DEFAULT         shift and go to state 1074
    ;               reduce using rule 623 (empty -> .)

    default_value                  shift and go to state 1073
    annotation_method_header_default_value_opt shift and go to state 1075
    empty                          shift and go to state 1076

state 990

    (500) method_body -> { block_statements_opt } .

    ;               reduce using rule 500 (method_body -> { block_statements_opt } .)
    @               reduce using rule 500 (method_body -> { block_statements_opt } .)
    PUBLIC          reduce using rule 500 (method_body -> { block_statements_opt } .)
    PROTECTED       reduce using rule 500 (method_body -> { block_statements_opt } .)
    PRIVATE         reduce using rule 500 (method_body -> { block_statements_opt } .)
    STATIC          reduce using rule 500 (method_body -> { block_statements_opt } .)
    ABSTRACT        reduce using rule 500 (method_body -> { block_statements_opt } .)
    FINAL           reduce using rule 500 (method_body -> { block_statements_opt } .)
    NATIVE          reduce using rule 500 (method_body -> { block_statements_opt } .)
    SYNCHRONIZED    reduce using rule 500 (method_body -> { block_statements_opt } .)
    TRANSIENT       reduce using rule 500 (method_body -> { block_statements_opt } .)
    VOLATILE        reduce using rule 500 (method_body -> { block_statements_opt } .)
    STRICTFP        reduce using rule 500 (method_body -> { block_statements_opt } .)
    NAME            reduce using rule 500 (method_body -> { block_statements_opt } .)
    ENUM            reduce using rule 500 (method_body -> { block_statements_opt } .)
    CLASS           reduce using rule 500 (method_body -> { block_statements_opt } .)
    INTERFACE       reduce using rule 500 (method_body -> { block_statements_opt } .)
    <               reduce using rule 500 (method_body -> { block_statements_opt } .)
    BOOLEAN         reduce using rule 500 (method_body -> { block_statements_opt } .)
    VOID            reduce using rule 500 (method_body -> { block_statements_opt } .)
    BYTE            reduce using rule 500 (method_body -> { block_statements_opt } .)
    SHORT           reduce using rule 500 (method_body -> { block_statements_opt } .)
    INT             reduce using rule 500 (method_body -> { block_statements_opt } .)
    LONG            reduce using rule 500 (method_body -> { block_statements_opt } .)
    CHAR            reduce using rule 500 (method_body -> { block_statements_opt } .)
    FLOAT           reduce using rule 500 (method_body -> { block_statements_opt } .)
    DOUBLE          reduce using rule 500 (method_body -> { block_statements_opt } .)
    }               reduce using rule 500 (method_body -> { block_statements_opt } .)
    {               reduce using rule 500 (method_body -> { block_statements_opt } .)


state 991

    (617) static_import_on_demand_declaration -> IMPORT STATIC name . * ; .

    ;               reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    IMPORT          reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    @               reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    PUBLIC          reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    PROTECTED       reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    PRIVATE         reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    STATIC          reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    ABSTRACT        reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    FINAL           reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    NATIVE          reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    SYNCHRONIZED    reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    TRANSIENT       reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    VOLATILE        reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    STRICTFP        reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    ENUM            reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    CLASS           reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    INTERFACE       reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)
    $end            reduce using rule 617 (static_import_on_demand_declaration -> IMPORT STATIC name . * ; .)


state 992

    (505) method_header_name -> modifiers_opt type_parameters type NAME . (

    (               shift and go to state 1077


state 993

    (506) method_header_name -> modifiers_opt type NAME ( .

    PUBLIC          reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    PROTECTED       reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    PRIVATE         reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    STATIC          reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    ABSTRACT        reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    FINAL           reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    NATIVE          reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    SYNCHRONIZED    reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    TRANSIENT       reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    VOLATILE        reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    STRICTFP        reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    @               reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    )               reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    BOOLEAN         reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    VOID            reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    BYTE            reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    SHORT           reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    INT             reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    LONG            reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    CHAR            reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    FLOAT           reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    DOUBLE          reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)
    NAME            reduce using rule 506 (method_header_name -> modifiers_opt type NAME ( .)


state 994

    (504) method_header -> method_header_name formal_parameter_list_opt ) method_header_extended_dims . method_header_throws_clause_opt
    (494) method_header_throws_clause_opt -> . method_header_throws_clause
    (495) method_header_throws_clause_opt -> . empty
    (496) method_header_throws_clause -> . THROWS class_type_list
    (623) empty -> .

    THROWS          shift and go to state 981
    ;               reduce using rule 623 (empty -> .)
    {               reduce using rule 623 (empty -> .)

    method_header_throws_clause    shift and go to state 979
    method_header_throws_clause_opt shift and go to state 1078
    empty                          shift and go to state 982

state 995

    (583) member_values -> member_values , member_value .

    ,               reduce using rule 583 (member_values -> member_values , member_value .)
    }               reduce using rule 583 (member_values -> member_values , member_value .)


state 996

    (578) member_value_array_initializer -> { member_values , } .

    ,               reduce using rule 578 (member_value_array_initializer -> { member_values , } .)
    )               reduce using rule 578 (member_value_array_initializer -> { member_values , } .)
    ;               reduce using rule 578 (member_value_array_initializer -> { member_values , } .)
    }               reduce using rule 578 (member_value_array_initializer -> { member_values , } .)


state 997

    (24) conditional_expression_not_name -> name ? expression : conditional_expression .

    )               reduce using rule 24 (conditional_expression_not_name -> name ? expression : conditional_expression .)
    ,               reduce using rule 24 (conditional_expression_not_name -> name ? expression : conditional_expression .)
    }               reduce using rule 24 (conditional_expression_not_name -> name ? expression : conditional_expression .)
    ;               reduce using rule 24 (conditional_expression_not_name -> name ? expression : conditional_expression .)


state 998

    (23) conditional_expression_not_name -> conditional_or_expression_not_name ? expression : conditional_expression .

    )               reduce using rule 23 (conditional_expression_not_name -> conditional_or_expression_not_name ? expression : conditional_expression .)
    ,               reduce using rule 23 (conditional_expression_not_name -> conditional_or_expression_not_name ? expression : conditional_expression .)
    }               reduce using rule 23 (conditional_expression_not_name -> conditional_or_expression_not_name ? expression : conditional_expression .)
    ;               reduce using rule 23 (conditional_expression_not_name -> conditional_or_expression_not_name ? expression : conditional_expression .)


state 999

    (415) wildcard_bounds -> EXTENDS reference_type .
    (406) reference_type2 -> reference_type . RSHIFT
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 415 (wildcard_bounds -> EXTENDS reference_type .)
    RSHIFT          shift and go to state 895
    >               shift and go to state 547


state 1000

    (423) wildcard_bounds2 -> EXTENDS reference_type2 .

    SUPER           reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    THIS            reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    NAME            reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    .               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    [               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    (               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    IMPLEMENTS      reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    {               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    ,               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    INSTANCEOF      reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    EQ              reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    NEQ             reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    &               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    ^               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    |               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    AND             reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    ?               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    OR              reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    $end            reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    ;               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    :               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    )               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    ]               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    }               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    ELLIPSIS        reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    >               reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    EXTENDS         reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    BOOLEAN         reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    VOID            reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    BYTE            reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    SHORT           reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    INT             reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    LONG            reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    CHAR            reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    FLOAT           reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    DOUBLE          reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    RSHIFT          reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)
    RRSHIFT         reduce using rule 423 (wildcard_bounds2 -> EXTENDS reference_type2 .)


state 1001

    (416) wildcard_bounds -> SUPER reference_type .
    (406) reference_type2 -> reference_type . RSHIFT
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 416 (wildcard_bounds -> SUPER reference_type .)
    RSHIFT          shift and go to state 895
    >               shift and go to state 547


state 1002

    (424) wildcard_bounds2 -> SUPER reference_type2 .

    SUPER           reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    THIS            reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    NAME            reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    .               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    [               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    (               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    IMPLEMENTS      reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    {               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    ,               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    INSTANCEOF      reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    EQ              reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    NEQ             reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    &               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    ^               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    |               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    AND             reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    ?               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    OR              reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    $end            reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    ;               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    :               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    )               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    ]               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    }               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    ELLIPSIS        reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    >               reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    EXTENDS         reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    BOOLEAN         reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    VOID            reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    BYTE            reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    SHORT           reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    INT             reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    LONG            reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    CHAR            reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    FLOAT           reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    DOUBLE          reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    RSHIFT          reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)
    RRSHIFT         reduce using rule 424 (wildcard_bounds2 -> SUPER reference_type2 .)


state 1003

    (396) type_argument -> reference_type .
    (406) reference_type2 -> reference_type . RSHIFT
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 396 (type_argument -> reference_type .)
    RSHIFT          shift and go to state 895
    >               shift and go to state 547


state 1004

    (403) type_argument_list2 -> type_argument_list , type_argument2 .

    .               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    [               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    >               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    ,               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    &               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    RSHIFT          reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    RRSHIFT         reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    SUPER           reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    THIS            reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    NAME            reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    (               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    IMPLEMENTS      reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    {               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    INSTANCEOF      reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    EQ              reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    NEQ             reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    ^               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    |               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    AND             reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    ?               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    OR              reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    $end            reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    ;               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    :               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    )               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    ]               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    }               reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    ELLIPSIS        reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    EXTENDS         reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    BOOLEAN         reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    VOID            reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    BYTE            reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    SHORT           reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    INT             reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    LONG            reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    CHAR            reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    FLOAT           reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)
    DOUBLE          reduce using rule 403 (type_argument_list2 -> type_argument_list , type_argument2 .)


state 1005

    (407) reference_type2 -> class_or_interface < type_argument_list3 .

    .               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    [               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    >               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    ,               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    &               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    RSHIFT          reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    RRSHIFT         reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    SUPER           reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    THIS            reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    NAME            reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    (               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    IMPLEMENTS      reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    {               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    INSTANCEOF      reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    EQ              reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    NEQ             reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    ^               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    |               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    AND             reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    ?               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    OR              reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    $end            reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    ;               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    :               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    )               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    ]               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    }               reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    ELLIPSIS        reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    EXTENDS         reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    BOOLEAN         reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    VOID            reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    BYTE            reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    SHORT           reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    INT             reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    LONG            reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    CHAR            reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    FLOAT           reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)
    DOUBLE          reduce using rule 407 (reference_type2 -> class_or_interface < type_argument_list3 .)


state 1006

    (412) reference_type3 -> reference_type . RRSHIFT
    (396) type_argument -> reference_type .
    (406) reference_type2 -> reference_type . RSHIFT
    (400) reference_type1 -> reference_type . >

    RRSHIFT         shift and go to state 1079
    ,               reduce using rule 396 (type_argument -> reference_type .)
    RSHIFT          shift and go to state 895
    >               shift and go to state 547


state 1007

    (425) wildcard3 -> ? . RRSHIFT
    (426) wildcard3 -> ? . wildcard_bounds3
    (421) wildcard2 -> ? . RSHIFT
    (422) wildcard2 -> ? . wildcard_bounds2
    (417) wildcard1 -> ? . >
    (418) wildcard1 -> ? . wildcard_bounds1
    (413) wildcard -> ? .
    (414) wildcard -> ? . wildcard_bounds
    (427) wildcard_bounds3 -> . EXTENDS reference_type3
    (428) wildcard_bounds3 -> . SUPER reference_type3
    (423) wildcard_bounds2 -> . EXTENDS reference_type2
    (424) wildcard_bounds2 -> . SUPER reference_type2
    (419) wildcard_bounds1 -> . EXTENDS reference_type1
    (420) wildcard_bounds1 -> . SUPER reference_type1
    (415) wildcard_bounds -> . EXTENDS reference_type
    (416) wildcard_bounds -> . SUPER reference_type

    RRSHIFT         shift and go to state 1082
    RSHIFT          shift and go to state 896
    >               shift and go to state 553
    ,               reduce using rule 413 (wildcard -> ? .)
    EXTENDS         shift and go to state 1081
    SUPER           shift and go to state 1083

    wildcard_bounds                shift and go to state 549
    wildcard_bounds2               shift and go to state 897
    wildcard_bounds3               shift and go to state 1080
    wildcard_bounds1               shift and go to state 550

state 1008

    (411) type_argument3 -> wildcard3 .

    SUPER           reduce using rule 411 (type_argument3 -> wildcard3 .)
    THIS            reduce using rule 411 (type_argument3 -> wildcard3 .)
    NAME            reduce using rule 411 (type_argument3 -> wildcard3 .)
    .               reduce using rule 411 (type_argument3 -> wildcard3 .)
    [               reduce using rule 411 (type_argument3 -> wildcard3 .)
    (               reduce using rule 411 (type_argument3 -> wildcard3 .)
    IMPLEMENTS      reduce using rule 411 (type_argument3 -> wildcard3 .)
    {               reduce using rule 411 (type_argument3 -> wildcard3 .)
    ,               reduce using rule 411 (type_argument3 -> wildcard3 .)
    INSTANCEOF      reduce using rule 411 (type_argument3 -> wildcard3 .)
    EQ              reduce using rule 411 (type_argument3 -> wildcard3 .)
    NEQ             reduce using rule 411 (type_argument3 -> wildcard3 .)
    &               reduce using rule 411 (type_argument3 -> wildcard3 .)
    ^               reduce using rule 411 (type_argument3 -> wildcard3 .)
    |               reduce using rule 411 (type_argument3 -> wildcard3 .)
    AND             reduce using rule 411 (type_argument3 -> wildcard3 .)
    ?               reduce using rule 411 (type_argument3 -> wildcard3 .)
    OR              reduce using rule 411 (type_argument3 -> wildcard3 .)
    $end            reduce using rule 411 (type_argument3 -> wildcard3 .)
    ;               reduce using rule 411 (type_argument3 -> wildcard3 .)
    :               reduce using rule 411 (type_argument3 -> wildcard3 .)
    )               reduce using rule 411 (type_argument3 -> wildcard3 .)
    ]               reduce using rule 411 (type_argument3 -> wildcard3 .)
    }               reduce using rule 411 (type_argument3 -> wildcard3 .)
    ELLIPSIS        reduce using rule 411 (type_argument3 -> wildcard3 .)
    >               reduce using rule 411 (type_argument3 -> wildcard3 .)
    EXTENDS         reduce using rule 411 (type_argument3 -> wildcard3 .)
    BOOLEAN         reduce using rule 411 (type_argument3 -> wildcard3 .)
    VOID            reduce using rule 411 (type_argument3 -> wildcard3 .)
    BYTE            reduce using rule 411 (type_argument3 -> wildcard3 .)
    SHORT           reduce using rule 411 (type_argument3 -> wildcard3 .)
    INT             reduce using rule 411 (type_argument3 -> wildcard3 .)
    LONG            reduce using rule 411 (type_argument3 -> wildcard3 .)
    CHAR            reduce using rule 411 (type_argument3 -> wildcard3 .)
    FLOAT           reduce using rule 411 (type_argument3 -> wildcard3 .)
    DOUBLE          reduce using rule 411 (type_argument3 -> wildcard3 .)
    RSHIFT          reduce using rule 411 (type_argument3 -> wildcard3 .)
    RRSHIFT         reduce using rule 411 (type_argument3 -> wildcard3 .)


state 1009

    (409) type_argument_list3 -> type_argument_list . , type_argument3
    (403) type_argument_list2 -> type_argument_list . , type_argument2
    (393) type_argument_list1 -> type_argument_list . , type_argument1
    (395) type_argument_list -> type_argument_list . , type_argument

    ,               shift and go to state 1084


state 1010

    (408) type_argument_list3 -> type_argument3 .

    SUPER           reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    THIS            reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    NAME            reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    .               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    [               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    (               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    IMPLEMENTS      reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    {               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    ,               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    INSTANCEOF      reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    EQ              reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    NEQ             reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    &               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    ^               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    |               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    AND             reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    ?               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    OR              reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    $end            reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    ;               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    :               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    )               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    ]               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    }               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    ELLIPSIS        reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    >               reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    EXTENDS         reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    BOOLEAN         reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    VOID            reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    BYTE            reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    SHORT           reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    INT             reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    LONG            reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    CHAR            reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    FLOAT           reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    DOUBLE          reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    RSHIFT          reduce using rule 408 (type_argument_list3 -> type_argument3 .)
    RRSHIFT         reduce using rule 408 (type_argument_list3 -> type_argument3 .)


state 1011

    (410) type_argument3 -> reference_type3 .

    SUPER           reduce using rule 410 (type_argument3 -> reference_type3 .)
    THIS            reduce using rule 410 (type_argument3 -> reference_type3 .)
    NAME            reduce using rule 410 (type_argument3 -> reference_type3 .)
    .               reduce using rule 410 (type_argument3 -> reference_type3 .)
    [               reduce using rule 410 (type_argument3 -> reference_type3 .)
    (               reduce using rule 410 (type_argument3 -> reference_type3 .)
    IMPLEMENTS      reduce using rule 410 (type_argument3 -> reference_type3 .)
    {               reduce using rule 410 (type_argument3 -> reference_type3 .)
    ,               reduce using rule 410 (type_argument3 -> reference_type3 .)
    INSTANCEOF      reduce using rule 410 (type_argument3 -> reference_type3 .)
    EQ              reduce using rule 410 (type_argument3 -> reference_type3 .)
    NEQ             reduce using rule 410 (type_argument3 -> reference_type3 .)
    &               reduce using rule 410 (type_argument3 -> reference_type3 .)
    ^               reduce using rule 410 (type_argument3 -> reference_type3 .)
    |               reduce using rule 410 (type_argument3 -> reference_type3 .)
    AND             reduce using rule 410 (type_argument3 -> reference_type3 .)
    ?               reduce using rule 410 (type_argument3 -> reference_type3 .)
    OR              reduce using rule 410 (type_argument3 -> reference_type3 .)
    $end            reduce using rule 410 (type_argument3 -> reference_type3 .)
    ;               reduce using rule 410 (type_argument3 -> reference_type3 .)
    :               reduce using rule 410 (type_argument3 -> reference_type3 .)
    )               reduce using rule 410 (type_argument3 -> reference_type3 .)
    ]               reduce using rule 410 (type_argument3 -> reference_type3 .)
    }               reduce using rule 410 (type_argument3 -> reference_type3 .)
    ELLIPSIS        reduce using rule 410 (type_argument3 -> reference_type3 .)
    >               reduce using rule 410 (type_argument3 -> reference_type3 .)
    EXTENDS         reduce using rule 410 (type_argument3 -> reference_type3 .)
    BOOLEAN         reduce using rule 410 (type_argument3 -> reference_type3 .)
    VOID            reduce using rule 410 (type_argument3 -> reference_type3 .)
    BYTE            reduce using rule 410 (type_argument3 -> reference_type3 .)
    SHORT           reduce using rule 410 (type_argument3 -> reference_type3 .)
    INT             reduce using rule 410 (type_argument3 -> reference_type3 .)
    LONG            reduce using rule 410 (type_argument3 -> reference_type3 .)
    CHAR            reduce using rule 410 (type_argument3 -> reference_type3 .)
    FLOAT           reduce using rule 410 (type_argument3 -> reference_type3 .)
    DOUBLE          reduce using rule 410 (type_argument3 -> reference_type3 .)
    RSHIFT          reduce using rule 410 (type_argument3 -> reference_type3 .)
    RRSHIFT         reduce using rule 410 (type_argument3 -> reference_type3 .)


state 1012

    (318) explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt . ) ;

    )               shift and go to state 1085


state 1013

    (316) explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt . ) ;

    )               shift and go to state 1086


state 1014

    (222) method_invocation -> name . type_arguments NAME ( argument_list_opt . )

    )               shift and go to state 1087


state 1015

    (314) explicit_constructor_invocation -> name . THIS ( argument_list_opt ) . ;

    ;               shift and go to state 1088


state 1016

    (312) explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) . ;

    ;               shift and go to state 1089


state 1017

    (225) method_invocation -> name . NAME ( argument_list_opt ) .

    ;               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    [               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    .               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    PLUSPLUS        reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    MINUSMINUS      reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    =               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    TIMES_ASSIGN    reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    DIVIDE_ASSIGN   reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    REMAINDER_ASSIGN reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    PLUS_ASSIGN     reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    MINUS_ASSIGN    reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    LSHIFT_ASSIGN   reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    RSHIFT_ASSIGN   reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    RRSHIFT_ASSIGN  reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    AND_ASSIGN      reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    OR_ASSIGN       reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    XOR_ASSIGN      reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    *               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    /               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    %               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    +               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    -               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    LSHIFT          reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    RSHIFT          reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    RRSHIFT         reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    >               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    <               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    GTEQ            reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    LTEQ            reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    INSTANCEOF      reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    EQ              reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    NEQ             reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    &               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    ^               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    |               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    AND             reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    ?               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    OR              reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    $end            reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    )               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    :               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    ]               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    ,               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)
    }               reduce using rule 225 (method_invocation -> name . NAME ( argument_list_opt ) .)


state 1018

    (310) explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .

    $end            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    IF              reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    WHILE           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    FOR             reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    {               reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    ;               reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    DO              reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    BREAK           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    RETURN          reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    THROW           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    TRY             reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    NAME            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    @               reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    VOID            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    BYTE            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    SHORT           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    INT             reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    LONG            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    CHAR            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    STATIC          reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    FINAL           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    THIS            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    SUPER           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    NEW             reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    <               reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    (               reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    NUM             reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    TRUE            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    FALSE           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    NULL            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    ENUM            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    CLASS           reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    }               reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    CASE            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)
    ELSE            reduce using rule 310 (explicit_constructor_invocation -> type_arguments THIS ( argument_list_opt ) ; .)


state 1019

    (309) explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .

    $end            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    IF              reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    WHILE           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    FOR             reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    {               reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    ;               reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    DO              reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    BREAK           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    RETURN          reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    THROW           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    TRY             reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    NAME            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    @               reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    VOID            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    BYTE            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    SHORT           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    INT             reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    LONG            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    CHAR            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    STATIC          reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    FINAL           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    THIS            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    SUPER           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    NEW             reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    <               reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    (               reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    NUM             reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    TRUE            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    FALSE           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    NULL            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    ENUM            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    CLASS           reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    }               reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    CASE            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)
    ELSE            reduce using rule 309 (explicit_constructor_invocation -> type_arguments SUPER ( argument_list_opt ) ; .)


state 1020

    (222) method_invocation -> name . . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> name . . NAME ( argument_list_opt )
    (325) class_instance_creation_expression_name -> name . .
    (344) qualified_name -> name . . simple_name
    (147) primary_no_new_array -> name . . THIS
    (148) primary_no_new_array -> name . . SUPER
    (149) primary_no_new_array -> name . . CLASS
    (391) type_arguments -> . < type_argument_list1
    (343) simple_name -> . NAME

    NAME            shift and go to state 564
    NEW             reduce using rule 325 (class_instance_creation_expression_name -> name . .)
    THIS            shift and go to state 645
    SUPER           shift and go to state 647
    CLASS           shift and go to state 563
    <               shift and go to state 67

    simple_name                    shift and go to state 560
    type_arguments                 shift and go to state 646

state 1021

    (236) for_statement -> FOR ( for_init_opt ; expression_opt ; . for_update_opt ) statement
    (246) for_update_opt -> . for_update
    (247) for_update_opt -> . empty
    (248) for_update -> . statement_expression_list
    (623) empty -> .
    (242) statement_expression_list -> . statement_expression
    (243) statement_expression_list -> . statement_expression_list , statement_expression
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (325) class_instance_creation_expression_name -> . name .
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    )               reduce using rule 623 (empty -> .)
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NAME            shift and go to state 584
    SUPER           shift and go to state 586
    NEW             shift and go to state 114
    THIS            shift and go to state 158
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    primary                        shift and go to state 579
    post_decrement_expression      shift and go to state 60
    array_access                   shift and go to state 90
    postfix_expression             shift and go to state 59
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    statement_expression           shift and go to state 575
    method_invocation              shift and go to state 120
    simple_name                    shift and go to state 64
    empty                          shift and go to state 1090
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    for_update_opt                 shift and go to state 1091
    assignment                     shift and go to state 145
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    for_update                     shift and go to state 1092
    statement_expression_list      shift and go to state 1093
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 914
    array_creation_without_array_initializer shift and go to state 95
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    pre_decrement_expression       shift and go to state 79

state 1022

    (253) enhanced_for_statement_header_init -> FOR ( modifiers type NAME dims_opt .
    (182) variable_declarator_id -> NAME dims_opt .

    :               reduce using rule 253 (enhanced_for_statement_header_init -> FOR ( modifiers type NAME dims_opt .)
    =               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)
    ,               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)
    ;               reduce using rule 182 (variable_declarator_id -> NAME dims_opt .)


state 1023

    (305) resource -> modifiers type variable_declarator_id = . variable_initializer
    (183) variable_initializer -> . expression
    (184) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (216) array_initializer -> . { comma_opt }
    (217) array_initializer -> . { variable_initializers }
    (218) array_initializer -> . { variable_initializers , }
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    {               shift and go to state 832
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    cast_expression                shift and go to state 177
    primitive_type                 shift and go to state 174
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    simple_name                    shift and go to state 64
    literal                        shift and go to state 146
    variable_initializer           shift and go to state 1094
    post_increment_expression      shift and go to state 159
    array_creation_without_array_initializer shift and go to state 95
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    method_invocation              shift and go to state 176
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    array_initializer              shift and go to state 846
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    conditional_or_expression      shift and go to state 165
    instanceof_expression          shift and go to state 180
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 844
    conditional_and_expression     shift and go to state 161

state 1024

    (304) resource -> type variable_declarator_id = variable_initializer .

    ;               reduce using rule 304 (resource -> type variable_declarator_id = variable_initializer .)
    )               reduce using rule 304 (resource -> type variable_declarator_id = variable_initializer .)


state 1025

    (293) catch_type -> union_type .
    (295) union_type -> union_type . | type

    NAME            reduce using rule 293 (catch_type -> union_type .)
    |               shift and go to state 1095


state 1026

    (292) catch_formal_parameter -> modifiers_opt catch_type . variable_declarator_id
    (182) variable_declarator_id -> . NAME dims_opt

    NAME            shift and go to state 345

    variable_declarator_id         shift and go to state 1096

state 1027

    (294) union_type -> type .

    |               reduce using rule 294 (union_type -> type .)
    NAME            reduce using rule 294 (union_type -> type .)


state 1028

    (291) catch_clause -> CATCH ( catch_formal_parameter ) . block
    (164) block -> . { block_statements_opt }

    {               shift and go to state 106

    block                          shift and go to state 1097

state 1029

    (226) method_invocation -> primary . NAME ( argument_list_opt ) .

    ;               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    [               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    .               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    PLUSPLUS        reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    MINUSMINUS      reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    =               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    TIMES_ASSIGN    reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    DIVIDE_ASSIGN   reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    REMAINDER_ASSIGN reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    PLUS_ASSIGN     reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    MINUS_ASSIGN    reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    LSHIFT_ASSIGN   reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    RSHIFT_ASSIGN   reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    RRSHIFT_ASSIGN  reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    AND_ASSIGN      reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    OR_ASSIGN       reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    XOR_ASSIGN      reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    *               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    /               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    %               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    +               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    -               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    LSHIFT          reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    RSHIFT          reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    RRSHIFT         reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    >               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    <               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    GTEQ            reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    LTEQ            reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    INSTANCEOF      reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    EQ              reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    NEQ             reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    &               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    ^               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    |               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    AND             reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    ?               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    OR              reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    $end            reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    )               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    :               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    ]               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    ,               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)
    }               reduce using rule 226 (method_invocation -> primary . NAME ( argument_list_opt ) .)


state 1030

    (223) method_invocation -> primary . type_arguments NAME ( argument_list_opt . )

    )               shift and go to state 1098


state 1031

    (317) explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt . ) ;

    )               shift and go to state 1099


state 1032

    (315) explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt . ) ;

    )               shift and go to state 1100


state 1033

    (313) explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) . ;

    ;               shift and go to state 1101


state 1034

    (322) class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt . ) class_body_opt

    )               shift and go to state 1102


state 1035

    (321) class_instance_creation_expression -> primary . NEW type_arguments class_type ( . argument_list_opt ) class_body_opt
    (546) argument_list_opt -> . argument_list
    (547) argument_list_opt -> . empty
    (548) argument_list -> . expression
    (549) argument_list -> . argument_list , expression
    (623) empty -> .
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    )               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    argument_list                  shift and go to state 566
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 568
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    assignment_expression          shift and go to state 186
    argument_list_opt              shift and go to state 1103
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 567
    conditional_and_expression     shift and go to state 161

state 1036

    (311) explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) . ;

    ;               shift and go to state 1104


state 1037

    (319) class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) . class_body_opt
    (326) class_body_opt -> . class_body
    (327) class_body_opt -> . empty
    (466) class_body -> . { class_body_declarations_opt }
    (623) empty -> .

    {               shift and go to state 220
    ;               reduce using rule 623 (empty -> .)
    [               reduce using rule 623 (empty -> .)
    .               reduce using rule 623 (empty -> .)
    PLUSPLUS        reduce using rule 623 (empty -> .)
    MINUSMINUS      reduce using rule 623 (empty -> .)
    =               reduce using rule 623 (empty -> .)
    TIMES_ASSIGN    reduce using rule 623 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 623 (empty -> .)
    REMAINDER_ASSIGN reduce using rule 623 (empty -> .)
    PLUS_ASSIGN     reduce using rule 623 (empty -> .)
    MINUS_ASSIGN    reduce using rule 623 (empty -> .)
    LSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RRSHIFT_ASSIGN  reduce using rule 623 (empty -> .)
    AND_ASSIGN      reduce using rule 623 (empty -> .)
    OR_ASSIGN       reduce using rule 623 (empty -> .)
    XOR_ASSIGN      reduce using rule 623 (empty -> .)
    *               reduce using rule 623 (empty -> .)
    /               reduce using rule 623 (empty -> .)
    %               reduce using rule 623 (empty -> .)
    +               reduce using rule 623 (empty -> .)
    -               reduce using rule 623 (empty -> .)
    LSHIFT          reduce using rule 623 (empty -> .)
    RSHIFT          reduce using rule 623 (empty -> .)
    RRSHIFT         reduce using rule 623 (empty -> .)
    >               reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    GTEQ            reduce using rule 623 (empty -> .)
    LTEQ            reduce using rule 623 (empty -> .)
    INSTANCEOF      reduce using rule 623 (empty -> .)
    EQ              reduce using rule 623 (empty -> .)
    NEQ             reduce using rule 623 (empty -> .)
    &               reduce using rule 623 (empty -> .)
    ^               reduce using rule 623 (empty -> .)
    |               reduce using rule 623 (empty -> .)
    AND             reduce using rule 623 (empty -> .)
    ?               reduce using rule 623 (empty -> .)
    OR              reduce using rule 623 (empty -> .)
    $end            reduce using rule 623 (empty -> .)
    )               reduce using rule 623 (empty -> .)
    :               reduce using rule 623 (empty -> .)
    ]               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    }               reduce using rule 623 (empty -> .)

    class_body                     shift and go to state 1041
    class_body_opt                 shift and go to state 1105
    empty                          shift and go to state 1043

state 1038

    (217) array_initializer -> { variable_initializers } .

    }               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    ,               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    ;               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    [               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    .               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    PLUSPLUS        reduce using rule 217 (array_initializer -> { variable_initializers } .)
    MINUSMINUS      reduce using rule 217 (array_initializer -> { variable_initializers } .)
    =               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    TIMES_ASSIGN    reduce using rule 217 (array_initializer -> { variable_initializers } .)
    DIVIDE_ASSIGN   reduce using rule 217 (array_initializer -> { variable_initializers } .)
    REMAINDER_ASSIGN reduce using rule 217 (array_initializer -> { variable_initializers } .)
    PLUS_ASSIGN     reduce using rule 217 (array_initializer -> { variable_initializers } .)
    MINUS_ASSIGN    reduce using rule 217 (array_initializer -> { variable_initializers } .)
    LSHIFT_ASSIGN   reduce using rule 217 (array_initializer -> { variable_initializers } .)
    RSHIFT_ASSIGN   reduce using rule 217 (array_initializer -> { variable_initializers } .)
    RRSHIFT_ASSIGN  reduce using rule 217 (array_initializer -> { variable_initializers } .)
    AND_ASSIGN      reduce using rule 217 (array_initializer -> { variable_initializers } .)
    OR_ASSIGN       reduce using rule 217 (array_initializer -> { variable_initializers } .)
    XOR_ASSIGN      reduce using rule 217 (array_initializer -> { variable_initializers } .)
    *               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    /               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    %               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    +               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    -               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    LSHIFT          reduce using rule 217 (array_initializer -> { variable_initializers } .)
    RSHIFT          reduce using rule 217 (array_initializer -> { variable_initializers } .)
    RRSHIFT         reduce using rule 217 (array_initializer -> { variable_initializers } .)
    >               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    <               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    GTEQ            reduce using rule 217 (array_initializer -> { variable_initializers } .)
    LTEQ            reduce using rule 217 (array_initializer -> { variable_initializers } .)
    INSTANCEOF      reduce using rule 217 (array_initializer -> { variable_initializers } .)
    EQ              reduce using rule 217 (array_initializer -> { variable_initializers } .)
    NEQ             reduce using rule 217 (array_initializer -> { variable_initializers } .)
    &               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    ^               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    |               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    AND             reduce using rule 217 (array_initializer -> { variable_initializers } .)
    ?               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    OR              reduce using rule 217 (array_initializer -> { variable_initializers } .)
    $end            reduce using rule 217 (array_initializer -> { variable_initializers } .)
    )               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    :               reduce using rule 217 (array_initializer -> { variable_initializers } .)
    ]               reduce using rule 217 (array_initializer -> { variable_initializers } .)


state 1039

    (218) array_initializer -> { variable_initializers , . }
    (220) variable_initializers -> variable_initializers , . variable_initializer
    (183) variable_initializer -> . expression
    (184) variable_initializer -> . array_initializer
    (1) expression -> . assignment_expression
    (216) array_initializer -> . { comma_opt }
    (217) array_initializer -> . { variable_initializers }
    (218) array_initializer -> . { variable_initializers , }
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    }               shift and go to state 1107
    {               shift and go to state 832
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    variable_initializer           shift and go to state 1106
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    relational_expression          shift and go to state 175
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    array_initializer              shift and go to state 846
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 844
    conditional_and_expression     shift and go to state 161

state 1040

    (216) array_initializer -> { comma_opt } .

    }               reduce using rule 216 (array_initializer -> { comma_opt } .)
    ,               reduce using rule 216 (array_initializer -> { comma_opt } .)
    ;               reduce using rule 216 (array_initializer -> { comma_opt } .)
    [               reduce using rule 216 (array_initializer -> { comma_opt } .)
    .               reduce using rule 216 (array_initializer -> { comma_opt } .)
    PLUSPLUS        reduce using rule 216 (array_initializer -> { comma_opt } .)
    MINUSMINUS      reduce using rule 216 (array_initializer -> { comma_opt } .)
    =               reduce using rule 216 (array_initializer -> { comma_opt } .)
    TIMES_ASSIGN    reduce using rule 216 (array_initializer -> { comma_opt } .)
    DIVIDE_ASSIGN   reduce using rule 216 (array_initializer -> { comma_opt } .)
    REMAINDER_ASSIGN reduce using rule 216 (array_initializer -> { comma_opt } .)
    PLUS_ASSIGN     reduce using rule 216 (array_initializer -> { comma_opt } .)
    MINUS_ASSIGN    reduce using rule 216 (array_initializer -> { comma_opt } .)
    LSHIFT_ASSIGN   reduce using rule 216 (array_initializer -> { comma_opt } .)
    RSHIFT_ASSIGN   reduce using rule 216 (array_initializer -> { comma_opt } .)
    RRSHIFT_ASSIGN  reduce using rule 216 (array_initializer -> { comma_opt } .)
    AND_ASSIGN      reduce using rule 216 (array_initializer -> { comma_opt } .)
    OR_ASSIGN       reduce using rule 216 (array_initializer -> { comma_opt } .)
    XOR_ASSIGN      reduce using rule 216 (array_initializer -> { comma_opt } .)
    *               reduce using rule 216 (array_initializer -> { comma_opt } .)
    /               reduce using rule 216 (array_initializer -> { comma_opt } .)
    %               reduce using rule 216 (array_initializer -> { comma_opt } .)
    +               reduce using rule 216 (array_initializer -> { comma_opt } .)
    -               reduce using rule 216 (array_initializer -> { comma_opt } .)
    LSHIFT          reduce using rule 216 (array_initializer -> { comma_opt } .)
    RSHIFT          reduce using rule 216 (array_initializer -> { comma_opt } .)
    RRSHIFT         reduce using rule 216 (array_initializer -> { comma_opt } .)
    >               reduce using rule 216 (array_initializer -> { comma_opt } .)
    <               reduce using rule 216 (array_initializer -> { comma_opt } .)
    GTEQ            reduce using rule 216 (array_initializer -> { comma_opt } .)
    LTEQ            reduce using rule 216 (array_initializer -> { comma_opt } .)
    INSTANCEOF      reduce using rule 216 (array_initializer -> { comma_opt } .)
    EQ              reduce using rule 216 (array_initializer -> { comma_opt } .)
    NEQ             reduce using rule 216 (array_initializer -> { comma_opt } .)
    &               reduce using rule 216 (array_initializer -> { comma_opt } .)
    ^               reduce using rule 216 (array_initializer -> { comma_opt } .)
    |               reduce using rule 216 (array_initializer -> { comma_opt } .)
    AND             reduce using rule 216 (array_initializer -> { comma_opt } .)
    ?               reduce using rule 216 (array_initializer -> { comma_opt } .)
    OR              reduce using rule 216 (array_initializer -> { comma_opt } .)
    $end            reduce using rule 216 (array_initializer -> { comma_opt } .)
    )               reduce using rule 216 (array_initializer -> { comma_opt } .)
    :               reduce using rule 216 (array_initializer -> { comma_opt } .)
    ]               reduce using rule 216 (array_initializer -> { comma_opt } .)


state 1041

    (326) class_body_opt -> class_body .

    ;               reduce using rule 326 (class_body_opt -> class_body .)
    [               reduce using rule 326 (class_body_opt -> class_body .)
    .               reduce using rule 326 (class_body_opt -> class_body .)
    PLUSPLUS        reduce using rule 326 (class_body_opt -> class_body .)
    MINUSMINUS      reduce using rule 326 (class_body_opt -> class_body .)
    =               reduce using rule 326 (class_body_opt -> class_body .)
    TIMES_ASSIGN    reduce using rule 326 (class_body_opt -> class_body .)
    DIVIDE_ASSIGN   reduce using rule 326 (class_body_opt -> class_body .)
    REMAINDER_ASSIGN reduce using rule 326 (class_body_opt -> class_body .)
    PLUS_ASSIGN     reduce using rule 326 (class_body_opt -> class_body .)
    MINUS_ASSIGN    reduce using rule 326 (class_body_opt -> class_body .)
    LSHIFT_ASSIGN   reduce using rule 326 (class_body_opt -> class_body .)
    RSHIFT_ASSIGN   reduce using rule 326 (class_body_opt -> class_body .)
    RRSHIFT_ASSIGN  reduce using rule 326 (class_body_opt -> class_body .)
    AND_ASSIGN      reduce using rule 326 (class_body_opt -> class_body .)
    OR_ASSIGN       reduce using rule 326 (class_body_opt -> class_body .)
    XOR_ASSIGN      reduce using rule 326 (class_body_opt -> class_body .)
    *               reduce using rule 326 (class_body_opt -> class_body .)
    /               reduce using rule 326 (class_body_opt -> class_body .)
    %               reduce using rule 326 (class_body_opt -> class_body .)
    +               reduce using rule 326 (class_body_opt -> class_body .)
    -               reduce using rule 326 (class_body_opt -> class_body .)
    LSHIFT          reduce using rule 326 (class_body_opt -> class_body .)
    RSHIFT          reduce using rule 326 (class_body_opt -> class_body .)
    RRSHIFT         reduce using rule 326 (class_body_opt -> class_body .)
    >               reduce using rule 326 (class_body_opt -> class_body .)
    <               reduce using rule 326 (class_body_opt -> class_body .)
    GTEQ            reduce using rule 326 (class_body_opt -> class_body .)
    LTEQ            reduce using rule 326 (class_body_opt -> class_body .)
    INSTANCEOF      reduce using rule 326 (class_body_opt -> class_body .)
    EQ              reduce using rule 326 (class_body_opt -> class_body .)
    NEQ             reduce using rule 326 (class_body_opt -> class_body .)
    &               reduce using rule 326 (class_body_opt -> class_body .)
    ^               reduce using rule 326 (class_body_opt -> class_body .)
    |               reduce using rule 326 (class_body_opt -> class_body .)
    AND             reduce using rule 326 (class_body_opt -> class_body .)
    ?               reduce using rule 326 (class_body_opt -> class_body .)
    OR              reduce using rule 326 (class_body_opt -> class_body .)
    $end            reduce using rule 326 (class_body_opt -> class_body .)
    )               reduce using rule 326 (class_body_opt -> class_body .)
    :               reduce using rule 326 (class_body_opt -> class_body .)
    ]               reduce using rule 326 (class_body_opt -> class_body .)
    ,               reduce using rule 326 (class_body_opt -> class_body .)
    }               reduce using rule 326 (class_body_opt -> class_body .)


state 1042

    (320) class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .

    [               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    .               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    PLUSPLUS        reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    MINUSMINUS      reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    =               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    TIMES_ASSIGN    reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    DIVIDE_ASSIGN   reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    REMAINDER_ASSIGN reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    PLUS_ASSIGN     reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    MINUS_ASSIGN    reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT_ASSIGN   reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT_ASSIGN   reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT_ASSIGN  reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    AND_ASSIGN      reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    OR_ASSIGN       reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    XOR_ASSIGN      reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    *               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    /               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    %               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    +               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    -               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT          reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT          reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT         reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    >               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    <               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    GTEQ            reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    LTEQ            reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    INSTANCEOF      reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    EQ              reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    NEQ             reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    &               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    ^               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    |               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    AND             reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    ?               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    OR              reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    :               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    ,               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    )               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    $end            reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    ;               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    ]               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)
    }               reduce using rule 320 (class_instance_creation_expression -> NEW class_type ( argument_list_opt ) class_body_opt .)


state 1043

    (327) class_body_opt -> empty .

    ;               reduce using rule 327 (class_body_opt -> empty .)
    [               reduce using rule 327 (class_body_opt -> empty .)
    .               reduce using rule 327 (class_body_opt -> empty .)
    PLUSPLUS        reduce using rule 327 (class_body_opt -> empty .)
    MINUSMINUS      reduce using rule 327 (class_body_opt -> empty .)
    =               reduce using rule 327 (class_body_opt -> empty .)
    TIMES_ASSIGN    reduce using rule 327 (class_body_opt -> empty .)
    DIVIDE_ASSIGN   reduce using rule 327 (class_body_opt -> empty .)
    REMAINDER_ASSIGN reduce using rule 327 (class_body_opt -> empty .)
    PLUS_ASSIGN     reduce using rule 327 (class_body_opt -> empty .)
    MINUS_ASSIGN    reduce using rule 327 (class_body_opt -> empty .)
    LSHIFT_ASSIGN   reduce using rule 327 (class_body_opt -> empty .)
    RSHIFT_ASSIGN   reduce using rule 327 (class_body_opt -> empty .)
    RRSHIFT_ASSIGN  reduce using rule 327 (class_body_opt -> empty .)
    AND_ASSIGN      reduce using rule 327 (class_body_opt -> empty .)
    OR_ASSIGN       reduce using rule 327 (class_body_opt -> empty .)
    XOR_ASSIGN      reduce using rule 327 (class_body_opt -> empty .)
    *               reduce using rule 327 (class_body_opt -> empty .)
    /               reduce using rule 327 (class_body_opt -> empty .)
    %               reduce using rule 327 (class_body_opt -> empty .)
    +               reduce using rule 327 (class_body_opt -> empty .)
    -               reduce using rule 327 (class_body_opt -> empty .)
    LSHIFT          reduce using rule 327 (class_body_opt -> empty .)
    RSHIFT          reduce using rule 327 (class_body_opt -> empty .)
    RRSHIFT         reduce using rule 327 (class_body_opt -> empty .)
    >               reduce using rule 327 (class_body_opt -> empty .)
    <               reduce using rule 327 (class_body_opt -> empty .)
    GTEQ            reduce using rule 327 (class_body_opt -> empty .)
    LTEQ            reduce using rule 327 (class_body_opt -> empty .)
    INSTANCEOF      reduce using rule 327 (class_body_opt -> empty .)
    EQ              reduce using rule 327 (class_body_opt -> empty .)
    NEQ             reduce using rule 327 (class_body_opt -> empty .)
    &               reduce using rule 327 (class_body_opt -> empty .)
    ^               reduce using rule 327 (class_body_opt -> empty .)
    |               reduce using rule 327 (class_body_opt -> empty .)
    AND             reduce using rule 327 (class_body_opt -> empty .)
    ?               reduce using rule 327 (class_body_opt -> empty .)
    OR              reduce using rule 327 (class_body_opt -> empty .)
    $end            reduce using rule 327 (class_body_opt -> empty .)
    )               reduce using rule 327 (class_body_opt -> empty .)
    :               reduce using rule 327 (class_body_opt -> empty .)
    ]               reduce using rule 327 (class_body_opt -> empty .)
    ,               reduce using rule 327 (class_body_opt -> empty .)
    }               reduce using rule 327 (class_body_opt -> empty .)


state 1044

    (273) switch_label -> CASE . constant_expression :
    (275) constant_expression -> . expression
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    constant_expression            shift and go to state 1109
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    cast_expression                shift and go to state 177
    class_instance_creation_expression shift and go to state 156
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 1108
    conditional_and_expression     shift and go to state 161

state 1045

    (274) switch_label -> DEFAULT . :

    :               shift and go to state 1110


state 1046

    (264) switch_block -> { } .

    $end            reduce using rule 264 (switch_block -> { } .)
    IF              reduce using rule 264 (switch_block -> { } .)
    WHILE           reduce using rule 264 (switch_block -> { } .)
    FOR             reduce using rule 264 (switch_block -> { } .)
    {               reduce using rule 264 (switch_block -> { } .)
    ASSERT          reduce using rule 264 (switch_block -> { } .)
    ;               reduce using rule 264 (switch_block -> { } .)
    SWITCH          reduce using rule 264 (switch_block -> { } .)
    DO              reduce using rule 264 (switch_block -> { } .)
    BREAK           reduce using rule 264 (switch_block -> { } .)
    CONTINUE        reduce using rule 264 (switch_block -> { } .)
    RETURN          reduce using rule 264 (switch_block -> { } .)
    SYNCHRONIZED    reduce using rule 264 (switch_block -> { } .)
    THROW           reduce using rule 264 (switch_block -> { } .)
    TRY             reduce using rule 264 (switch_block -> { } .)
    NAME            reduce using rule 264 (switch_block -> { } .)
    @               reduce using rule 264 (switch_block -> { } .)
    BOOLEAN         reduce using rule 264 (switch_block -> { } .)
    VOID            reduce using rule 264 (switch_block -> { } .)
    BYTE            reduce using rule 264 (switch_block -> { } .)
    SHORT           reduce using rule 264 (switch_block -> { } .)
    INT             reduce using rule 264 (switch_block -> { } .)
    LONG            reduce using rule 264 (switch_block -> { } .)
    CHAR            reduce using rule 264 (switch_block -> { } .)
    FLOAT           reduce using rule 264 (switch_block -> { } .)
    DOUBLE          reduce using rule 264 (switch_block -> { } .)
    PUBLIC          reduce using rule 264 (switch_block -> { } .)
    PROTECTED       reduce using rule 264 (switch_block -> { } .)
    PRIVATE         reduce using rule 264 (switch_block -> { } .)
    STATIC          reduce using rule 264 (switch_block -> { } .)
    ABSTRACT        reduce using rule 264 (switch_block -> { } .)
    FINAL           reduce using rule 264 (switch_block -> { } .)
    NATIVE          reduce using rule 264 (switch_block -> { } .)
    TRANSIENT       reduce using rule 264 (switch_block -> { } .)
    VOLATILE        reduce using rule 264 (switch_block -> { } .)
    STRICTFP        reduce using rule 264 (switch_block -> { } .)
    THIS            reduce using rule 264 (switch_block -> { } .)
    SUPER           reduce using rule 264 (switch_block -> { } .)
    PLUSPLUS        reduce using rule 264 (switch_block -> { } .)
    MINUSMINUS      reduce using rule 264 (switch_block -> { } .)
    NEW             reduce using rule 264 (switch_block -> { } .)
    <               reduce using rule 264 (switch_block -> { } .)
    (               reduce using rule 264 (switch_block -> { } .)
    NUM             reduce using rule 264 (switch_block -> { } .)
    CHAR_LITERAL    reduce using rule 264 (switch_block -> { } .)
    STRING_LITERAL  reduce using rule 264 (switch_block -> { } .)
    TRUE            reduce using rule 264 (switch_block -> { } .)
    FALSE           reduce using rule 264 (switch_block -> { } .)
    NULL            reduce using rule 264 (switch_block -> { } .)
    ENUM            reduce using rule 264 (switch_block -> { } .)
    CLASS           reduce using rule 264 (switch_block -> { } .)
    INTERFACE       reduce using rule 264 (switch_block -> { } .)
    }               reduce using rule 264 (switch_block -> { } .)
    CASE            reduce using rule 264 (switch_block -> { } .)
    DEFAULT         reduce using rule 264 (switch_block -> { } .)
    ELSE            reduce using rule 264 (switch_block -> { } .)


state 1047

    (266) switch_block -> { switch_labels . }
    (272) switch_labels -> switch_labels . switch_label
    (270) switch_block_statement -> switch_labels . block_statements
    (273) switch_label -> . CASE constant_expression :
    (274) switch_label -> . DEFAULT :
    (167) block_statements -> . block_statement
    (168) block_statements -> . block_statements block_statement
    (169) block_statement -> . local_variable_declaration_statement
    (170) block_statement -> . statement
    (171) block_statement -> . class_declaration
    (172) block_statement -> . interface_declaration
    (173) block_statement -> . annotation_type_declaration
    (174) block_statement -> . enum_declaration
    (175) local_variable_declaration_statement -> . local_variable_declaration ;
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (529) enum_declaration -> . enum_header enum_body
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (623) empty -> .
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    }               shift and go to state 1113
    CASE            shift and go to state 1044
    DEFAULT         shift and go to state 1045
    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 84
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    @               shift and go to state 30
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    expression_statement           shift and go to state 54
    enum_header                    shift and go to state 7
    explicit_constructor_invocation shift and go to state 55
    throw_statement                shift and go to state 57
    generic_type                   shift and go to state 58
    post_decrement_expression      shift and go to state 60
    assert_statement               shift and go to state 61
    statement_expression           shift and go to state 66
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    local_variable_declaration_statement shift and go to state 70
    try_statement                  shift and go to state 71
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 73
    labeled_statement              shift and go to state 77
    post_increment_expression      shift and go to state 78
    enum_header_name               shift and go to state 43
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    interface_declaration          shift and go to state 83
    type_arguments                 shift and go to state 85
    break_statement                shift and go to state 86
    class_or_interface_type        shift and go to state 88
    switch_statement               shift and go to state 89
    array_access                   shift and go to state 90
    single_member_annotation       shift and go to state 18
    reference_type                 shift and go to state 91
    label                          shift and go to state 92
    continue_statement             shift and go to state 93
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    statement_without_trailing_substatement shift and go to state 99
    array_creation_with_array_initializer shift and go to state 101
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation_name                shift and go to state 38
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_header_init shift and go to state 105
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108
    modifiers_opt                  shift and go to state 26
    primary                        shift and go to state 109
    marker_annotation              shift and go to state 22
    block_statement                shift and go to state 325
    if_then_statement              shift and go to state 113
    array_creation_without_array_initializer shift and go to state 95
    while_statement                shift and go to state 65
    synchronized_statement         shift and go to state 115
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    statement                      shift and go to state 119
    method_invocation              shift and go to state 120
    annotation_type_declaration_header_name shift and go to state 31
    class_instance_creation_expression_name shift and go to state 122
    switch_label                   shift and go to state 1111
    class_header                   shift and go to state 36
    modifiers                      shift and go to state 125
    type                           shift and go to state 128
    enum_declaration               shift and go to state 129
    empty_statement                shift and go to state 130
    empty                          shift and go to state 121
    local_variable_declaration     shift and go to state 134
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 135
    enhanced_for_statement         shift and go to state 138
    class_header_name1             shift and go to state 8
    interface_header_name          shift and go to state 14
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    qualified_name                 shift and go to state 141
    class_header_name              shift and go to state 5
    postfix_expression             shift and go to state 59
    return_statement               shift and go to state 142
    do_statement                   shift and go to state 143
    block_statements               shift and go to state 1112
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    annotation                     shift and go to state 10
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 151

state 1048

    (271) switch_labels -> switch_label .

    }               reduce using rule 271 (switch_labels -> switch_label .)
    CASE            reduce using rule 271 (switch_labels -> switch_label .)
    DEFAULT         reduce using rule 271 (switch_labels -> switch_label .)
    IF              reduce using rule 271 (switch_labels -> switch_label .)
    WHILE           reduce using rule 271 (switch_labels -> switch_label .)
    FOR             reduce using rule 271 (switch_labels -> switch_label .)
    {               reduce using rule 271 (switch_labels -> switch_label .)
    ASSERT          reduce using rule 271 (switch_labels -> switch_label .)
    ;               reduce using rule 271 (switch_labels -> switch_label .)
    SWITCH          reduce using rule 271 (switch_labels -> switch_label .)
    DO              reduce using rule 271 (switch_labels -> switch_label .)
    BREAK           reduce using rule 271 (switch_labels -> switch_label .)
    CONTINUE        reduce using rule 271 (switch_labels -> switch_label .)
    RETURN          reduce using rule 271 (switch_labels -> switch_label .)
    SYNCHRONIZED    reduce using rule 271 (switch_labels -> switch_label .)
    THROW           reduce using rule 271 (switch_labels -> switch_label .)
    TRY             reduce using rule 271 (switch_labels -> switch_label .)
    NAME            reduce using rule 271 (switch_labels -> switch_label .)
    @               reduce using rule 271 (switch_labels -> switch_label .)
    BOOLEAN         reduce using rule 271 (switch_labels -> switch_label .)
    VOID            reduce using rule 271 (switch_labels -> switch_label .)
    BYTE            reduce using rule 271 (switch_labels -> switch_label .)
    SHORT           reduce using rule 271 (switch_labels -> switch_label .)
    INT             reduce using rule 271 (switch_labels -> switch_label .)
    LONG            reduce using rule 271 (switch_labels -> switch_label .)
    CHAR            reduce using rule 271 (switch_labels -> switch_label .)
    FLOAT           reduce using rule 271 (switch_labels -> switch_label .)
    DOUBLE          reduce using rule 271 (switch_labels -> switch_label .)
    PUBLIC          reduce using rule 271 (switch_labels -> switch_label .)
    PROTECTED       reduce using rule 271 (switch_labels -> switch_label .)
    PRIVATE         reduce using rule 271 (switch_labels -> switch_label .)
    STATIC          reduce using rule 271 (switch_labels -> switch_label .)
    ABSTRACT        reduce using rule 271 (switch_labels -> switch_label .)
    FINAL           reduce using rule 271 (switch_labels -> switch_label .)
    NATIVE          reduce using rule 271 (switch_labels -> switch_label .)
    TRANSIENT       reduce using rule 271 (switch_labels -> switch_label .)
    VOLATILE        reduce using rule 271 (switch_labels -> switch_label .)
    STRICTFP        reduce using rule 271 (switch_labels -> switch_label .)
    THIS            reduce using rule 271 (switch_labels -> switch_label .)
    SUPER           reduce using rule 271 (switch_labels -> switch_label .)
    PLUSPLUS        reduce using rule 271 (switch_labels -> switch_label .)
    MINUSMINUS      reduce using rule 271 (switch_labels -> switch_label .)
    NEW             reduce using rule 271 (switch_labels -> switch_label .)
    <               reduce using rule 271 (switch_labels -> switch_label .)
    (               reduce using rule 271 (switch_labels -> switch_label .)
    NUM             reduce using rule 271 (switch_labels -> switch_label .)
    CHAR_LITERAL    reduce using rule 271 (switch_labels -> switch_label .)
    STRING_LITERAL  reduce using rule 271 (switch_labels -> switch_label .)
    TRUE            reduce using rule 271 (switch_labels -> switch_label .)
    FALSE           reduce using rule 271 (switch_labels -> switch_label .)
    NULL            reduce using rule 271 (switch_labels -> switch_label .)
    ENUM            reduce using rule 271 (switch_labels -> switch_label .)
    CLASS           reduce using rule 271 (switch_labels -> switch_label .)
    INTERFACE       reduce using rule 271 (switch_labels -> switch_label .)


state 1049

    (265) switch_block -> { switch_block_statements . }
    (267) switch_block -> { switch_block_statements . switch_labels }
    (269) switch_block_statements -> switch_block_statements . switch_block_statement
    (271) switch_labels -> . switch_label
    (272) switch_labels -> . switch_labels switch_label
    (270) switch_block_statement -> . switch_labels block_statements
    (273) switch_label -> . CASE constant_expression :
    (274) switch_label -> . DEFAULT :

    }               shift and go to state 1115
    CASE            shift and go to state 1044
    DEFAULT         shift and go to state 1045

    switch_labels                  shift and go to state 1114
    switch_block_statement         shift and go to state 1116
    switch_label                   shift and go to state 1048

state 1050

    (268) switch_block_statements -> switch_block_statement .

    }               reduce using rule 268 (switch_block_statements -> switch_block_statement .)
    CASE            reduce using rule 268 (switch_block_statements -> switch_block_statement .)
    DEFAULT         reduce using rule 268 (switch_block_statements -> switch_block_statement .)


state 1051

    (323) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) . class_body_opt
    (326) class_body_opt -> . class_body
    (327) class_body_opt -> . empty
    (466) class_body -> . { class_body_declarations_opt }
    (623) empty -> .

    {               shift and go to state 220
    ;               reduce using rule 623 (empty -> .)
    [               reduce using rule 623 (empty -> .)
    .               reduce using rule 623 (empty -> .)
    PLUSPLUS        reduce using rule 623 (empty -> .)
    MINUSMINUS      reduce using rule 623 (empty -> .)
    =               reduce using rule 623 (empty -> .)
    TIMES_ASSIGN    reduce using rule 623 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 623 (empty -> .)
    REMAINDER_ASSIGN reduce using rule 623 (empty -> .)
    PLUS_ASSIGN     reduce using rule 623 (empty -> .)
    MINUS_ASSIGN    reduce using rule 623 (empty -> .)
    LSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RRSHIFT_ASSIGN  reduce using rule 623 (empty -> .)
    AND_ASSIGN      reduce using rule 623 (empty -> .)
    OR_ASSIGN       reduce using rule 623 (empty -> .)
    XOR_ASSIGN      reduce using rule 623 (empty -> .)
    *               reduce using rule 623 (empty -> .)
    /               reduce using rule 623 (empty -> .)
    %               reduce using rule 623 (empty -> .)
    +               reduce using rule 623 (empty -> .)
    -               reduce using rule 623 (empty -> .)
    LSHIFT          reduce using rule 623 (empty -> .)
    RSHIFT          reduce using rule 623 (empty -> .)
    RRSHIFT         reduce using rule 623 (empty -> .)
    >               reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    GTEQ            reduce using rule 623 (empty -> .)
    LTEQ            reduce using rule 623 (empty -> .)
    INSTANCEOF      reduce using rule 623 (empty -> .)
    EQ              reduce using rule 623 (empty -> .)
    NEQ             reduce using rule 623 (empty -> .)
    &               reduce using rule 623 (empty -> .)
    ^               reduce using rule 623 (empty -> .)
    |               reduce using rule 623 (empty -> .)
    AND             reduce using rule 623 (empty -> .)
    ?               reduce using rule 623 (empty -> .)
    OR              reduce using rule 623 (empty -> .)
    $end            reduce using rule 623 (empty -> .)
    )               reduce using rule 623 (empty -> .)
    :               reduce using rule 623 (empty -> .)
    ]               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    }               reduce using rule 623 (empty -> .)

    class_body                     shift and go to state 1041
    class_body_opt                 shift and go to state 1117
    empty                          shift and go to state 1043

state 1052

    (324) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt . ) class_body_opt

    )               shift and go to state 1118


state 1053

    (276) do_statement -> DO statement WHILE ( expression ) . ;

    ;               shift and go to state 1119


state 1054

    (250) enhanced_for_statement_no_short_if -> enhanced_for_statement_header statement_no_short_if .

    ELSE            reduce using rule 250 (enhanced_for_statement_no_short_if -> enhanced_for_statement_header statement_no_short_if .)


state 1055

    (228) labeled_statement -> label : . statement
    (229) labeled_statement_no_short_if -> label : . statement_no_short_if
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (254) statement_no_short_if -> . statement_without_trailing_substatement
    (255) statement_no_short_if -> . labeled_statement_no_short_if
    (256) statement_no_short_if -> . if_then_else_statement_no_short_if
    (257) statement_no_short_if -> . while_statement_no_short_if
    (258) statement_no_short_if -> . for_statement_no_short_if
    (259) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (229) labeled_statement_no_short_if -> . label : statement_no_short_if
    (233) if_then_else_statement_no_short_if -> . IF ( expression ) statement_no_short_if ELSE statement_no_short_if
    (235) while_statement_no_short_if -> . WHILE ( expression ) statement_no_short_if
    (237) for_statement_no_short_if -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (250) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 961
    WHILE           shift and go to state 955
    FOR             shift and go to state 952
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    array_access                   shift and go to state 90
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    labeled_statement_no_short_if  shift and go to state 956
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_no_short_if shift and go to state 954
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 951
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 574
    literal                        shift and go to state 146
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    while_statement_no_short_if    shift and go to state 958
    enhanced_for_statement_header  shift and go to state 949
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    for_statement_no_short_if      shift and go to state 959
    statement_without_trailing_substatement shift and go to state 953
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    statement_no_short_if          shift and go to state 1120
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    array_creation_with_array_initializer shift and go to state 101
    labeled_statement              shift and go to state 77
    if_then_else_statement_no_short_if shift and go to state 950
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 1056

    (236) for_statement -> FOR ( . for_init_opt ; expression_opt ; for_update_opt ) statement
    (237) for_statement_no_short_if -> FOR ( . for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (252) enhanced_for_statement_header_init -> FOR ( . type NAME dims_opt
    (253) enhanced_for_statement_header_init -> FOR ( . modifiers type NAME dims_opt
    (238) for_init_opt -> . for_init
    (239) for_init_opt -> . empty
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (240) for_init -> . statement_expression_list
    (241) for_init -> . local_variable_declaration
    (623) empty -> .
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (242) statement_expression_list -> . statement_expression
    (243) statement_expression_list -> . statement_expression_list , statement_expression
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    ;               reduce using rule 623 (empty -> .)
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    SYNCHRONIZED    shift and go to state 21
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NAME            shift and go to state 584
    SUPER           shift and go to state 586
    NEW             shift and go to state 114
    @               shift and go to state 402
    THIS            shift and go to state 158
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    for_init_opt                   shift and go to state 1121
    primary                        shift and go to state 579
    for_init                       shift and go to state 580
    primary_no_new_array           shift and go to state 87
    marker_annotation              shift and go to state 22
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    post_decrement_expression      shift and go to state 60
    reference_type                 shift and go to state 91
    postfix_expression             shift and go to state 59
    class_instance_creation_expression shift and go to state 72
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    array_creation_with_array_initializer shift and go to state 101
    statement_expression           shift and go to state 575
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    type                           shift and go to state 581
    empty                          shift and go to state 582
    field_access                   shift and go to state 96
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    single_member_annotation       shift and go to state 18
    class_instance_creation_expression_name shift and go to state 122
    generic_type                   shift and go to state 58
    statement_expression_list      shift and go to state 577
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation                     shift and go to state 10
    annotation_name                shift and go to state 38
    modifiers                      shift and go to state 583
    name                           shift and go to state 576
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    local_variable_declaration     shift and go to state 585
    pre_decrement_expression       shift and go to state 79
    modifier                       shift and go to state 51

state 1057

    (234) while_statement -> WHILE ( . expression ) statement
    (235) while_statement_no_short_if -> WHILE ( . expression ) statement_no_short_if
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    cast_expression                shift and go to state 177
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 1122
    conditional_and_expression     shift and go to state 161

state 1058

    (232) if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE . statement
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    array_access                   shift and go to state 90
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 92
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 1123
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    literal                        shift and go to state 146
    statement_without_trailing_substatement shift and go to state 99
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    labeled_statement              shift and go to state 77
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 1059

    (231) if_then_statement -> IF ( . expression ) statement
    (232) if_then_else_statement -> IF ( . expression ) statement_no_short_if ELSE statement
    (233) if_then_else_statement_no_short_if -> IF ( . expression ) statement_no_short_if ELSE statement_no_short_if
    (1) expression -> . assignment_expression
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    cast_expression                shift and go to state 177
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    pre_increment_expression       shift and go to state 168
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    shift_expression               shift and go to state 167
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    additive_expression            shift and go to state 173
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 1124
    conditional_and_expression     shift and go to state 161

state 1060

    (227) method_invocation -> SUPER . NAME ( argument_list_opt ) .

    ;               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    [               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    .               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    PLUSPLUS        reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    MINUSMINUS      reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    =               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    TIMES_ASSIGN    reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    DIVIDE_ASSIGN   reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    REMAINDER_ASSIGN reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    PLUS_ASSIGN     reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    MINUS_ASSIGN    reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    LSHIFT_ASSIGN   reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    RSHIFT_ASSIGN   reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    RRSHIFT_ASSIGN  reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    AND_ASSIGN      reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    OR_ASSIGN       reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    XOR_ASSIGN      reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    *               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    /               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    %               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    +               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    -               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    LSHIFT          reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    RSHIFT          reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    RRSHIFT         reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    >               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    <               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    GTEQ            reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    LTEQ            reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    INSTANCEOF      reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    EQ              reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    NEQ             reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    &               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    ^               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    |               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    AND             reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    ?               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    OR              reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    $end            reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    )               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    :               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    ]               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    ,               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)
    }               reduce using rule 227 (method_invocation -> SUPER . NAME ( argument_list_opt ) .)


state 1061

    (224) method_invocation -> SUPER . type_arguments NAME ( argument_list_opt . )

    )               shift and go to state 1125


state 1062

    (160) cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .

    *               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    /               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    %               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    +               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    -               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    RRSHIFT         reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    >               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    <               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    GTEQ            reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    LTEQ            reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    EQ              reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    NEQ             reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    &               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    ^               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    |               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    AND             reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    ?               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    OR              reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    )               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    ,               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    }               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    ;               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    $end            reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    :               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)
    ]               reduce using rule 160 (cast_expression -> ( name type_arguments dims_opt ) unary_expression_not_plus_minus .)


state 1063

    (161) cast_expression -> ( name type_arguments . class_or_interface_type dims_opt . ) unary_expression_not_plus_minus

    )               shift and go to state 1126


state 1064

    (446) additional_bound1 -> & reference_type1 .

    EXTENDS         reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    IMPLEMENTS      reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    {               reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    NAME            reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    BOOLEAN         reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    VOID            reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    BYTE            reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    SHORT           reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    INT             reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    LONG            reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    CHAR            reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    FLOAT           reduce using rule 446 (additional_bound1 -> & reference_type1 .)
    DOUBLE          reduce using rule 446 (additional_bound1 -> & reference_type1 .)


state 1065

    (438) additional_bound -> & reference_type .
    (400) reference_type1 -> reference_type . >

    &               reduce using rule 438 (additional_bound -> & reference_type .)
    ,               reduce using rule 438 (additional_bound -> & reference_type .)
    >               shift and go to state 547


state 1066

    (437) additional_bound_list -> additional_bound_list additional_bound .

    &               reduce using rule 437 (additional_bound_list -> additional_bound_list additional_bound .)
    ,               reduce using rule 437 (additional_bound_list -> additional_bound_list additional_bound .)


state 1067

    (445) additional_bound_list1 -> additional_bound_list additional_bound1 .

    EXTENDS         reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    IMPLEMENTS      reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    {               reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    NAME            reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    BOOLEAN         reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    VOID            reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    BYTE            reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    SHORT           reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    INT             reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    LONG            reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    CHAR            reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    FLOAT           reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)
    DOUBLE          reduce using rule 445 (additional_bound_list1 -> additional_bound_list additional_bound1 .)


state 1068

    (493) formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id .

    ,               reduce using rule 493 (formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id .)
    )               reduce using rule 493 (formal_parameter -> modifiers_opt type ELLIPSIS variable_declarator_id .)


state 1069

    (499) class_type_elt -> class_type .

    ,               reduce using rule 499 (class_type_elt -> class_type .)
    {               reduce using rule 499 (class_type_elt -> class_type .)
    ;               reduce using rule 499 (class_type_elt -> class_type .)


state 1070

    (496) method_header_throws_clause -> THROWS class_type_list .
    (498) class_type_list -> class_type_list . , class_type_elt

    {               reduce using rule 496 (method_header_throws_clause -> THROWS class_type_list .)
    ;               reduce using rule 496 (method_header_throws_clause -> THROWS class_type_list .)
    ,               shift and go to state 1127


state 1071

    (497) class_type_list -> class_type_elt .

    ,               reduce using rule 497 (class_type_list -> class_type_elt .)
    {               reduce using rule 497 (class_type_list -> class_type_elt .)
    ;               reduce using rule 497 (class_type_list -> class_type_elt .)


state 1072

    (569) annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .

    PUBLIC          reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    PROTECTED       reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    PRIVATE         reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    STATIC          reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    ABSTRACT        reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    FINAL           reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    NATIVE          reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    SYNCHRONIZED    reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    TRANSIENT       reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    VOLATILE        reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    STRICTFP        reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    @               reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    )               reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    BOOLEAN         reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    VOID            reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    BYTE            reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    SHORT           reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    INT             reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    LONG            reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    CHAR            reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    FLOAT           reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    DOUBLE          reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)
    NAME            reduce using rule 569 (annotation_method_header_name -> modifiers_opt type_parameters type NAME ( .)


state 1073

    (571) annotation_method_header_default_value_opt -> default_value .

    ;               reduce using rule 571 (annotation_method_header_default_value_opt -> default_value .)


state 1074

    (573) default_value -> DEFAULT . member_value
    (574) member_value -> . conditional_expression_not_name
    (575) member_value -> . name
    (576) member_value -> . annotation
    (577) member_value -> . member_value_array_initializer
    (22) conditional_expression_not_name -> . conditional_or_expression_not_name
    (23) conditional_expression_not_name -> . conditional_or_expression_not_name ? expression : conditional_expression
    (24) conditional_expression_not_name -> . name ? expression : conditional_expression
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (578) member_value_array_initializer -> . { member_values , }
    (579) member_value_array_initializer -> . { member_values }
    (580) member_value_array_initializer -> . { , }
    (581) member_value_array_initializer -> . { }
    (27) conditional_or_expression_not_name -> . conditional_and_expression_not_name
    (28) conditional_or_expression_not_name -> . conditional_or_expression_not_name OR conditional_and_expression
    (29) conditional_or_expression_not_name -> . name OR conditional_and_expression
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (32) conditional_and_expression_not_name -> . inclusive_or_expression_not_name
    (33) conditional_and_expression_not_name -> . conditional_and_expression_not_name AND inclusive_or_expression
    (34) conditional_and_expression_not_name -> . name AND inclusive_or_expression
    (588) annotation_name -> . @ name
    (37) inclusive_or_expression_not_name -> . exclusive_or_expression_not_name
    (38) inclusive_or_expression_not_name -> . inclusive_or_expression_not_name | exclusive_or_expression
    (39) inclusive_or_expression_not_name -> . name | exclusive_or_expression
    (42) exclusive_or_expression_not_name -> . and_expression_not_name
    (43) exclusive_or_expression_not_name -> . exclusive_or_expression_not_name ^ and_expression
    (44) exclusive_or_expression_not_name -> . name ^ and_expression
    (47) and_expression_not_name -> . equality_expression_not_name
    (48) and_expression_not_name -> . and_expression_not_name & equality_expression
    (49) and_expression_not_name -> . name & equality_expression
    (53) equality_expression_not_name -> . instanceof_expression_not_name
    (54) equality_expression_not_name -> . equality_expression_not_name EQ instanceof_expression
    (55) equality_expression_not_name -> . name EQ instanceof_expression
    (56) equality_expression_not_name -> . equality_expression_not_name NEQ instanceof_expression
    (57) equality_expression_not_name -> . name NEQ instanceof_expression
    (60) instanceof_expression_not_name -> . relational_expression_not_name
    (61) instanceof_expression_not_name -> . name INSTANCEOF reference_type
    (62) instanceof_expression_not_name -> . instanceof_expression_not_name INSTANCEOF reference_type
    (68) relational_expression_not_name -> . shift_expression_not_name
    (69) relational_expression_not_name -> . shift_expression_not_name < shift_expression
    (70) relational_expression_not_name -> . name < shift_expression
    (71) relational_expression_not_name -> . shift_expression_not_name > shift_expression
    (72) relational_expression_not_name -> . name > shift_expression
    (73) relational_expression_not_name -> . shift_expression_not_name GTEQ shift_expression
    (74) relational_expression_not_name -> . name GTEQ shift_expression
    (75) relational_expression_not_name -> . shift_expression_not_name LTEQ shift_expression
    (76) relational_expression_not_name -> . name LTEQ shift_expression
    (81) shift_expression_not_name -> . additive_expression_not_name
    (82) shift_expression_not_name -> . shift_expression_not_name LSHIFT additive_expression
    (83) shift_expression_not_name -> . name LSHIFT additive_expression
    (84) shift_expression_not_name -> . shift_expression_not_name RSHIFT additive_expression
    (85) shift_expression_not_name -> . name RSHIFT additive_expression
    (86) shift_expression_not_name -> . shift_expression_not_name RRSHIFT additive_expression
    (87) shift_expression_not_name -> . name RRSHIFT additive_expression
    (91) additive_expression_not_name -> . multiplicative_expression_not_name
    (92) additive_expression_not_name -> . additive_expression_not_name + multiplicative_expression
    (93) additive_expression_not_name -> . name + multiplicative_expression
    (94) additive_expression_not_name -> . additive_expression_not_name - multiplicative_expression
    (95) additive_expression_not_name -> . name - multiplicative_expression
    (100) multiplicative_expression_not_name -> . unary_expression_not_name
    (101) multiplicative_expression_not_name -> . multiplicative_expression_not_name * unary_expression
    (102) multiplicative_expression_not_name -> . name * unary_expression
    (103) multiplicative_expression_not_name -> . multiplicative_expression_not_name / unary_expression
    (104) multiplicative_expression_not_name -> . name / unary_expression
    (105) multiplicative_expression_not_name -> . multiplicative_expression_not_name % unary_expression
    (106) multiplicative_expression_not_name -> . name % unary_expression
    (112) unary_expression_not_name -> . pre_increment_expression
    (113) unary_expression_not_name -> . pre_decrement_expression
    (114) unary_expression_not_name -> . + unary_expression
    (115) unary_expression_not_name -> . - unary_expression
    (116) unary_expression_not_name -> . unary_expression_not_plus_minus_not_name
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (123) unary_expression_not_plus_minus_not_name -> . postfix_expression_not_name
    (124) unary_expression_not_plus_minus_not_name -> . ~ unary_expression
    (125) unary_expression_not_plus_minus_not_name -> . ! unary_expression
    (126) unary_expression_not_plus_minus_not_name -> . cast_expression
    (131) postfix_expression_not_name -> . primary
    (132) postfix_expression_not_name -> . post_increment_expression
    (133) postfix_expression_not_name -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    {               shift and go to state 467
    NAME            shift and go to state 179
    @               shift and go to state 402
    +               shift and go to state 264
    -               shift and go to state 278
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 267
    !               shift and go to state 277
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    array_creation_without_array_initializer shift and go to state 95
    relational_expression_not_name shift and go to state 262
    array_access                   shift and go to state 90
    primary                        shift and go to state 468
    exclusive_or_expression_not_name shift and go to state 254
    inclusive_or_expression_not_name shift and go to state 269
    multiplicative_expression_not_name shift and go to state 276
    simple_name                    shift and go to state 64
    primitive_type                 shift and go to state 174
    postfix_expression_not_name    shift and go to state 265
    member_value                   shift and go to state 1128
    post_decrement_expression      shift and go to state 460
    pre_increment_expression       shift and go to state 266
    postfix_expression             shift and go to state 472
    conditional_expression_not_name shift and go to state 473
    literal                        shift and go to state 146
    instanceof_expression_not_name shift and go to state 273
    cast_expression                shift and go to state 270
    shift_expression_not_name      shift and go to state 256
    unary_expression_not_name      shift and go to state 280
    equality_expression_not_name   shift and go to state 281
    primary_no_new_array           shift and go to state 87
    field_access                   shift and go to state 96
    unary_expression_not_plus_minus_not_name shift and go to state 257
    pre_decrement_expression       shift and go to state 261
    qualified_name                 shift and go to state 141
    single_member_annotation       shift and go to state 18
    conditional_and_expression_not_name shift and go to state 258
    class_instance_creation_expression_name shift and go to state 122
    member_value_array_initializer shift and go to state 474
    array_creation_with_array_initializer shift and go to state 101
    method_invocation              shift and go to state 176
    normal_annotation              shift and go to state 50
    and_expression_not_name        shift and go to state 271
    annotation                     shift and go to state 475
    annotation_name                shift and go to state 38
    name                           shift and go to state 462
    conditional_or_expression_not_name shift and go to state 272
    marker_annotation              shift and go to state 22
    post_increment_expression      shift and go to state 463
    class_instance_creation_expression shift and go to state 156
    additive_expression_not_name   shift and go to state 274

state 1075

    (568) annotation_method_header -> annotation_method_header_name formal_parameter_list_opt ) method_header_extended_dims annotation_method_header_default_value_opt .

    ;               reduce using rule 568 (annotation_method_header -> annotation_method_header_name formal_parameter_list_opt ) method_header_extended_dims annotation_method_header_default_value_opt .)


state 1076

    (572) annotation_method_header_default_value_opt -> empty .

    ;               reduce using rule 572 (annotation_method_header_default_value_opt -> empty .)


state 1077

    (505) method_header_name -> modifiers_opt type_parameters type NAME ( .

    PUBLIC          reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    PROTECTED       reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    PRIVATE         reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    STATIC          reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    ABSTRACT        reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    FINAL           reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    NATIVE          reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    SYNCHRONIZED    reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    TRANSIENT       reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    VOLATILE        reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    STRICTFP        reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    @               reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    )               reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    BOOLEAN         reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    VOID            reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    BYTE            reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    SHORT           reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    INT             reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    LONG            reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    CHAR            reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    FLOAT           reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    DOUBLE          reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)
    NAME            reduce using rule 505 (method_header_name -> modifiers_opt type_parameters type NAME ( .)


state 1078

    (504) method_header -> method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt .

    ;               reduce using rule 504 (method_header -> method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt .)
    {               reduce using rule 504 (method_header -> method_header_name formal_parameter_list_opt ) method_header_extended_dims method_header_throws_clause_opt .)


state 1079

    (412) reference_type3 -> reference_type RRSHIFT .

    SUPER           reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    THIS            reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    NAME            reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    .               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    [               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    (               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    IMPLEMENTS      reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    {               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    ,               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    INSTANCEOF      reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    EQ              reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    NEQ             reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    &               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    ^               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    |               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    AND             reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    ?               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    OR              reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    $end            reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    ;               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    :               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    )               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    ]               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    }               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    ELLIPSIS        reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    >               reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    EXTENDS         reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    BOOLEAN         reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    VOID            reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    BYTE            reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    SHORT           reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    INT             reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    LONG            reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    CHAR            reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    FLOAT           reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    DOUBLE          reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    RSHIFT          reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)
    RRSHIFT         reduce using rule 412 (reference_type3 -> reference_type RRSHIFT .)


state 1080

    (426) wildcard3 -> ? wildcard_bounds3 .

    SUPER           reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    THIS            reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    NAME            reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    .               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    [               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    (               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    IMPLEMENTS      reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    {               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    ,               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    INSTANCEOF      reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    EQ              reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    NEQ             reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    &               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    ^               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    |               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    AND             reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    ?               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    OR              reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    $end            reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    ;               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    :               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    )               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    ]               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    }               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    ELLIPSIS        reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    >               reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    EXTENDS         reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    BOOLEAN         reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    VOID            reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    BYTE            reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    SHORT           reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    INT             reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    LONG            reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    CHAR            reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    FLOAT           reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    DOUBLE          reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    RSHIFT          reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)
    RRSHIFT         reduce using rule 426 (wildcard3 -> ? wildcard_bounds3 .)


state 1081

    (427) wildcard_bounds3 -> EXTENDS . reference_type3
    (423) wildcard_bounds2 -> EXTENDS . reference_type2
    (419) wildcard_bounds1 -> EXTENDS . reference_type1
    (415) wildcard_bounds -> EXTENDS . reference_type
    (412) reference_type3 -> . reference_type RRSHIFT
    (406) reference_type2 -> . reference_type RSHIFT
    (407) reference_type2 -> . class_or_interface < type_argument_list3
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 782
    reference_type                 shift and go to state 1129
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    reference_type1                shift and go to state 770
    reference_type3                shift and go to state 1130
    reference_type2                shift and go to state 1000
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 1082

    (425) wildcard3 -> ? RRSHIFT .

    SUPER           reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    THIS            reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    NAME            reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    .               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    [               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    (               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    IMPLEMENTS      reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    {               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    ,               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    INSTANCEOF      reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    EQ              reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    NEQ             reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    &               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    ^               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    |               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    AND             reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    ?               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    OR              reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    $end            reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    ;               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    :               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    )               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    ]               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    }               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    ELLIPSIS        reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    >               reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    EXTENDS         reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    BOOLEAN         reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    VOID            reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    BYTE            reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    SHORT           reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    INT             reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    LONG            reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    CHAR            reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    FLOAT           reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    DOUBLE          reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    RSHIFT          reduce using rule 425 (wildcard3 -> ? RRSHIFT .)
    RRSHIFT         reduce using rule 425 (wildcard3 -> ? RRSHIFT .)


state 1083

    (428) wildcard_bounds3 -> SUPER . reference_type3
    (424) wildcard_bounds2 -> SUPER . reference_type2
    (420) wildcard_bounds1 -> SUPER . reference_type1
    (416) wildcard_bounds -> SUPER . reference_type
    (412) reference_type3 -> . reference_type RRSHIFT
    (406) reference_type2 -> . reference_type RSHIFT
    (407) reference_type2 -> . class_or_interface < type_argument_list3
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 295
    class_or_interface             shift and go to state 782
    reference_type                 shift and go to state 1131
    generic_type                   shift and go to state 284
    primitive_type                 shift and go to state 287
    array_type                     shift and go to state 102
    reference_type1                shift and go to state 772
    reference_type3                shift and go to state 1132
    reference_type2                shift and go to state 1002
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64

state 1084

    (409) type_argument_list3 -> type_argument_list , . type_argument3
    (403) type_argument_list2 -> type_argument_list , . type_argument2
    (393) type_argument_list1 -> type_argument_list , . type_argument1
    (395) type_argument_list -> type_argument_list , . type_argument
    (410) type_argument3 -> . reference_type3
    (411) type_argument3 -> . wildcard3
    (404) type_argument2 -> . reference_type2
    (405) type_argument2 -> . wildcard2
    (398) type_argument1 -> . reference_type1
    (399) type_argument1 -> . wildcard1
    (396) type_argument -> . reference_type
    (397) type_argument -> . wildcard
    (412) reference_type3 -> . reference_type RRSHIFT
    (425) wildcard3 -> . ? RRSHIFT
    (426) wildcard3 -> . ? wildcard_bounds3
    (406) reference_type2 -> . reference_type RSHIFT
    (407) reference_type2 -> . class_or_interface < type_argument_list3
    (421) wildcard2 -> . ? RSHIFT
    (422) wildcard2 -> . ? wildcard_bounds2
    (400) reference_type1 -> . reference_type >
    (401) reference_type1 -> . class_or_interface < type_argument_list2
    (417) wildcard1 -> . ? >
    (418) wildcard1 -> . ? wildcard_bounds1
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (413) wildcard -> . ?
    (414) wildcard -> . ? wildcard_bounds
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    ?               shift and go to state 1007
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    generic_type                   shift and go to state 284
    reference_type1                shift and go to state 293
    class_or_interface_type        shift and go to state 88
    simple_name                    shift and go to state 64
    qualified_name                 shift and go to state 141
    reference_type                 shift and go to state 1133
    primitive_type                 shift and go to state 287
    wildcard3                      shift and go to state 1008
    wildcard2                      shift and go to state 780
    wildcard1                      shift and go to state 289
    class_or_interface             shift and go to state 782
    type_argument1                 shift and go to state 775
    type_argument2                 shift and go to state 1004
    type_argument3                 shift and go to state 1134
    array_type                     shift and go to state 102
    reference_type3                shift and go to state 1011
    reference_type2                shift and go to state 784
    type_argument                  shift and go to state 776
    name                           shift and go to state 295
    wildcard                       shift and go to state 296

state 1085

    (318) explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) . ;

    ;               shift and go to state 1135


state 1086

    (316) explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) . ;

    ;               shift and go to state 1136


state 1087

    (222) method_invocation -> name . type_arguments NAME ( argument_list_opt ) .

    ;               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    [               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    .               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    PLUSPLUS        reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    MINUSMINUS      reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    =               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    TIMES_ASSIGN    reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    DIVIDE_ASSIGN   reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    REMAINDER_ASSIGN reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    PLUS_ASSIGN     reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    MINUS_ASSIGN    reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    LSHIFT_ASSIGN   reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    RSHIFT_ASSIGN   reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    RRSHIFT_ASSIGN  reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    AND_ASSIGN      reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    OR_ASSIGN       reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    XOR_ASSIGN      reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    *               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    /               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    %               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    +               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    -               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    LSHIFT          reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    RSHIFT          reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    RRSHIFT         reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    >               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    <               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    GTEQ            reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    LTEQ            reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    INSTANCEOF      reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    EQ              reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    NEQ             reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    &               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    ^               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    |               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    AND             reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    ?               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    OR              reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    $end            reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    )               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    :               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    ]               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    ,               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)
    }               reduce using rule 222 (method_invocation -> name . type_arguments NAME ( argument_list_opt ) .)


state 1088

    (314) explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .

    $end            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    IF              reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    WHILE           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    FOR             reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    {               reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    ;               reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    DO              reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    BREAK           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    RETURN          reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    THROW           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    TRY             reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    NAME            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    @               reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    VOID            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    BYTE            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    SHORT           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    INT             reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    LONG            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    CHAR            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    STATIC          reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    FINAL           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    THIS            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    SUPER           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    NEW             reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    <               reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    (               reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    NUM             reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    TRUE            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    FALSE           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    NULL            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    ENUM            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    CLASS           reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    }               reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    CASE            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)
    ELSE            reduce using rule 314 (explicit_constructor_invocation -> name . THIS ( argument_list_opt ) ; .)


state 1089

    (312) explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .

    $end            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    IF              reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    WHILE           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    FOR             reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    {               reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    ;               reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    DO              reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    BREAK           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    RETURN          reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    THROW           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    TRY             reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    NAME            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    @               reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    VOID            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    BYTE            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    SHORT           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    INT             reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    LONG            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    CHAR            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    STATIC          reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    FINAL           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    THIS            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    SUPER           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    NEW             reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    <               reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    (               reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    NUM             reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    TRUE            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    FALSE           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    NULL            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    ENUM            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    CLASS           reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    }               reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    CASE            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)
    ELSE            reduce using rule 312 (explicit_constructor_invocation -> name . SUPER ( argument_list_opt ) ; .)


state 1090

    (247) for_update_opt -> empty .

    )               reduce using rule 247 (for_update_opt -> empty .)


state 1091

    (236) for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt . ) statement

    )               shift and go to state 1137


state 1092

    (246) for_update_opt -> for_update .

    )               reduce using rule 246 (for_update_opt -> for_update .)


state 1093

    (248) for_update -> statement_expression_list .
    (243) statement_expression_list -> statement_expression_list . , statement_expression

    )               reduce using rule 248 (for_update -> statement_expression_list .)
    ,               shift and go to state 800


state 1094

    (305) resource -> modifiers type variable_declarator_id = variable_initializer .

    ;               reduce using rule 305 (resource -> modifiers type variable_declarator_id = variable_initializer .)
    )               reduce using rule 305 (resource -> modifiers type variable_declarator_id = variable_initializer .)


state 1095

    (295) union_type -> union_type | . type
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    name                           shift and go to state 342
    class_or_interface             shift and go to state 144
    class_or_interface_type        shift and go to state 88
    reference_type                 shift and go to state 91
    generic_type                   shift and go to state 58
    primitive_type                 shift and go to state 340
    array_type                     shift and go to state 102
    type                           shift and go to state 1138
    simple_name                    shift and go to state 64

state 1096

    (292) catch_formal_parameter -> modifiers_opt catch_type variable_declarator_id .

    )               reduce using rule 292 (catch_formal_parameter -> modifiers_opt catch_type variable_declarator_id .)


state 1097

    (291) catch_clause -> CATCH ( catch_formal_parameter ) block .

    CATCH           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    $end            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    IF              reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    WHILE           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    FOR             reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    {               reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    ASSERT          reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    ;               reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    SWITCH          reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    DO              reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    BREAK           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    CONTINUE        reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    RETURN          reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    SYNCHRONIZED    reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    THROW           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    TRY             reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    NAME            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    @               reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    BOOLEAN         reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    VOID            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    BYTE            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    SHORT           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    INT             reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    LONG            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    CHAR            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    FLOAT           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    DOUBLE          reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    PUBLIC          reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    PROTECTED       reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    PRIVATE         reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    STATIC          reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    ABSTRACT        reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    FINAL           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    NATIVE          reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    TRANSIENT       reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    VOLATILE        reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    STRICTFP        reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    THIS            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    SUPER           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    PLUSPLUS        reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    MINUSMINUS      reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    NEW             reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    <               reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    (               reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    NUM             reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    CHAR_LITERAL    reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    STRING_LITERAL  reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    TRUE            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    FALSE           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    NULL            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    ENUM            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    CLASS           reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    INTERFACE       reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    }               reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    CASE            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    DEFAULT         reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    FINALLY         reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)
    ELSE            reduce using rule 291 (catch_clause -> CATCH ( catch_formal_parameter ) block .)


state 1098

    (223) method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .

    ;               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    [               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    .               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    PLUSPLUS        reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    MINUSMINUS      reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    =               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    TIMES_ASSIGN    reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    DIVIDE_ASSIGN   reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    REMAINDER_ASSIGN reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    PLUS_ASSIGN     reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    MINUS_ASSIGN    reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    LSHIFT_ASSIGN   reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    RSHIFT_ASSIGN   reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    RRSHIFT_ASSIGN  reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    AND_ASSIGN      reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    OR_ASSIGN       reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    XOR_ASSIGN      reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    *               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    /               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    %               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    +               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    -               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    LSHIFT          reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    RSHIFT          reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    RRSHIFT         reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    >               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    <               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    GTEQ            reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    LTEQ            reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    INSTANCEOF      reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    EQ              reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    NEQ             reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    &               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    ^               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    |               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    AND             reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    ?               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    OR              reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    $end            reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    )               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    :               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    ]               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    ,               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)
    }               reduce using rule 223 (method_invocation -> primary . type_arguments NAME ( argument_list_opt ) .)


state 1099

    (317) explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) . ;

    ;               shift and go to state 1139


state 1100

    (315) explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) . ;

    ;               shift and go to state 1140


state 1101

    (313) explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .

    $end            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    IF              reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    WHILE           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    FOR             reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    {               reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    ;               reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    DO              reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    BREAK           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    RETURN          reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    THROW           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    TRY             reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    NAME            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    @               reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    VOID            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    BYTE            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    SHORT           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    INT             reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    LONG            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    CHAR            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    STATIC          reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    FINAL           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    THIS            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    SUPER           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    NEW             reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    <               reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    (               reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    NUM             reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    TRUE            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    FALSE           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    NULL            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    ENUM            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    CLASS           reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    }               reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    CASE            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)
    ELSE            reduce using rule 313 (explicit_constructor_invocation -> primary . THIS ( argument_list_opt ) ; .)


state 1102

    (322) class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) . class_body_opt
    (326) class_body_opt -> . class_body
    (327) class_body_opt -> . empty
    (466) class_body -> . { class_body_declarations_opt }
    (623) empty -> .

    {               shift and go to state 220
    ;               reduce using rule 623 (empty -> .)
    [               reduce using rule 623 (empty -> .)
    .               reduce using rule 623 (empty -> .)
    PLUSPLUS        reduce using rule 623 (empty -> .)
    MINUSMINUS      reduce using rule 623 (empty -> .)
    =               reduce using rule 623 (empty -> .)
    TIMES_ASSIGN    reduce using rule 623 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 623 (empty -> .)
    REMAINDER_ASSIGN reduce using rule 623 (empty -> .)
    PLUS_ASSIGN     reduce using rule 623 (empty -> .)
    MINUS_ASSIGN    reduce using rule 623 (empty -> .)
    LSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RRSHIFT_ASSIGN  reduce using rule 623 (empty -> .)
    AND_ASSIGN      reduce using rule 623 (empty -> .)
    OR_ASSIGN       reduce using rule 623 (empty -> .)
    XOR_ASSIGN      reduce using rule 623 (empty -> .)
    *               reduce using rule 623 (empty -> .)
    /               reduce using rule 623 (empty -> .)
    %               reduce using rule 623 (empty -> .)
    +               reduce using rule 623 (empty -> .)
    -               reduce using rule 623 (empty -> .)
    LSHIFT          reduce using rule 623 (empty -> .)
    RSHIFT          reduce using rule 623 (empty -> .)
    RRSHIFT         reduce using rule 623 (empty -> .)
    >               reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    GTEQ            reduce using rule 623 (empty -> .)
    LTEQ            reduce using rule 623 (empty -> .)
    INSTANCEOF      reduce using rule 623 (empty -> .)
    EQ              reduce using rule 623 (empty -> .)
    NEQ             reduce using rule 623 (empty -> .)
    &               reduce using rule 623 (empty -> .)
    ^               reduce using rule 623 (empty -> .)
    |               reduce using rule 623 (empty -> .)
    AND             reduce using rule 623 (empty -> .)
    ?               reduce using rule 623 (empty -> .)
    OR              reduce using rule 623 (empty -> .)
    $end            reduce using rule 623 (empty -> .)
    )               reduce using rule 623 (empty -> .)
    :               reduce using rule 623 (empty -> .)
    ]               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    }               reduce using rule 623 (empty -> .)

    class_body_opt                 shift and go to state 1141
    class_body                     shift and go to state 1041
    empty                          shift and go to state 1043

state 1103

    (321) class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt . ) class_body_opt

    )               shift and go to state 1142


state 1104

    (311) explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .

    $end            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    IF              reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    WHILE           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    FOR             reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    {               reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    ;               reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    DO              reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    BREAK           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    RETURN          reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    THROW           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    TRY             reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    NAME            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    @               reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    VOID            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    BYTE            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    SHORT           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    INT             reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    LONG            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    CHAR            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    STATIC          reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    FINAL           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    THIS            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    SUPER           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    NEW             reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    <               reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    (               reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    NUM             reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    TRUE            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    FALSE           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    NULL            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    ENUM            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    CLASS           reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    }               reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    CASE            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)
    ELSE            reduce using rule 311 (explicit_constructor_invocation -> primary . SUPER ( argument_list_opt ) ; .)


state 1105

    (319) class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .

    [               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    .               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    PLUSPLUS        reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    MINUSMINUS      reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    =               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    TIMES_ASSIGN    reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    DIVIDE_ASSIGN   reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    REMAINDER_ASSIGN reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    PLUS_ASSIGN     reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    MINUS_ASSIGN    reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT_ASSIGN   reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT_ASSIGN   reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT_ASSIGN  reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    AND_ASSIGN      reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    OR_ASSIGN       reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    XOR_ASSIGN      reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    *               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    /               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    %               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    +               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    -               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT          reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT          reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT         reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    >               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    <               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    GTEQ            reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LTEQ            reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    INSTANCEOF      reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    EQ              reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    NEQ             reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    &               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ^               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    |               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    AND             reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ?               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    OR              reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    :               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ,               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    )               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    $end            reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ;               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ]               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    }               reduce using rule 319 (class_instance_creation_expression -> NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)


state 1106

    (220) variable_initializers -> variable_initializers , variable_initializer .

    }               reduce using rule 220 (variable_initializers -> variable_initializers , variable_initializer .)
    ,               reduce using rule 220 (variable_initializers -> variable_initializers , variable_initializer .)


state 1107

    (218) array_initializer -> { variable_initializers , } .

    }               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    ,               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    ;               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    [               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    .               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    PLUSPLUS        reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    MINUSMINUS      reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    =               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    TIMES_ASSIGN    reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    DIVIDE_ASSIGN   reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    REMAINDER_ASSIGN reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    PLUS_ASSIGN     reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    MINUS_ASSIGN    reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    LSHIFT_ASSIGN   reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    RSHIFT_ASSIGN   reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    RRSHIFT_ASSIGN  reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    AND_ASSIGN      reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    OR_ASSIGN       reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    XOR_ASSIGN      reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    *               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    /               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    %               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    +               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    -               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    LSHIFT          reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    RSHIFT          reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    RRSHIFT         reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    >               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    <               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    GTEQ            reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    LTEQ            reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    INSTANCEOF      reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    EQ              reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    NEQ             reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    &               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    ^               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    |               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    AND             reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    ?               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    OR              reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    $end            reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    )               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    :               reduce using rule 218 (array_initializer -> { variable_initializers , } .)
    ]               reduce using rule 218 (array_initializer -> { variable_initializers , } .)


state 1108

    (275) constant_expression -> expression .

    :               reduce using rule 275 (constant_expression -> expression .)


state 1109

    (273) switch_label -> CASE constant_expression . :

    :               shift and go to state 1143


state 1110

    (274) switch_label -> DEFAULT : .

    }               reduce using rule 274 (switch_label -> DEFAULT : .)
    CASE            reduce using rule 274 (switch_label -> DEFAULT : .)
    DEFAULT         reduce using rule 274 (switch_label -> DEFAULT : .)
    IF              reduce using rule 274 (switch_label -> DEFAULT : .)
    WHILE           reduce using rule 274 (switch_label -> DEFAULT : .)
    FOR             reduce using rule 274 (switch_label -> DEFAULT : .)
    {               reduce using rule 274 (switch_label -> DEFAULT : .)
    ASSERT          reduce using rule 274 (switch_label -> DEFAULT : .)
    ;               reduce using rule 274 (switch_label -> DEFAULT : .)
    SWITCH          reduce using rule 274 (switch_label -> DEFAULT : .)
    DO              reduce using rule 274 (switch_label -> DEFAULT : .)
    BREAK           reduce using rule 274 (switch_label -> DEFAULT : .)
    CONTINUE        reduce using rule 274 (switch_label -> DEFAULT : .)
    RETURN          reduce using rule 274 (switch_label -> DEFAULT : .)
    SYNCHRONIZED    reduce using rule 274 (switch_label -> DEFAULT : .)
    THROW           reduce using rule 274 (switch_label -> DEFAULT : .)
    TRY             reduce using rule 274 (switch_label -> DEFAULT : .)
    NAME            reduce using rule 274 (switch_label -> DEFAULT : .)
    @               reduce using rule 274 (switch_label -> DEFAULT : .)
    BOOLEAN         reduce using rule 274 (switch_label -> DEFAULT : .)
    VOID            reduce using rule 274 (switch_label -> DEFAULT : .)
    BYTE            reduce using rule 274 (switch_label -> DEFAULT : .)
    SHORT           reduce using rule 274 (switch_label -> DEFAULT : .)
    INT             reduce using rule 274 (switch_label -> DEFAULT : .)
    LONG            reduce using rule 274 (switch_label -> DEFAULT : .)
    CHAR            reduce using rule 274 (switch_label -> DEFAULT : .)
    FLOAT           reduce using rule 274 (switch_label -> DEFAULT : .)
    DOUBLE          reduce using rule 274 (switch_label -> DEFAULT : .)
    PUBLIC          reduce using rule 274 (switch_label -> DEFAULT : .)
    PROTECTED       reduce using rule 274 (switch_label -> DEFAULT : .)
    PRIVATE         reduce using rule 274 (switch_label -> DEFAULT : .)
    STATIC          reduce using rule 274 (switch_label -> DEFAULT : .)
    ABSTRACT        reduce using rule 274 (switch_label -> DEFAULT : .)
    FINAL           reduce using rule 274 (switch_label -> DEFAULT : .)
    NATIVE          reduce using rule 274 (switch_label -> DEFAULT : .)
    TRANSIENT       reduce using rule 274 (switch_label -> DEFAULT : .)
    VOLATILE        reduce using rule 274 (switch_label -> DEFAULT : .)
    STRICTFP        reduce using rule 274 (switch_label -> DEFAULT : .)
    THIS            reduce using rule 274 (switch_label -> DEFAULT : .)
    SUPER           reduce using rule 274 (switch_label -> DEFAULT : .)
    PLUSPLUS        reduce using rule 274 (switch_label -> DEFAULT : .)
    MINUSMINUS      reduce using rule 274 (switch_label -> DEFAULT : .)
    NEW             reduce using rule 274 (switch_label -> DEFAULT : .)
    <               reduce using rule 274 (switch_label -> DEFAULT : .)
    (               reduce using rule 274 (switch_label -> DEFAULT : .)
    NUM             reduce using rule 274 (switch_label -> DEFAULT : .)
    CHAR_LITERAL    reduce using rule 274 (switch_label -> DEFAULT : .)
    STRING_LITERAL  reduce using rule 274 (switch_label -> DEFAULT : .)
    TRUE            reduce using rule 274 (switch_label -> DEFAULT : .)
    FALSE           reduce using rule 274 (switch_label -> DEFAULT : .)
    NULL            reduce using rule 274 (switch_label -> DEFAULT : .)
    ENUM            reduce using rule 274 (switch_label -> DEFAULT : .)
    CLASS           reduce using rule 274 (switch_label -> DEFAULT : .)
    INTERFACE       reduce using rule 274 (switch_label -> DEFAULT : .)


state 1111

    (272) switch_labels -> switch_labels switch_label .

    }               reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    CASE            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    DEFAULT         reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    IF              reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    WHILE           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    FOR             reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    {               reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    ASSERT          reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    ;               reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    SWITCH          reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    DO              reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    BREAK           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    CONTINUE        reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    RETURN          reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    SYNCHRONIZED    reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    THROW           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    TRY             reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    NAME            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    @               reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    BOOLEAN         reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    VOID            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    BYTE            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    SHORT           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    INT             reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    LONG            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    CHAR            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    FLOAT           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    DOUBLE          reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    PUBLIC          reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    PROTECTED       reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    PRIVATE         reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    STATIC          reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    ABSTRACT        reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    FINAL           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    NATIVE          reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    TRANSIENT       reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    VOLATILE        reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    STRICTFP        reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    THIS            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    SUPER           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    PLUSPLUS        reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    MINUSMINUS      reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    NEW             reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    <               reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    (               reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    NUM             reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    CHAR_LITERAL    reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    STRING_LITERAL  reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    TRUE            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    FALSE           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    NULL            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    ENUM            reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    CLASS           reduce using rule 272 (switch_labels -> switch_labels switch_label .)
    INTERFACE       reduce using rule 272 (switch_labels -> switch_labels switch_label .)


state 1112

    (270) switch_block_statement -> switch_labels block_statements .
    (168) block_statements -> block_statements . block_statement
    (169) block_statement -> . local_variable_declaration_statement
    (170) block_statement -> . statement
    (171) block_statement -> . class_declaration
    (172) block_statement -> . interface_declaration
    (173) block_statement -> . annotation_type_declaration
    (174) block_statement -> . enum_declaration
    (175) local_variable_declaration_statement -> . local_variable_declaration ;
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (529) enum_declaration -> . enum_header enum_body
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (623) empty -> .
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    }               reduce using rule 270 (switch_block_statement -> switch_labels block_statements .)
    CASE            reduce using rule 270 (switch_block_statement -> switch_labels block_statements .)
    DEFAULT         reduce using rule 270 (switch_block_statement -> switch_labels block_statements .)
    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 84
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    @               shift and go to state 30
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    expression_statement           shift and go to state 54
    enum_header                    shift and go to state 7
    explicit_constructor_invocation shift and go to state 55
    throw_statement                shift and go to state 57
    generic_type                   shift and go to state 58
    post_decrement_expression      shift and go to state 60
    assert_statement               shift and go to state 61
    statement_expression           shift and go to state 66
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    local_variable_declaration_statement shift and go to state 70
    try_statement                  shift and go to state 71
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 73
    labeled_statement              shift and go to state 77
    post_increment_expression      shift and go to state 78
    enum_header_name               shift and go to state 43
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    interface_declaration          shift and go to state 83
    type_arguments                 shift and go to state 85
    break_statement                shift and go to state 86
    class_or_interface_type        shift and go to state 88
    switch_statement               shift and go to state 89
    array_access                   shift and go to state 90
    single_member_annotation       shift and go to state 18
    reference_type                 shift and go to state 91
    label                          shift and go to state 92
    continue_statement             shift and go to state 93
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    statement_without_trailing_substatement shift and go to state 99
    array_creation_with_array_initializer shift and go to state 101
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation_name                shift and go to state 38
    interface_header_name          shift and go to state 14
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_header_init shift and go to state 105
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108
    modifiers_opt                  shift and go to state 26
    primary                        shift and go to state 109
    marker_annotation              shift and go to state 22
    block_statement                shift and go to state 602
    if_then_statement              shift and go to state 113
    array_creation_without_array_initializer shift and go to state 95
    while_statement                shift and go to state 65
    synchronized_statement         shift and go to state 115
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    statement                      shift and go to state 119
    method_invocation              shift and go to state 120
    empty                          shift and go to state 121
    annotation_type_declaration_header_name shift and go to state 31
    class_instance_creation_expression_name shift and go to state 122
    class_header                   shift and go to state 36
    modifiers                      shift and go to state 125
    type                           shift and go to state 128
    enum_declaration               shift and go to state 129
    empty_statement                shift and go to state 130
    local_variable_declaration     shift and go to state 134
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 135
    enhanced_for_statement         shift and go to state 138
    class_header_name1             shift and go to state 8
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    qualified_name                 shift and go to state 141
    class_header_name              shift and go to state 5
    postfix_expression             shift and go to state 59
    return_statement               shift and go to state 142
    do_statement                   shift and go to state 143
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    annotation                     shift and go to state 10
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 151

state 1113

    (266) switch_block -> { switch_labels } .

    $end            reduce using rule 266 (switch_block -> { switch_labels } .)
    IF              reduce using rule 266 (switch_block -> { switch_labels } .)
    WHILE           reduce using rule 266 (switch_block -> { switch_labels } .)
    FOR             reduce using rule 266 (switch_block -> { switch_labels } .)
    {               reduce using rule 266 (switch_block -> { switch_labels } .)
    ASSERT          reduce using rule 266 (switch_block -> { switch_labels } .)
    ;               reduce using rule 266 (switch_block -> { switch_labels } .)
    SWITCH          reduce using rule 266 (switch_block -> { switch_labels } .)
    DO              reduce using rule 266 (switch_block -> { switch_labels } .)
    BREAK           reduce using rule 266 (switch_block -> { switch_labels } .)
    CONTINUE        reduce using rule 266 (switch_block -> { switch_labels } .)
    RETURN          reduce using rule 266 (switch_block -> { switch_labels } .)
    SYNCHRONIZED    reduce using rule 266 (switch_block -> { switch_labels } .)
    THROW           reduce using rule 266 (switch_block -> { switch_labels } .)
    TRY             reduce using rule 266 (switch_block -> { switch_labels } .)
    NAME            reduce using rule 266 (switch_block -> { switch_labels } .)
    @               reduce using rule 266 (switch_block -> { switch_labels } .)
    BOOLEAN         reduce using rule 266 (switch_block -> { switch_labels } .)
    VOID            reduce using rule 266 (switch_block -> { switch_labels } .)
    BYTE            reduce using rule 266 (switch_block -> { switch_labels } .)
    SHORT           reduce using rule 266 (switch_block -> { switch_labels } .)
    INT             reduce using rule 266 (switch_block -> { switch_labels } .)
    LONG            reduce using rule 266 (switch_block -> { switch_labels } .)
    CHAR            reduce using rule 266 (switch_block -> { switch_labels } .)
    FLOAT           reduce using rule 266 (switch_block -> { switch_labels } .)
    DOUBLE          reduce using rule 266 (switch_block -> { switch_labels } .)
    PUBLIC          reduce using rule 266 (switch_block -> { switch_labels } .)
    PROTECTED       reduce using rule 266 (switch_block -> { switch_labels } .)
    PRIVATE         reduce using rule 266 (switch_block -> { switch_labels } .)
    STATIC          reduce using rule 266 (switch_block -> { switch_labels } .)
    ABSTRACT        reduce using rule 266 (switch_block -> { switch_labels } .)
    FINAL           reduce using rule 266 (switch_block -> { switch_labels } .)
    NATIVE          reduce using rule 266 (switch_block -> { switch_labels } .)
    TRANSIENT       reduce using rule 266 (switch_block -> { switch_labels } .)
    VOLATILE        reduce using rule 266 (switch_block -> { switch_labels } .)
    STRICTFP        reduce using rule 266 (switch_block -> { switch_labels } .)
    THIS            reduce using rule 266 (switch_block -> { switch_labels } .)
    SUPER           reduce using rule 266 (switch_block -> { switch_labels } .)
    PLUSPLUS        reduce using rule 266 (switch_block -> { switch_labels } .)
    MINUSMINUS      reduce using rule 266 (switch_block -> { switch_labels } .)
    NEW             reduce using rule 266 (switch_block -> { switch_labels } .)
    <               reduce using rule 266 (switch_block -> { switch_labels } .)
    (               reduce using rule 266 (switch_block -> { switch_labels } .)
    NUM             reduce using rule 266 (switch_block -> { switch_labels } .)
    CHAR_LITERAL    reduce using rule 266 (switch_block -> { switch_labels } .)
    STRING_LITERAL  reduce using rule 266 (switch_block -> { switch_labels } .)
    TRUE            reduce using rule 266 (switch_block -> { switch_labels } .)
    FALSE           reduce using rule 266 (switch_block -> { switch_labels } .)
    NULL            reduce using rule 266 (switch_block -> { switch_labels } .)
    ENUM            reduce using rule 266 (switch_block -> { switch_labels } .)
    CLASS           reduce using rule 266 (switch_block -> { switch_labels } .)
    INTERFACE       reduce using rule 266 (switch_block -> { switch_labels } .)
    }               reduce using rule 266 (switch_block -> { switch_labels } .)
    CASE            reduce using rule 266 (switch_block -> { switch_labels } .)
    DEFAULT         reduce using rule 266 (switch_block -> { switch_labels } .)
    ELSE            reduce using rule 266 (switch_block -> { switch_labels } .)


state 1114

    (267) switch_block -> { switch_block_statements switch_labels . }
    (272) switch_labels -> switch_labels . switch_label
    (270) switch_block_statement -> switch_labels . block_statements
    (273) switch_label -> . CASE constant_expression :
    (274) switch_label -> . DEFAULT :
    (167) block_statements -> . block_statement
    (168) block_statements -> . block_statements block_statement
    (169) block_statement -> . local_variable_declaration_statement
    (170) block_statement -> . statement
    (171) block_statement -> . class_declaration
    (172) block_statement -> . interface_declaration
    (173) block_statement -> . annotation_type_declaration
    (174) block_statement -> . enum_declaration
    (175) local_variable_declaration_statement -> . local_variable_declaration ;
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (452) class_declaration -> . class_header class_body
    (508) interface_declaration -> . interface_header interface_body
    (553) annotation_type_declaration -> . annotation_type_declaration_header annotation_type_body
    (529) enum_declaration -> . enum_header enum_body
    (176) local_variable_declaration -> . type variable_declarators
    (177) local_variable_declaration -> . modifiers type variable_declarators
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (453) class_header -> . class_header_name class_header_extends_opt class_header_implements_opt
    (509) interface_header -> . interface_header_name interface_header_extends_opt
    (554) annotation_type_declaration_header -> . annotation_type_declaration_header_name class_header_extends_opt class_header_implements_opt
    (530) enum_header -> . enum_header_name class_header_implements_opt
    (367) type -> . primitive_type
    (368) type -> . reference_type
    (353) modifiers -> . modifier
    (354) modifiers -> . modifiers modifier
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (454) class_header_name -> . class_header_name1 type_parameters
    (455) class_header_name -> . class_header_name1
    (510) interface_header_name -> . interface_header_name1 type_parameters
    (511) interface_header_name -> . interface_header_name1
    (555) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME
    (556) annotation_type_declaration_header_name -> . modifiers @ INTERFACE NAME type_parameters
    (557) annotation_type_declaration_header_name -> . @ INTERFACE NAME type_parameters
    (558) annotation_type_declaration_header_name -> . @ INTERFACE NAME
    (531) enum_header_name -> . modifiers_opt ENUM NAME
    (532) enum_header_name -> . modifiers_opt ENUM NAME type_parameters
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (378) reference_type -> . class_or_interface_type
    (379) reference_type -> . array_type
    (355) modifier -> . PUBLIC
    (356) modifier -> . PROTECTED
    (357) modifier -> . PRIVATE
    (358) modifier -> . STATIC
    (359) modifier -> . ABSTRACT
    (360) modifier -> . FINAL
    (361) modifier -> . NATIVE
    (362) modifier -> . SYNCHRONIZED
    (363) modifier -> . TRANSIENT
    (364) modifier -> . VOLATILE
    (365) modifier -> . STRICTFP
    (366) modifier -> . annotation
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (456) class_header_name1 -> . modifiers_opt CLASS NAME
    (512) interface_header_name1 -> . modifiers_opt INTERFACE NAME
    (351) modifiers_opt -> . modifiers
    (352) modifiers_opt -> . empty
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (387) array_type -> . primitive_type dims
    (388) array_type -> . name dims
    (389) array_type -> . generic_type dims
    (390) array_type -> . generic_type . name dims
    (584) annotation -> . normal_annotation
    (585) annotation -> . marker_annotation
    (586) annotation -> . single_member_annotation
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (623) empty -> .
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (587) normal_annotation -> . annotation_name ( member_value_pairs_opt )
    (594) marker_annotation -> . annotation_name
    (595) single_member_annotation -> . annotation_name ( single_member_annotation_member_value )
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (588) annotation_name -> . @ name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]

    }               shift and go to state 1144
    CASE            shift and go to state 1044
    DEFAULT         shift and go to state 1045
    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 84
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    @               shift and go to state 30
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    PUBLIC          shift and go to state 53
    PROTECTED       shift and go to state 12
    PRIVATE         shift and go to state 24
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 9
    FINAL           shift and go to state 17
    NATIVE          shift and go to state 19
    TRANSIENT       shift and go to state 47
    VOLATILE        shift and go to state 48
    STRICTFP        shift and go to state 25
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    ENUM            reduce using rule 623 (empty -> .)
    CLASS           reduce using rule 623 (empty -> .)
    INTERFACE       reduce using rule 623 (empty -> .)
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140

    expression_statement           shift and go to state 54
    enum_header                    shift and go to state 7
    explicit_constructor_invocation shift and go to state 55
    throw_statement                shift and go to state 57
    generic_type                   shift and go to state 58
    post_decrement_expression      shift and go to state 60
    assert_statement               shift and go to state 61
    statement_expression           shift and go to state 66
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    local_variable_declaration_statement shift and go to state 70
    try_statement                  shift and go to state 71
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 73
    labeled_statement              shift and go to state 77
    post_increment_expression      shift and go to state 78
    enum_header_name               shift and go to state 43
    pre_decrement_expression       shift and go to state 79
    try_statement_with_resources   shift and go to state 80
    interface_declaration          shift and go to state 83
    type_arguments                 shift and go to state 85
    break_statement                shift and go to state 86
    class_or_interface_type        shift and go to state 88
    switch_statement               shift and go to state 89
    array_access                   shift and go to state 90
    single_member_annotation       shift and go to state 18
    reference_type                 shift and go to state 91
    label                          shift and go to state 92
    continue_statement             shift and go to state 93
    simple_name                    shift and go to state 64
    field_access                   shift and go to state 96
    statement_without_trailing_substatement shift and go to state 99
    array_creation_with_array_initializer shift and go to state 101
    array_type                     shift and go to state 102
    normal_annotation              shift and go to state 50
    annotation_name                shift and go to state 38
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_header_init shift and go to state 105
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108
    modifiers_opt                  shift and go to state 26
    primary                        shift and go to state 109
    marker_annotation              shift and go to state 22
    block_statement                shift and go to state 325
    if_then_statement              shift and go to state 113
    array_creation_without_array_initializer shift and go to state 95
    while_statement                shift and go to state 65
    synchronized_statement         shift and go to state 115
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 116
    literal                        shift and go to state 146
    statement                      shift and go to state 119
    method_invocation              shift and go to state 120
    annotation_type_declaration_header_name shift and go to state 31
    class_instance_creation_expression_name shift and go to state 122
    switch_label                   shift and go to state 1111
    class_header                   shift and go to state 36
    modifiers                      shift and go to state 125
    type                           shift and go to state 128
    enum_declaration               shift and go to state 129
    empty_statement                shift and go to state 130
    empty                          shift and go to state 121
    local_variable_declaration     shift and go to state 134
    modifier                       shift and go to state 51
    annotation_type_declaration    shift and go to state 135
    enhanced_for_statement         shift and go to state 138
    class_header_name1             shift and go to state 8
    interface_header_name          shift and go to state 14
    interface_header_name1         shift and go to state 42
    annotation_type_declaration_header shift and go to state 16
    qualified_name                 shift and go to state 141
    class_header_name              shift and go to state 5
    postfix_expression             shift and go to state 59
    return_statement               shift and go to state 142
    do_statement                   shift and go to state 143
    block_statements               shift and go to state 1112
    class_or_interface             shift and go to state 144
    assignment                     shift and go to state 145
    annotation                     shift and go to state 10
    interface_header               shift and go to state 45
    class_declaration              shift and go to state 151

state 1115

    (265) switch_block -> { switch_block_statements } .

    $end            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    IF              reduce using rule 265 (switch_block -> { switch_block_statements } .)
    WHILE           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    FOR             reduce using rule 265 (switch_block -> { switch_block_statements } .)
    {               reduce using rule 265 (switch_block -> { switch_block_statements } .)
    ASSERT          reduce using rule 265 (switch_block -> { switch_block_statements } .)
    ;               reduce using rule 265 (switch_block -> { switch_block_statements } .)
    SWITCH          reduce using rule 265 (switch_block -> { switch_block_statements } .)
    DO              reduce using rule 265 (switch_block -> { switch_block_statements } .)
    BREAK           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    CONTINUE        reduce using rule 265 (switch_block -> { switch_block_statements } .)
    RETURN          reduce using rule 265 (switch_block -> { switch_block_statements } .)
    SYNCHRONIZED    reduce using rule 265 (switch_block -> { switch_block_statements } .)
    THROW           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    TRY             reduce using rule 265 (switch_block -> { switch_block_statements } .)
    NAME            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    @               reduce using rule 265 (switch_block -> { switch_block_statements } .)
    BOOLEAN         reduce using rule 265 (switch_block -> { switch_block_statements } .)
    VOID            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    BYTE            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    SHORT           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    INT             reduce using rule 265 (switch_block -> { switch_block_statements } .)
    LONG            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    CHAR            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    FLOAT           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    DOUBLE          reduce using rule 265 (switch_block -> { switch_block_statements } .)
    PUBLIC          reduce using rule 265 (switch_block -> { switch_block_statements } .)
    PROTECTED       reduce using rule 265 (switch_block -> { switch_block_statements } .)
    PRIVATE         reduce using rule 265 (switch_block -> { switch_block_statements } .)
    STATIC          reduce using rule 265 (switch_block -> { switch_block_statements } .)
    ABSTRACT        reduce using rule 265 (switch_block -> { switch_block_statements } .)
    FINAL           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    NATIVE          reduce using rule 265 (switch_block -> { switch_block_statements } .)
    TRANSIENT       reduce using rule 265 (switch_block -> { switch_block_statements } .)
    VOLATILE        reduce using rule 265 (switch_block -> { switch_block_statements } .)
    STRICTFP        reduce using rule 265 (switch_block -> { switch_block_statements } .)
    THIS            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    SUPER           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    PLUSPLUS        reduce using rule 265 (switch_block -> { switch_block_statements } .)
    MINUSMINUS      reduce using rule 265 (switch_block -> { switch_block_statements } .)
    NEW             reduce using rule 265 (switch_block -> { switch_block_statements } .)
    <               reduce using rule 265 (switch_block -> { switch_block_statements } .)
    (               reduce using rule 265 (switch_block -> { switch_block_statements } .)
    NUM             reduce using rule 265 (switch_block -> { switch_block_statements } .)
    CHAR_LITERAL    reduce using rule 265 (switch_block -> { switch_block_statements } .)
    STRING_LITERAL  reduce using rule 265 (switch_block -> { switch_block_statements } .)
    TRUE            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    FALSE           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    NULL            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    ENUM            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    CLASS           reduce using rule 265 (switch_block -> { switch_block_statements } .)
    INTERFACE       reduce using rule 265 (switch_block -> { switch_block_statements } .)
    }               reduce using rule 265 (switch_block -> { switch_block_statements } .)
    CASE            reduce using rule 265 (switch_block -> { switch_block_statements } .)
    DEFAULT         reduce using rule 265 (switch_block -> { switch_block_statements } .)
    ELSE            reduce using rule 265 (switch_block -> { switch_block_statements } .)


state 1116

    (269) switch_block_statements -> switch_block_statements switch_block_statement .

    }               reduce using rule 269 (switch_block_statements -> switch_block_statements switch_block_statement .)
    CASE            reduce using rule 269 (switch_block_statements -> switch_block_statements switch_block_statement .)
    DEFAULT         reduce using rule 269 (switch_block_statements -> switch_block_statements switch_block_statement .)


state 1117

    (323) class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .

    [               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    .               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    PLUSPLUS        reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    MINUSMINUS      reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    =               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    TIMES_ASSIGN    reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    DIVIDE_ASSIGN   reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    REMAINDER_ASSIGN reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    PLUS_ASSIGN     reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    MINUS_ASSIGN    reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT_ASSIGN   reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT_ASSIGN   reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT_ASSIGN  reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    AND_ASSIGN      reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    OR_ASSIGN       reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    XOR_ASSIGN      reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    *               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    /               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    %               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    +               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    -               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT          reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT          reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT         reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    >               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    <               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    GTEQ            reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    LTEQ            reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    INSTANCEOF      reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    EQ              reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    NEQ             reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    &               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    ^               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    |               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    AND             reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    ?               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    OR              reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    :               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    ,               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    )               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    $end            reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    ;               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    ]               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)
    }               reduce using rule 323 (class_instance_creation_expression -> class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt .)


state 1118

    (324) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) . class_body_opt
    (326) class_body_opt -> . class_body
    (327) class_body_opt -> . empty
    (466) class_body -> . { class_body_declarations_opt }
    (623) empty -> .

    {               shift and go to state 220
    ;               reduce using rule 623 (empty -> .)
    [               reduce using rule 623 (empty -> .)
    .               reduce using rule 623 (empty -> .)
    PLUSPLUS        reduce using rule 623 (empty -> .)
    MINUSMINUS      reduce using rule 623 (empty -> .)
    =               reduce using rule 623 (empty -> .)
    TIMES_ASSIGN    reduce using rule 623 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 623 (empty -> .)
    REMAINDER_ASSIGN reduce using rule 623 (empty -> .)
    PLUS_ASSIGN     reduce using rule 623 (empty -> .)
    MINUS_ASSIGN    reduce using rule 623 (empty -> .)
    LSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RRSHIFT_ASSIGN  reduce using rule 623 (empty -> .)
    AND_ASSIGN      reduce using rule 623 (empty -> .)
    OR_ASSIGN       reduce using rule 623 (empty -> .)
    XOR_ASSIGN      reduce using rule 623 (empty -> .)
    *               reduce using rule 623 (empty -> .)
    /               reduce using rule 623 (empty -> .)
    %               reduce using rule 623 (empty -> .)
    +               reduce using rule 623 (empty -> .)
    -               reduce using rule 623 (empty -> .)
    LSHIFT          reduce using rule 623 (empty -> .)
    RSHIFT          reduce using rule 623 (empty -> .)
    RRSHIFT         reduce using rule 623 (empty -> .)
    >               reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    GTEQ            reduce using rule 623 (empty -> .)
    LTEQ            reduce using rule 623 (empty -> .)
    INSTANCEOF      reduce using rule 623 (empty -> .)
    EQ              reduce using rule 623 (empty -> .)
    NEQ             reduce using rule 623 (empty -> .)
    &               reduce using rule 623 (empty -> .)
    ^               reduce using rule 623 (empty -> .)
    |               reduce using rule 623 (empty -> .)
    AND             reduce using rule 623 (empty -> .)
    ?               reduce using rule 623 (empty -> .)
    OR              reduce using rule 623 (empty -> .)
    $end            reduce using rule 623 (empty -> .)
    )               reduce using rule 623 (empty -> .)
    :               reduce using rule 623 (empty -> .)
    ]               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    }               reduce using rule 623 (empty -> .)

    class_body                     shift and go to state 1041
    class_body_opt                 shift and go to state 1145
    empty                          shift and go to state 1043

state 1119

    (276) do_statement -> DO statement WHILE ( expression ) ; .

    $end            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    IF              reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    WHILE           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    FOR             reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    {               reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    ASSERT          reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    ;               reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    SWITCH          reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    DO              reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    BREAK           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    RETURN          reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    SYNCHRONIZED    reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    THROW           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    TRY             reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    NAME            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    @               reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    BOOLEAN         reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    VOID            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    BYTE            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    SHORT           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    INT             reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    LONG            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    CHAR            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    FLOAT           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    PUBLIC          reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    PROTECTED       reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    PRIVATE         reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    STATIC          reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    ABSTRACT        reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    FINAL           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    NATIVE          reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    TRANSIENT       reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    VOLATILE        reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    STRICTFP        reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    THIS            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    SUPER           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    PLUSPLUS        reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    MINUSMINUS      reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    NEW             reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    <               reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    (               reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    NUM             reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    CHAR_LITERAL    reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    STRING_LITERAL  reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    TRUE            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    FALSE           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    NULL            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    ENUM            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    CLASS           reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    INTERFACE       reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    }               reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    CASE            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    DEFAULT         reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)
    ELSE            reduce using rule 276 (do_statement -> DO statement WHILE ( expression ) ; .)


state 1120

    (229) labeled_statement_no_short_if -> label : statement_no_short_if .

    ELSE            reduce using rule 229 (labeled_statement_no_short_if -> label : statement_no_short_if .)


state 1121

    (236) for_statement -> FOR ( for_init_opt . ; expression_opt ; for_update_opt ) statement
    (237) for_statement_no_short_if -> FOR ( for_init_opt . ; expression_opt ; for_update_opt ) statement_no_short_if

    ;               shift and go to state 1146


state 1122

    (234) while_statement -> WHILE ( expression . ) statement
    (235) while_statement_no_short_if -> WHILE ( expression . ) statement_no_short_if

    )               shift and go to state 1147


state 1123

    (232) if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .

    $end            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    IF              reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    WHILE           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    FOR             reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    {               reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    ASSERT          reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    ;               reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    SWITCH          reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    DO              reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    BREAK           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    CONTINUE        reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    RETURN          reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    SYNCHRONIZED    reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    THROW           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    TRY             reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    NAME            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    @               reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    BOOLEAN         reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    VOID            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    BYTE            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    SHORT           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    INT             reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    LONG            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    CHAR            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    FLOAT           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    DOUBLE          reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    PUBLIC          reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    PROTECTED       reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    PRIVATE         reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    STATIC          reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    ABSTRACT        reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    FINAL           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    NATIVE          reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    TRANSIENT       reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    VOLATILE        reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    STRICTFP        reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    THIS            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    SUPER           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    PLUSPLUS        reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    MINUSMINUS      reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    NEW             reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    <               reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    (               reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    NUM             reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    CHAR_LITERAL    reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    STRING_LITERAL  reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    TRUE            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    FALSE           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    NULL            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    ENUM            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    CLASS           reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    INTERFACE       reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    }               reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    CASE            reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)
    DEFAULT         reduce using rule 232 (if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE statement .)


state 1124

    (231) if_then_statement -> IF ( expression . ) statement
    (232) if_then_else_statement -> IF ( expression . ) statement_no_short_if ELSE statement
    (233) if_then_else_statement_no_short_if -> IF ( expression . ) statement_no_short_if ELSE statement_no_short_if

    )               shift and go to state 1148


state 1125

    (224) method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .

    ;               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    [               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    .               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    PLUSPLUS        reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    MINUSMINUS      reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    =               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    TIMES_ASSIGN    reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    DIVIDE_ASSIGN   reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    REMAINDER_ASSIGN reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    PLUS_ASSIGN     reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    MINUS_ASSIGN    reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    LSHIFT_ASSIGN   reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    RSHIFT_ASSIGN   reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    RRSHIFT_ASSIGN  reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    AND_ASSIGN      reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    OR_ASSIGN       reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    XOR_ASSIGN      reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    *               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    /               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    %               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    +               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    -               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    LSHIFT          reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    RSHIFT          reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    RRSHIFT         reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    >               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    <               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    GTEQ            reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    LTEQ            reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    INSTANCEOF      reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    EQ              reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    NEQ             reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    &               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    ^               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    |               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    AND             reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    ?               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    OR              reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    $end            reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    )               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    :               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    ]               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    ,               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)
    }               reduce using rule 224 (method_invocation -> SUPER . type_arguments NAME ( argument_list_opt ) .)


state 1126

    (161) cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) . unary_expression_not_plus_minus
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (325) class_instance_creation_expression_name -> . name .

    ~               shift and go to state 181
    !               shift and go to state 183
    (               shift and go to state 314
    THIS            shift and go to state 158
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    primary                        shift and go to state 171
    unary_expression_not_plus_minus shift and go to state 1149
    post_decrement_expression      shift and go to state 153
    simple_name                    shift and go to state 64
    postfix_expression             shift and go to state 315
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    array_access                   shift and go to state 90
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    cast_expression                shift and go to state 177
    class_instance_creation_expression shift and go to state 156
    name                           shift and go to state 157
    post_increment_expression      shift and go to state 159

state 1127

    (498) class_type_list -> class_type_list , . class_type_elt
    (499) class_type_elt -> . class_type
    (382) class_type -> . class_or_interface_type
    (380) class_or_interface_type -> . class_or_interface
    (381) class_or_interface_type -> . generic_type
    (383) class_or_interface -> . name
    (384) class_or_interface -> . generic_type . name
    (385) generic_type -> . class_or_interface type_arguments
    (386) generic_type -> . class_or_interface < >
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name

    NAME            shift and go to state 212

    qualified_name                 shift and go to state 141
    class_type_elt                 shift and go to state 1150
    class_or_interface             shift and go to state 144
    generic_type                   shift and go to state 331
    name                           shift and go to state 335
    simple_name                    shift and go to state 64
    class_or_interface_type        shift and go to state 394
    class_type                     shift and go to state 1069

state 1128

    (573) default_value -> DEFAULT member_value .

    ;               reduce using rule 573 (default_value -> DEFAULT member_value .)


state 1129

    (415) wildcard_bounds -> EXTENDS reference_type .
    (412) reference_type3 -> reference_type . RRSHIFT
    (406) reference_type2 -> reference_type . RSHIFT
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 415 (wildcard_bounds -> EXTENDS reference_type .)
    RRSHIFT         shift and go to state 1079
    RSHIFT          shift and go to state 895
    >               shift and go to state 547


state 1130

    (427) wildcard_bounds3 -> EXTENDS reference_type3 .

    SUPER           reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    THIS            reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    NAME            reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    .               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    [               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    (               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    IMPLEMENTS      reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    {               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    ,               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    INSTANCEOF      reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    EQ              reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    NEQ             reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    &               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    ^               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    |               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    AND             reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    ?               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    OR              reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    $end            reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    ;               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    :               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    )               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    ]               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    }               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    ELLIPSIS        reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    >               reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    EXTENDS         reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    BOOLEAN         reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    VOID            reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    BYTE            reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    SHORT           reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    INT             reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    LONG            reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    CHAR            reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    FLOAT           reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    DOUBLE          reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    RSHIFT          reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)
    RRSHIFT         reduce using rule 427 (wildcard_bounds3 -> EXTENDS reference_type3 .)


state 1131

    (416) wildcard_bounds -> SUPER reference_type .
    (412) reference_type3 -> reference_type . RRSHIFT
    (406) reference_type2 -> reference_type . RSHIFT
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 416 (wildcard_bounds -> SUPER reference_type .)
    RRSHIFT         shift and go to state 1079
    RSHIFT          shift and go to state 895
    >               shift and go to state 547


state 1132

    (428) wildcard_bounds3 -> SUPER reference_type3 .

    SUPER           reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    THIS            reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    NAME            reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    .               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    [               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    (               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    IMPLEMENTS      reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    {               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    ,               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    INSTANCEOF      reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    EQ              reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    NEQ             reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    &               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    ^               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    |               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    AND             reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    ?               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    OR              reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    $end            reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    ;               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    :               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    )               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    ]               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    }               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    ELLIPSIS        reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    >               reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    EXTENDS         reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    BOOLEAN         reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    VOID            reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    BYTE            reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    SHORT           reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    INT             reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    LONG            reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    CHAR            reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    FLOAT           reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    DOUBLE          reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    RSHIFT          reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)
    RRSHIFT         reduce using rule 428 (wildcard_bounds3 -> SUPER reference_type3 .)


state 1133

    (396) type_argument -> reference_type .
    (412) reference_type3 -> reference_type . RRSHIFT
    (406) reference_type2 -> reference_type . RSHIFT
    (400) reference_type1 -> reference_type . >

    ,               reduce using rule 396 (type_argument -> reference_type .)
    RRSHIFT         shift and go to state 1079
    RSHIFT          shift and go to state 895
    >               shift and go to state 547


state 1134

    (409) type_argument_list3 -> type_argument_list , type_argument3 .

    SUPER           reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    THIS            reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    NAME            reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    .               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    [               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    (               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    IMPLEMENTS      reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    {               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    ,               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    INSTANCEOF      reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    EQ              reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    NEQ             reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    &               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    ^               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    |               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    AND             reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    ?               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    OR              reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    $end            reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    ;               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    :               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    )               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    ]               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    }               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    ELLIPSIS        reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    >               reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    EXTENDS         reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    BOOLEAN         reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    VOID            reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    BYTE            reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    SHORT           reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    INT             reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    LONG            reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    CHAR            reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    FLOAT           reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    DOUBLE          reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    RSHIFT          reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)
    RRSHIFT         reduce using rule 409 (type_argument_list3 -> type_argument_list , type_argument3 .)


state 1135

    (318) explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .

    $end            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    IF              reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    WHILE           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    FOR             reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    {               reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    ;               reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    DO              reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    BREAK           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    RETURN          reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    THROW           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    TRY             reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    NAME            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    @               reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    VOID            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    BYTE            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    SHORT           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    INT             reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    LONG            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    CHAR            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    STATIC          reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    FINAL           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    THIS            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    SUPER           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    NEW             reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    <               reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    (               reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    NUM             reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    TRUE            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    FALSE           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    NULL            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    ENUM            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    CLASS           reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    }               reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    CASE            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)
    ELSE            reduce using rule 318 (explicit_constructor_invocation -> name . type_arguments THIS ( argument_list_opt ) ; .)


state 1136

    (316) explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .

    $end            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    IF              reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    WHILE           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    FOR             reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    {               reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    ;               reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    DO              reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    BREAK           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    RETURN          reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    THROW           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    TRY             reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    NAME            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    @               reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    VOID            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    BYTE            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    SHORT           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    INT             reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    LONG            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    CHAR            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    STATIC          reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    FINAL           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    THIS            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    SUPER           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    NEW             reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    <               reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    (               reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    NUM             reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    TRUE            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    FALSE           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    NULL            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    ENUM            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    CLASS           reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    }               reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    CASE            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)
    ELSE            reduce using rule 316 (explicit_constructor_invocation -> name . type_arguments SUPER ( argument_list_opt ) ; .)


state 1137

    (236) for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) . statement
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 148
    WHILE           shift and go to state 111
    FOR             shift and go to state 97
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    array_access                   shift and go to state 90
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 92
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 1151
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    enhanced_for_statement_header  shift and go to state 68
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    literal                        shift and go to state 146
    statement_without_trailing_substatement shift and go to state 99
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    labeled_statement              shift and go to state 77
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 1138

    (295) union_type -> union_type | type .

    |               reduce using rule 295 (union_type -> union_type | type .)
    NAME            reduce using rule 295 (union_type -> union_type | type .)


state 1139

    (317) explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .

    $end            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    IF              reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    WHILE           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    FOR             reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    {               reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    ;               reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    DO              reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    BREAK           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    RETURN          reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    THROW           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    TRY             reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    NAME            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    @               reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    VOID            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    BYTE            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    SHORT           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    INT             reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    LONG            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    CHAR            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    STATIC          reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    FINAL           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    THIS            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    SUPER           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    NEW             reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    <               reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    (               reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    NUM             reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    TRUE            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    FALSE           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    NULL            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    ENUM            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    CLASS           reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    }               reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    CASE            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)
    ELSE            reduce using rule 317 (explicit_constructor_invocation -> primary . type_arguments THIS ( argument_list_opt ) ; .)


state 1140

    (315) explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .

    $end            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    IF              reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    WHILE           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    FOR             reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    {               reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    ASSERT          reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    ;               reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    SWITCH          reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    DO              reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    BREAK           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    CONTINUE        reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    RETURN          reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    SYNCHRONIZED    reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    THROW           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    TRY             reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    NAME            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    @               reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    BOOLEAN         reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    VOID            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    BYTE            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    SHORT           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    INT             reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    LONG            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    CHAR            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    FLOAT           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    DOUBLE          reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    PUBLIC          reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    PROTECTED       reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    PRIVATE         reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    STATIC          reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    ABSTRACT        reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    FINAL           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    NATIVE          reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    TRANSIENT       reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    VOLATILE        reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    STRICTFP        reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    THIS            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    SUPER           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    PLUSPLUS        reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    MINUSMINUS      reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    NEW             reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    <               reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    (               reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    NUM             reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    CHAR_LITERAL    reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    STRING_LITERAL  reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    TRUE            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    FALSE           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    NULL            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    ENUM            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    CLASS           reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    INTERFACE       reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    }               reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    CASE            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    DEFAULT         reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)
    ELSE            reduce using rule 315 (explicit_constructor_invocation -> primary . type_arguments SUPER ( argument_list_opt ) ; .)


state 1141

    (322) class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .

    [               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    .               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    PLUSPLUS        reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    MINUSMINUS      reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    =               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    TIMES_ASSIGN    reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    DIVIDE_ASSIGN   reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    REMAINDER_ASSIGN reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    PLUS_ASSIGN     reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    MINUS_ASSIGN    reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT_ASSIGN   reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT_ASSIGN   reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT_ASSIGN  reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    AND_ASSIGN      reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    OR_ASSIGN       reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    XOR_ASSIGN      reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    *               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    /               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    %               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    +               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    -               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT          reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT          reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT         reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    >               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    <               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    GTEQ            reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    LTEQ            reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    INSTANCEOF      reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    EQ              reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    NEQ             reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    &               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    ^               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    |               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    AND             reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    ?               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    OR              reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    :               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    ,               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    )               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    $end            reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    ;               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    ]               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)
    }               reduce using rule 322 (class_instance_creation_expression -> primary . NEW class_type ( argument_list_opt ) class_body_opt .)


state 1142

    (321) class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) . class_body_opt
    (326) class_body_opt -> . class_body
    (327) class_body_opt -> . empty
    (466) class_body -> . { class_body_declarations_opt }
    (623) empty -> .

    {               shift and go to state 220
    ;               reduce using rule 623 (empty -> .)
    [               reduce using rule 623 (empty -> .)
    .               reduce using rule 623 (empty -> .)
    PLUSPLUS        reduce using rule 623 (empty -> .)
    MINUSMINUS      reduce using rule 623 (empty -> .)
    =               reduce using rule 623 (empty -> .)
    TIMES_ASSIGN    reduce using rule 623 (empty -> .)
    DIVIDE_ASSIGN   reduce using rule 623 (empty -> .)
    REMAINDER_ASSIGN reduce using rule 623 (empty -> .)
    PLUS_ASSIGN     reduce using rule 623 (empty -> .)
    MINUS_ASSIGN    reduce using rule 623 (empty -> .)
    LSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RSHIFT_ASSIGN   reduce using rule 623 (empty -> .)
    RRSHIFT_ASSIGN  reduce using rule 623 (empty -> .)
    AND_ASSIGN      reduce using rule 623 (empty -> .)
    OR_ASSIGN       reduce using rule 623 (empty -> .)
    XOR_ASSIGN      reduce using rule 623 (empty -> .)
    *               reduce using rule 623 (empty -> .)
    /               reduce using rule 623 (empty -> .)
    %               reduce using rule 623 (empty -> .)
    +               reduce using rule 623 (empty -> .)
    -               reduce using rule 623 (empty -> .)
    LSHIFT          reduce using rule 623 (empty -> .)
    RSHIFT          reduce using rule 623 (empty -> .)
    RRSHIFT         reduce using rule 623 (empty -> .)
    >               reduce using rule 623 (empty -> .)
    <               reduce using rule 623 (empty -> .)
    GTEQ            reduce using rule 623 (empty -> .)
    LTEQ            reduce using rule 623 (empty -> .)
    INSTANCEOF      reduce using rule 623 (empty -> .)
    EQ              reduce using rule 623 (empty -> .)
    NEQ             reduce using rule 623 (empty -> .)
    &               reduce using rule 623 (empty -> .)
    ^               reduce using rule 623 (empty -> .)
    |               reduce using rule 623 (empty -> .)
    AND             reduce using rule 623 (empty -> .)
    ?               reduce using rule 623 (empty -> .)
    OR              reduce using rule 623 (empty -> .)
    $end            reduce using rule 623 (empty -> .)
    )               reduce using rule 623 (empty -> .)
    :               reduce using rule 623 (empty -> .)
    ]               reduce using rule 623 (empty -> .)
    ,               reduce using rule 623 (empty -> .)
    }               reduce using rule 623 (empty -> .)

    class_body_opt                 shift and go to state 1152
    class_body                     shift and go to state 1041
    empty                          shift and go to state 1043

state 1143

    (273) switch_label -> CASE constant_expression : .

    }               reduce using rule 273 (switch_label -> CASE constant_expression : .)
    CASE            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    DEFAULT         reduce using rule 273 (switch_label -> CASE constant_expression : .)
    IF              reduce using rule 273 (switch_label -> CASE constant_expression : .)
    WHILE           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    FOR             reduce using rule 273 (switch_label -> CASE constant_expression : .)
    {               reduce using rule 273 (switch_label -> CASE constant_expression : .)
    ASSERT          reduce using rule 273 (switch_label -> CASE constant_expression : .)
    ;               reduce using rule 273 (switch_label -> CASE constant_expression : .)
    SWITCH          reduce using rule 273 (switch_label -> CASE constant_expression : .)
    DO              reduce using rule 273 (switch_label -> CASE constant_expression : .)
    BREAK           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    CONTINUE        reduce using rule 273 (switch_label -> CASE constant_expression : .)
    RETURN          reduce using rule 273 (switch_label -> CASE constant_expression : .)
    SYNCHRONIZED    reduce using rule 273 (switch_label -> CASE constant_expression : .)
    THROW           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    TRY             reduce using rule 273 (switch_label -> CASE constant_expression : .)
    NAME            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    @               reduce using rule 273 (switch_label -> CASE constant_expression : .)
    BOOLEAN         reduce using rule 273 (switch_label -> CASE constant_expression : .)
    VOID            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    BYTE            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    SHORT           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    INT             reduce using rule 273 (switch_label -> CASE constant_expression : .)
    LONG            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    CHAR            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    FLOAT           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    DOUBLE          reduce using rule 273 (switch_label -> CASE constant_expression : .)
    PUBLIC          reduce using rule 273 (switch_label -> CASE constant_expression : .)
    PROTECTED       reduce using rule 273 (switch_label -> CASE constant_expression : .)
    PRIVATE         reduce using rule 273 (switch_label -> CASE constant_expression : .)
    STATIC          reduce using rule 273 (switch_label -> CASE constant_expression : .)
    ABSTRACT        reduce using rule 273 (switch_label -> CASE constant_expression : .)
    FINAL           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    NATIVE          reduce using rule 273 (switch_label -> CASE constant_expression : .)
    TRANSIENT       reduce using rule 273 (switch_label -> CASE constant_expression : .)
    VOLATILE        reduce using rule 273 (switch_label -> CASE constant_expression : .)
    STRICTFP        reduce using rule 273 (switch_label -> CASE constant_expression : .)
    THIS            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    SUPER           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    PLUSPLUS        reduce using rule 273 (switch_label -> CASE constant_expression : .)
    MINUSMINUS      reduce using rule 273 (switch_label -> CASE constant_expression : .)
    NEW             reduce using rule 273 (switch_label -> CASE constant_expression : .)
    <               reduce using rule 273 (switch_label -> CASE constant_expression : .)
    (               reduce using rule 273 (switch_label -> CASE constant_expression : .)
    NUM             reduce using rule 273 (switch_label -> CASE constant_expression : .)
    CHAR_LITERAL    reduce using rule 273 (switch_label -> CASE constant_expression : .)
    STRING_LITERAL  reduce using rule 273 (switch_label -> CASE constant_expression : .)
    TRUE            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    FALSE           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    NULL            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    ENUM            reduce using rule 273 (switch_label -> CASE constant_expression : .)
    CLASS           reduce using rule 273 (switch_label -> CASE constant_expression : .)
    INTERFACE       reduce using rule 273 (switch_label -> CASE constant_expression : .)


state 1144

    (267) switch_block -> { switch_block_statements switch_labels } .

    $end            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    IF              reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    WHILE           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    FOR             reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    {               reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    ASSERT          reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    ;               reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    SWITCH          reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    DO              reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    BREAK           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    CONTINUE        reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    RETURN          reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    SYNCHRONIZED    reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    THROW           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    TRY             reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    NAME            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    @               reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    BOOLEAN         reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    VOID            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    BYTE            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    SHORT           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    INT             reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    LONG            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    CHAR            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    FLOAT           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    DOUBLE          reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    PUBLIC          reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    PROTECTED       reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    PRIVATE         reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    STATIC          reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    ABSTRACT        reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    FINAL           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    NATIVE          reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    TRANSIENT       reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    VOLATILE        reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    STRICTFP        reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    THIS            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    SUPER           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    PLUSPLUS        reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    MINUSMINUS      reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    NEW             reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    <               reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    (               reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    NUM             reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    CHAR_LITERAL    reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    STRING_LITERAL  reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    TRUE            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    FALSE           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    NULL            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    ENUM            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    CLASS           reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    INTERFACE       reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    }               reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    CASE            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    DEFAULT         reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)
    ELSE            reduce using rule 267 (switch_block -> { switch_block_statements switch_labels } .)


state 1145

    (324) class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .

    [               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    .               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    PLUSPLUS        reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    MINUSMINUS      reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    =               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    TIMES_ASSIGN    reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    DIVIDE_ASSIGN   reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    REMAINDER_ASSIGN reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    PLUS_ASSIGN     reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    MINUS_ASSIGN    reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT_ASSIGN   reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT_ASSIGN   reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT_ASSIGN  reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    AND_ASSIGN      reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    OR_ASSIGN       reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    XOR_ASSIGN      reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    *               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    /               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    %               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    +               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    -               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT          reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT          reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT         reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    >               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    <               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    GTEQ            reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LTEQ            reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    INSTANCEOF      reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    EQ              reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    NEQ             reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    &               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ^               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    |               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    AND             reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ?               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    OR              reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    :               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ,               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    )               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    $end            reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ;               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ]               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    }               reduce using rule 324 (class_instance_creation_expression -> class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)


state 1146

    (236) for_statement -> FOR ( for_init_opt ; . expression_opt ; for_update_opt ) statement
    (237) for_statement_no_short_if -> FOR ( for_init_opt ; . expression_opt ; for_update_opt ) statement_no_short_if
    (244) expression_opt -> . expression
    (245) expression_opt -> . empty
    (1) expression -> . assignment_expression
    (623) empty -> .
    (3) assignment_expression -> . assignment
    (4) assignment_expression -> . conditional_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (20) conditional_expression -> . conditional_or_expression
    (21) conditional_expression -> . conditional_or_expression ? expression : conditional_expression
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (25) conditional_or_expression -> . conditional_and_expression
    (26) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (30) conditional_and_expression -> . inclusive_or_expression
    (31) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (35) inclusive_or_expression -> . exclusive_or_expression
    (36) inclusive_or_expression -> . inclusive_or_expression | exclusive_or_expression
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE
    (40) exclusive_or_expression -> . and_expression
    (41) exclusive_or_expression -> . exclusive_or_expression ^ and_expression
    (325) class_instance_creation_expression_name -> . name .
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression & equality_expression
    (50) equality_expression -> . instanceof_expression
    (51) equality_expression -> . equality_expression EQ instanceof_expression
    (52) equality_expression -> . equality_expression NEQ instanceof_expression
    (58) instanceof_expression -> . relational_expression
    (59) instanceof_expression -> . instanceof_expression INSTANCEOF reference_type
    (63) relational_expression -> . shift_expression
    (64) relational_expression -> . relational_expression > shift_expression
    (65) relational_expression -> . relational_expression < shift_expression
    (66) relational_expression -> . relational_expression GTEQ shift_expression
    (67) relational_expression -> . relational_expression LTEQ shift_expression
    (77) shift_expression -> . additive_expression
    (78) shift_expression -> . shift_expression LSHIFT additive_expression
    (79) shift_expression -> . shift_expression RSHIFT additive_expression
    (80) shift_expression -> . shift_expression RRSHIFT additive_expression
    (88) additive_expression -> . multiplicative_expression
    (89) additive_expression -> . additive_expression + multiplicative_expression
    (90) additive_expression -> . additive_expression - multiplicative_expression
    (96) multiplicative_expression -> . unary_expression
    (97) multiplicative_expression -> . multiplicative_expression * unary_expression
    (98) multiplicative_expression -> . multiplicative_expression / unary_expression
    (99) multiplicative_expression -> . multiplicative_expression % unary_expression
    (107) unary_expression -> . pre_increment_expression
    (108) unary_expression -> . pre_decrement_expression
    (109) unary_expression -> . + unary_expression
    (110) unary_expression -> . - unary_expression
    (111) unary_expression -> . unary_expression_not_plus_minus
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (119) unary_expression_not_plus_minus -> . postfix_expression
    (120) unary_expression_not_plus_minus -> . ~ unary_expression
    (121) unary_expression_not_plus_minus -> . ! unary_expression
    (122) unary_expression_not_plus_minus -> . cast_expression
    (159) cast_expression -> . ( primitive_type dims_opt ) unary_expression
    (160) cast_expression -> . ( name type_arguments dims_opt ) unary_expression_not_plus_minus
    (161) cast_expression -> . ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus
    (162) cast_expression -> . ( name ) unary_expression_not_plus_minus
    (163) cast_expression -> . ( name dims ) unary_expression_not_plus_minus

    ;               reduce using rule 623 (empty -> .)
    THIS            shift and go to state 158
    (               shift and go to state 155
    NEW             shift and go to state 172
    NAME            shift and go to state 179
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    SUPER           shift and go to state 189
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75
    +               shift and go to state 164
    -               shift and go to state 184
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    ~               shift and go to state 181
    !               shift and go to state 183

    unary_expression               shift and go to state 162
    exclusive_or_expression        shift and go to state 170
    primary                        shift and go to state 171
    post_decrement_expression      shift and go to state 153
    and_expression                 shift and go to state 182
    simple_name                    shift and go to state 64
    cast_expression                shift and go to state 177
    inclusive_or_expression        shift and go to state 154
    array_access                   shift and go to state 90
    additive_expression            shift and go to state 173
    postfix_expression             shift and go to state 185
    class_instance_creation_expression shift and go to state 156
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    pre_increment_expression       shift and go to state 168
    relational_expression          shift and go to state 175
    method_invocation              shift and go to state 176
    array_creation_without_array_initializer shift and go to state 95
    conditional_or_expression      shift and go to state 165
    empty                          shift and go to state 306
    field_access                   shift and go to state 96
    assignment_expression          shift and go to state 186
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 187
    multiplicative_expression      shift and go to state 166
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    expression_opt                 shift and go to state 1153
    primary_no_new_array           shift and go to state 87
    equality_expression            shift and go to state 178
    name                           shift and go to state 157
    unary_expression_not_plus_minus shift and go to state 163
    shift_expression               shift and go to state 167
    instanceof_expression          shift and go to state 180
    post_increment_expression      shift and go to state 159
    conditional_expression         shift and go to state 188
    pre_decrement_expression       shift and go to state 160
    expression                     shift and go to state 305
    conditional_and_expression     shift and go to state 161

state 1147

    (234) while_statement -> WHILE ( expression ) . statement
    (235) while_statement_no_short_if -> WHILE ( expression ) . statement_no_short_if
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (254) statement_no_short_if -> . statement_without_trailing_substatement
    (255) statement_no_short_if -> . labeled_statement_no_short_if
    (256) statement_no_short_if -> . if_then_else_statement_no_short_if
    (257) statement_no_short_if -> . while_statement_no_short_if
    (258) statement_no_short_if -> . for_statement_no_short_if
    (259) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (229) labeled_statement_no_short_if -> . label : statement_no_short_if
    (233) if_then_else_statement_no_short_if -> . IF ( expression ) statement_no_short_if ELSE statement_no_short_if
    (235) while_statement_no_short_if -> . WHILE ( expression ) statement_no_short_if
    (237) for_statement_no_short_if -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (250) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 961
    WHILE           shift and go to state 955
    FOR             shift and go to state 952
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    array_access                   shift and go to state 90
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    labeled_statement_no_short_if  shift and go to state 956
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_no_short_if shift and go to state 954
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 951
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 934
    literal                        shift and go to state 146
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    while_statement_no_short_if    shift and go to state 958
    enhanced_for_statement_header  shift and go to state 949
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    for_statement_no_short_if      shift and go to state 959
    statement_without_trailing_substatement shift and go to state 953
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    statement_no_short_if          shift and go to state 1154
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    array_creation_with_array_initializer shift and go to state 101
    labeled_statement              shift and go to state 77
    if_then_else_statement_no_short_if shift and go to state 950
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 1148

    (231) if_then_statement -> IF ( expression ) . statement
    (232) if_then_else_statement -> IF ( expression ) . statement_no_short_if ELSE statement
    (233) if_then_else_statement_no_short_if -> IF ( expression ) . statement_no_short_if ELSE statement_no_short_if
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (254) statement_no_short_if -> . statement_without_trailing_substatement
    (255) statement_no_short_if -> . labeled_statement_no_short_if
    (256) statement_no_short_if -> . if_then_else_statement_no_short_if
    (257) statement_no_short_if -> . while_statement_no_short_if
    (258) statement_no_short_if -> . for_statement_no_short_if
    (259) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (229) labeled_statement_no_short_if -> . label : statement_no_short_if
    (233) if_then_else_statement_no_short_if -> . IF ( expression ) statement_no_short_if ELSE statement_no_short_if
    (235) while_statement_no_short_if -> . WHILE ( expression ) statement_no_short_if
    (237) for_statement_no_short_if -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (250) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 961
    WHILE           shift and go to state 955
    FOR             shift and go to state 952
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    array_access                   shift and go to state 90
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    labeled_statement_no_short_if  shift and go to state 956
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_no_short_if shift and go to state 954
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 951
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 957
    literal                        shift and go to state 146
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    while_statement_no_short_if    shift and go to state 958
    enhanced_for_statement_header  shift and go to state 949
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    for_statement_no_short_if      shift and go to state 959
    statement_without_trailing_substatement shift and go to state 953
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    statement_no_short_if          shift and go to state 1155
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    array_creation_with_array_initializer shift and go to state 101
    labeled_statement              shift and go to state 77
    if_then_else_statement_no_short_if shift and go to state 950
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 1149

    (161) cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .

    *               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    /               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    %               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    +               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    -               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    LSHIFT          reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    RSHIFT          reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    RRSHIFT         reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    >               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    <               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    GTEQ            reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    LTEQ            reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    INSTANCEOF      reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    EQ              reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    NEQ             reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    &               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    ^               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    |               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    AND             reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    ?               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    OR              reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    )               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    ,               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    }               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    ;               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    $end            reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    :               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)
    ]               reduce using rule 161 (cast_expression -> ( name type_arguments . class_or_interface_type dims_opt ) unary_expression_not_plus_minus .)


state 1150

    (498) class_type_list -> class_type_list , class_type_elt .

    ,               reduce using rule 498 (class_type_list -> class_type_list , class_type_elt .)
    {               reduce using rule 498 (class_type_list -> class_type_list , class_type_elt .)
    ;               reduce using rule 498 (class_type_list -> class_type_list , class_type_elt .)


state 1151

    (236) for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .

    $end            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    IF              reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    WHILE           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    FOR             reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    {               reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    ASSERT          reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    ;               reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    SWITCH          reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    DO              reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    BREAK           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    CONTINUE        reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    RETURN          reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    SYNCHRONIZED    reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    THROW           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    TRY             reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    NAME            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    @               reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    BOOLEAN         reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    VOID            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    BYTE            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    SHORT           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    INT             reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    LONG            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    CHAR            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    FLOAT           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    DOUBLE          reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    PUBLIC          reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    PROTECTED       reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    PRIVATE         reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    STATIC          reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    ABSTRACT        reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    FINAL           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    NATIVE          reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    TRANSIENT       reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    VOLATILE        reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    STRICTFP        reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    THIS            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    SUPER           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    PLUSPLUS        reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    MINUSMINUS      reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    NEW             reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    <               reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    (               reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    NUM             reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    CHAR_LITERAL    reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    STRING_LITERAL  reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    TRUE            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    FALSE           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    NULL            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    ENUM            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    CLASS           reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    INTERFACE       reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    }               reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    CASE            reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)
    DEFAULT         reduce using rule 236 (for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement .)


state 1152

    (321) class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .

    [               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    .               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    PLUSPLUS        reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    MINUSMINUS      reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    =               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    TIMES_ASSIGN    reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    DIVIDE_ASSIGN   reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    REMAINDER_ASSIGN reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    PLUS_ASSIGN     reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    MINUS_ASSIGN    reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT_ASSIGN   reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT_ASSIGN   reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT_ASSIGN  reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    AND_ASSIGN      reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    OR_ASSIGN       reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    XOR_ASSIGN      reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    *               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    /               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    %               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    +               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    -               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LSHIFT          reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RSHIFT          reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    RRSHIFT         reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    >               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    <               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    GTEQ            reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    LTEQ            reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    INSTANCEOF      reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    EQ              reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    NEQ             reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    &               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ^               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    |               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    AND             reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ?               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    OR              reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    :               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ,               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    )               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    $end            reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ;               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    ]               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)
    }               reduce using rule 321 (class_instance_creation_expression -> primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt .)


state 1153

    (236) for_statement -> FOR ( for_init_opt ; expression_opt . ; for_update_opt ) statement
    (237) for_statement_no_short_if -> FOR ( for_init_opt ; expression_opt . ; for_update_opt ) statement_no_short_if

    ;               shift and go to state 1156


state 1154

    (235) while_statement_no_short_if -> WHILE ( expression ) statement_no_short_if .

    ELSE            reduce using rule 235 (while_statement_no_short_if -> WHILE ( expression ) statement_no_short_if .)


state 1155

    (232) if_then_else_statement -> IF ( expression ) statement_no_short_if . ELSE statement
    (233) if_then_else_statement_no_short_if -> IF ( expression ) statement_no_short_if . ELSE statement_no_short_if

    ELSE            shift and go to state 1157


state 1156

    (236) for_statement -> FOR ( for_init_opt ; expression_opt ; . for_update_opt ) statement
    (237) for_statement_no_short_if -> FOR ( for_init_opt ; expression_opt ; . for_update_opt ) statement_no_short_if
    (246) for_update_opt -> . for_update
    (247) for_update_opt -> . empty
    (248) for_update -> . statement_expression_list
    (623) empty -> .
    (242) statement_expression_list -> . statement_expression
    (243) statement_expression_list -> . statement_expression_list , statement_expression
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (325) class_instance_creation_expression_name -> . name .
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    )               reduce using rule 623 (empty -> .)
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NAME            shift and go to state 584
    SUPER           shift and go to state 586
    NEW             shift and go to state 114
    THIS            shift and go to state 158
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    primary                        shift and go to state 579
    post_decrement_expression      shift and go to state 60
    array_access                   shift and go to state 90
    postfix_expression             shift and go to state 59
    primary_no_new_array           shift and go to state 87
    primitive_type                 shift and go to state 174
    literal                        shift and go to state 146
    statement_expression           shift and go to state 575
    method_invocation              shift and go to state 120
    simple_name                    shift and go to state 64
    empty                          shift and go to state 1090
    field_access                   shift and go to state 96
    qualified_name                 shift and go to state 141
    for_update_opt                 shift and go to state 1158
    assignment                     shift and go to state 145
    array_creation_with_array_initializer shift and go to state 101
    class_instance_creation_expression_name shift and go to state 122
    for_update                     shift and go to state 1092
    statement_expression_list      shift and go to state 1093
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 914
    array_creation_without_array_initializer shift and go to state 95
    pre_increment_expression       shift and go to state 103
    post_increment_expression      shift and go to state 78
    pre_decrement_expression       shift and go to state 79

state 1157

    (232) if_then_else_statement -> IF ( expression ) statement_no_short_if ELSE . statement
    (233) if_then_else_statement_no_short_if -> IF ( expression ) statement_no_short_if ELSE . statement_no_short_if
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (254) statement_no_short_if -> . statement_without_trailing_substatement
    (255) statement_no_short_if -> . labeled_statement_no_short_if
    (256) statement_no_short_if -> . if_then_else_statement_no_short_if
    (257) statement_no_short_if -> . while_statement_no_short_if
    (258) statement_no_short_if -> . for_statement_no_short_if
    (259) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (229) labeled_statement_no_short_if -> . label : statement_no_short_if
    (233) if_then_else_statement_no_short_if -> . IF ( expression ) statement_no_short_if ELSE statement_no_short_if
    (235) while_statement_no_short_if -> . WHILE ( expression ) statement_no_short_if
    (237) for_statement_no_short_if -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (250) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 961
    WHILE           shift and go to state 955
    FOR             shift and go to state 952
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    array_access                   shift and go to state 90
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    labeled_statement_no_short_if  shift and go to state 956
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_no_short_if shift and go to state 954
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 951
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 1123
    literal                        shift and go to state 146
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    while_statement_no_short_if    shift and go to state 958
    enhanced_for_statement_header  shift and go to state 949
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    for_statement_no_short_if      shift and go to state 959
    statement_without_trailing_substatement shift and go to state 953
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    statement_no_short_if          shift and go to state 1159
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    array_creation_with_array_initializer shift and go to state 101
    labeled_statement              shift and go to state 77
    if_then_else_statement_no_short_if shift and go to state 950
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 1158

    (236) for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt . ) statement
    (237) for_statement_no_short_if -> FOR ( for_init_opt ; expression_opt ; for_update_opt . ) statement_no_short_if

    )               shift and go to state 1160


state 1159

    (233) if_then_else_statement_no_short_if -> IF ( expression ) statement_no_short_if ELSE statement_no_short_if .

    ELSE            reduce using rule 233 (if_then_else_statement_no_short_if -> IF ( expression ) statement_no_short_if ELSE statement_no_short_if .)


state 1160

    (236) for_statement -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) . statement
    (237) for_statement_no_short_if -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) . statement_no_short_if
    (185) statement -> . statement_without_trailing_substatement
    (186) statement -> . labeled_statement
    (187) statement -> . if_then_statement
    (188) statement -> . if_then_else_statement
    (189) statement -> . while_statement
    (190) statement -> . for_statement
    (191) statement -> . enhanced_for_statement
    (254) statement_no_short_if -> . statement_without_trailing_substatement
    (255) statement_no_short_if -> . labeled_statement_no_short_if
    (256) statement_no_short_if -> . if_then_else_statement_no_short_if
    (257) statement_no_short_if -> . while_statement_no_short_if
    (258) statement_no_short_if -> . for_statement_no_short_if
    (259) statement_no_short_if -> . enhanced_for_statement_no_short_if
    (192) statement_without_trailing_substatement -> . block
    (193) statement_without_trailing_substatement -> . expression_statement
    (194) statement_without_trailing_substatement -> . assert_statement
    (195) statement_without_trailing_substatement -> . empty_statement
    (196) statement_without_trailing_substatement -> . switch_statement
    (197) statement_without_trailing_substatement -> . do_statement
    (198) statement_without_trailing_substatement -> . break_statement
    (199) statement_without_trailing_substatement -> . continue_statement
    (200) statement_without_trailing_substatement -> . return_statement
    (201) statement_without_trailing_substatement -> . synchronized_statement
    (202) statement_without_trailing_substatement -> . throw_statement
    (203) statement_without_trailing_substatement -> . try_statement
    (204) statement_without_trailing_substatement -> . try_statement_with_resources
    (228) labeled_statement -> . label : statement
    (231) if_then_statement -> . IF ( expression ) statement
    (232) if_then_else_statement -> . IF ( expression ) statement_no_short_if ELSE statement
    (234) while_statement -> . WHILE ( expression ) statement
    (236) for_statement -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement
    (249) enhanced_for_statement -> . enhanced_for_statement_header statement
    (229) labeled_statement_no_short_if -> . label : statement_no_short_if
    (233) if_then_else_statement_no_short_if -> . IF ( expression ) statement_no_short_if ELSE statement_no_short_if
    (235) while_statement_no_short_if -> . WHILE ( expression ) statement_no_short_if
    (237) for_statement_no_short_if -> . FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if
    (250) enhanced_for_statement_no_short_if -> . enhanced_for_statement_header statement_no_short_if
    (164) block -> . { block_statements_opt }
    (205) expression_statement -> . statement_expression ;
    (206) expression_statement -> . explicit_constructor_invocation
    (260) assert_statement -> . ASSERT expression ;
    (261) assert_statement -> . ASSERT expression : expression ;
    (262) empty_statement -> . ;
    (263) switch_statement -> . SWITCH ( expression ) switch_block
    (276) do_statement -> . DO statement WHILE ( expression ) ;
    (277) break_statement -> . BREAK ;
    (278) break_statement -> . BREAK NAME ;
    (279) continue_statement -> . CONTINUE ;
    (280) continue_statement -> . CONTINUE NAME ;
    (281) return_statement -> . RETURN expression_opt ;
    (282) synchronized_statement -> . SYNCHRONIZED ( expression ) block
    (283) throw_statement -> . THROW expression ;
    (284) try_statement -> . TRY try_block catches
    (285) try_statement -> . TRY try_block catches_opt finally
    (296) try_statement_with_resources -> . TRY resource_specification try_block catches_opt
    (297) try_statement_with_resources -> . TRY resource_specification try_block catches_opt finally
    (230) label -> . NAME
    (251) enhanced_for_statement_header -> . enhanced_for_statement_header_init : expression )
    (207) statement_expression -> . assignment
    (208) statement_expression -> . pre_increment_expression
    (209) statement_expression -> . pre_decrement_expression
    (210) statement_expression -> . post_increment_expression
    (211) statement_expression -> . post_decrement_expression
    (212) statement_expression -> . method_invocation
    (213) statement_expression -> . class_instance_creation_expression
    (307) explicit_constructor_invocation -> . THIS ( argument_list_opt ) ;
    (308) explicit_constructor_invocation -> . SUPER ( argument_list_opt ) ;
    (309) explicit_constructor_invocation -> . type_arguments SUPER ( argument_list_opt ) ;
    (310) explicit_constructor_invocation -> . type_arguments THIS ( argument_list_opt ) ;
    (311) explicit_constructor_invocation -> . primary . SUPER ( argument_list_opt ) ;
    (312) explicit_constructor_invocation -> . name . SUPER ( argument_list_opt ) ;
    (313) explicit_constructor_invocation -> . primary . THIS ( argument_list_opt ) ;
    (314) explicit_constructor_invocation -> . name . THIS ( argument_list_opt ) ;
    (315) explicit_constructor_invocation -> . primary . type_arguments SUPER ( argument_list_opt ) ;
    (316) explicit_constructor_invocation -> . name . type_arguments SUPER ( argument_list_opt ) ;
    (317) explicit_constructor_invocation -> . primary . type_arguments THIS ( argument_list_opt ) ;
    (318) explicit_constructor_invocation -> . name . type_arguments THIS ( argument_list_opt ) ;
    (252) enhanced_for_statement_header_init -> . FOR ( type NAME dims_opt
    (253) enhanced_for_statement_header_init -> . FOR ( modifiers type NAME dims_opt
    (7) assignment -> . postfix_expression assignment_operator assignment_expression
    (117) pre_increment_expression -> . PLUSPLUS unary_expression
    (118) pre_decrement_expression -> . MINUSMINUS unary_expression
    (134) post_increment_expression -> . postfix_expression PLUSPLUS
    (135) post_decrement_expression -> . postfix_expression MINUSMINUS
    (221) method_invocation -> . NAME ( argument_list_opt )
    (222) method_invocation -> . name . type_arguments NAME ( argument_list_opt )
    (223) method_invocation -> . primary . type_arguments NAME ( argument_list_opt )
    (224) method_invocation -> . SUPER . type_arguments NAME ( argument_list_opt )
    (225) method_invocation -> . name . NAME ( argument_list_opt )
    (226) method_invocation -> . primary . NAME ( argument_list_opt )
    (227) method_invocation -> . SUPER . NAME ( argument_list_opt )
    (319) class_instance_creation_expression -> . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (320) class_instance_creation_expression -> . NEW class_type ( argument_list_opt ) class_body_opt
    (321) class_instance_creation_expression -> . primary . NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (322) class_instance_creation_expression -> . primary . NEW class_type ( argument_list_opt ) class_body_opt
    (323) class_instance_creation_expression -> . class_instance_creation_expression_name NEW class_type ( argument_list_opt ) class_body_opt
    (324) class_instance_creation_expression -> . class_instance_creation_expression_name NEW type_arguments class_type ( argument_list_opt ) class_body_opt
    (391) type_arguments -> . < type_argument_list1
    (136) primary -> . primary_no_new_array
    (137) primary -> . array_creation_with_array_initializer
    (138) primary -> . array_creation_without_array_initializer
    (341) name -> . simple_name
    (342) name -> . qualified_name
    (127) postfix_expression -> . primary
    (128) postfix_expression -> . name
    (129) postfix_expression -> . post_increment_expression
    (130) postfix_expression -> . post_decrement_expression
    (325) class_instance_creation_expression_name -> . name .
    (139) primary_no_new_array -> . literal
    (140) primary_no_new_array -> . THIS
    (141) primary_no_new_array -> . class_instance_creation_expression
    (142) primary_no_new_array -> . field_access
    (143) primary_no_new_array -> . method_invocation
    (144) primary_no_new_array -> . array_access
    (145) primary_no_new_array -> . ( name )
    (146) primary_no_new_array -> . ( expression_not_name )
    (147) primary_no_new_array -> . name . THIS
    (148) primary_no_new_array -> . name . SUPER
    (149) primary_no_new_array -> . name . CLASS
    (150) primary_no_new_array -> . name dims . CLASS
    (151) primary_no_new_array -> . primitive_type dims . CLASS
    (152) primary_no_new_array -> . primitive_type . CLASS
    (333) array_creation_with_array_initializer -> . NEW primitive_type dim_with_or_without_exprs array_initializer
    (334) array_creation_with_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs array_initializer
    (339) array_creation_without_array_initializer -> . NEW primitive_type dim_with_or_without_exprs
    (340) array_creation_without_array_initializer -> . NEW class_or_interface_type dim_with_or_without_exprs
    (343) simple_name -> . NAME
    (344) qualified_name -> . name . simple_name
    (345) literal -> . NUM
    (346) literal -> . CHAR_LITERAL
    (347) literal -> . STRING_LITERAL
    (348) literal -> . TRUE
    (349) literal -> . FALSE
    (350) literal -> . NULL
    (328) field_access -> . primary . NAME
    (329) field_access -> . SUPER . NAME
    (330) array_access -> . name [ expression ]
    (331) array_access -> . primary_no_new_array [ expression ]
    (332) array_access -> . array_creation_with_array_initializer [ expression ]
    (369) primitive_type -> . BOOLEAN
    (370) primitive_type -> . VOID
    (371) primitive_type -> . BYTE
    (372) primitive_type -> . SHORT
    (373) primitive_type -> . INT
    (374) primitive_type -> . LONG
    (375) primitive_type -> . CHAR
    (376) primitive_type -> . FLOAT
    (377) primitive_type -> . DOUBLE

    IF              shift and go to state 961
    WHILE           shift and go to state 955
    FOR             shift and go to state 952
    {               shift and go to state 106
    ASSERT          shift and go to state 139
    ;               shift and go to state 94
    SWITCH          shift and go to state 117
    DO              shift and go to state 136
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 104
    RETURN          shift and go to state 82
    SYNCHRONIZED    shift and go to state 298
    THROW           shift and go to state 152
    TRY             shift and go to state 100
    NAME            shift and go to state 127
    THIS            shift and go to state 74
    SUPER           shift and go to state 150
    PLUSPLUS        shift and go to state 98
    MINUSMINUS      shift and go to state 147
    NEW             shift and go to state 114
    <               shift and go to state 67
    (               shift and go to state 62
    NUM             shift and go to state 118
    CHAR_LITERAL    shift and go to state 76
    STRING_LITERAL  shift and go to state 149
    TRUE            shift and go to state 124
    FALSE           shift and go to state 126
    NULL            shift and go to state 140
    BOOLEAN         shift and go to state 133
    VOID            shift and go to state 56
    BYTE            shift and go to state 123
    SHORT           shift and go to state 81
    INT             shift and go to state 132
    LONG            shift and go to state 63
    CHAR            shift and go to state 110
    FLOAT           shift and go to state 137
    DOUBLE          shift and go to state 75

    expression_statement           shift and go to state 54
    array_access                   shift and go to state 90
    field_access                   shift and go to state 96
    explicit_constructor_invocation shift and go to state 55
    enhanced_for_statement         shift and go to state 138
    type_arguments                 shift and go to state 85
    throw_statement                shift and go to state 57
    break_statement                shift and go to state 86
    primary_no_new_array           shift and go to state 87
    empty_statement                shift and go to state 130
    if_then_statement              shift and go to state 113
    post_decrement_expression      shift and go to state 60
    switch_statement               shift and go to state 89
    labeled_statement_no_short_if  shift and go to state 956
    primitive_type                 shift and go to state 174
    assert_statement               shift and go to state 61
    pre_increment_expression       shift and go to state 103
    enhanced_for_statement_no_short_if shift and go to state 954
    synchronized_statement         shift and go to state 115
    label                          shift and go to state 951
    return_statement               shift and go to state 142
    while_statement                shift and go to state 65
    continue_statement             shift and go to state 93
    do_statement                   shift and go to state 143
    statement                      shift and go to state 1151
    literal                        shift and go to state 146
    statement_expression           shift and go to state 66
    method_invocation              shift and go to state 120
    array_creation_without_array_initializer shift and go to state 95
    while_statement_no_short_if    shift and go to state 958
    enhanced_for_statement_header  shift and go to state 949
    for_statement                  shift and go to state 69
    try_statement                  shift and go to state 71
    qualified_name                 shift and go to state 141
    assignment                     shift and go to state 145
    for_statement_no_short_if      shift and go to state 959
    statement_without_trailing_substatement shift and go to state 953
    primary                        shift and go to state 109
    class_instance_creation_expression_name shift and go to state 122
    statement_no_short_if          shift and go to state 1161
    class_instance_creation_expression shift and go to state 72
    name                           shift and go to state 297
    postfix_expression             shift and go to state 59
    array_creation_with_array_initializer shift and go to state 101
    labeled_statement              shift and go to state 77
    if_then_else_statement_no_short_if shift and go to state 950
    post_increment_expression      shift and go to state 78
    try_statement_with_resources   shift and go to state 80
    enhanced_for_statement_header_init shift and go to state 105
    simple_name                    shift and go to state 64
    pre_decrement_expression       shift and go to state 79
    block                          shift and go to state 107
    if_then_else_statement         shift and go to state 108

state 1161

    (237) for_statement_no_short_if -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if .

    ELSE            reduce using rule 237 (for_statement_no_short_if -> FOR ( for_init_opt ; expression_opt ; for_update_opt ) statement_no_short_if .)

